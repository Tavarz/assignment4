
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 32 00 20 ad 1e 00 00 ff 5e 00 00 81 1e 00 00     @2. .....^......
  10:	81 1e 00 00 81 1e 00 00 81 1e 00 00 00 00 00 00     ................
	...
  2c:	a1 1b 00 00 81 1e 00 00 00 00 00 00 4d 1b 00 00     ............M...
  3c:	81 1e 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	51 1c 00 00 51 1c 00 00 51 1c 00 00 51 1c 00 00     Q...Q...Q...Q...
  50:	51 1c 00 00 51 1c 00 00 51 1c 00 00 51 1c 00 00     Q...Q...Q...Q...
  60:	51 1c 00 00 51 1c 00 00 51 1c 00 00 51 1c 00 00     Q...Q...Q...Q...
  70:	51 1c 00 00 51 1c 00 00 51 1c 00 00 51 1c 00 00     Q...Q...Q...Q...
  80:	51 1c 00 00 51 1c 00 00 51 1c 00 00 51 1c 00 00     Q...Q...Q...Q...
  90:	51 1c 00 00 51 1c 00 00 51 1c 00 00 51 1c 00 00     Q...Q...Q...Q...
  a0:	51 1c 00 00 51 1c 00 00 51 1c 00 00 51 1c 00 00     Q...Q...Q...Q...
  b0:	51 1c 00 00 51 1c 00 00 51 1c 00 00 51 1c 00 00     Q...Q...Q...Q...
  c0:	51 1c 00 00 51 1c 00 00 51 1c 00 00 51 1c 00 00     Q...Q...Q...Q...
  d0:	51 1c 00 00 51 1c 00 00 51 1c 00 00 51 1c 00 00     Q...Q...Q...Q...
  e0:	51 1c 00 00 51 1c 00 00 51 1c 00 00 51 1c 00 00     Q...Q...Q...Q...
  f0:	51 1c 00 00 51 1c 00 00 51 1c 00 00 51 1c 00 00     Q...Q...Q...Q...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <__data_size+0x150>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
     152:	d945      	bls.n	1e0 <__data_size+0x60>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
     162:	4095      	lsls	r5, r2
     164:	ea43 0c0c 	orr.w	ip, r3, ip
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <__data_size+0x58>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     18c:	d204      	bcs.n	198 <__data_size+0x18>
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <__data_size+0x18>
     192:	f1a8 0702 	sub.w	r7, r8, #2
     196:	442b      	add	r3, r5
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
     1b0:	d914      	bls.n	1dc <__data_size+0x5c>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     1b8:	d204      	bcs.n	1c4 <__data_size+0x44>
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <__data_size+0x44>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
     1c2:	442c      	add	r4, r5
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1ca:	b11e      	cbz	r6, 1d4 <__data_size+0x54>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <__data_size+0x18>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <__data_size+0x44>
     1e0:	bb92      	cbnz	r2, 248 <__data_size+0xc8>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <__data_size+0x148>
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d204      	bcs.n	214 <__data_size+0x94>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <__data_size+0x94>
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
     218:	b2a4      	uxth	r4, r4
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
     222:	fb0c f707 	mul.w	r7, ip, r7
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <__data_size+0x14c>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     234:	d204      	bcs.n	240 <__data_size+0xc0>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <__data_size+0xc0>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     246:	e7c0      	b.n	1ca <__data_size+0x4a>
     248:	f1c2 0320 	rsb	r3, r2, #32
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     25e:	b2af      	uxth	r7, r5
     260:	fbb1 fcfe 	udiv	ip, r1, lr
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
     278:	d922      	bls.n	2c0 <__data_size+0x140>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     280:	d204      	bcs.n	28c <__data_size+0x10c>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <__data_size+0x10c>
     286:	f1ac 0002 	sub.w	r0, ip, #2
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
     296:	fb0e 111c 	mls	r1, lr, ip, r1
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <__data_size+0x144>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     2ac:	d204      	bcs.n	2b8 <__data_size+0x138>
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <__data_size+0x138>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <__data_size+0x66>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <__data_size+0x10c>
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <__data_size+0x138>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <__data_size+0x94>
     2cc:	4663      	mov	r3, ip
     2ce:	e7b7      	b.n	240 <__data_size+0xc0>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <__data_size+0x162>
     2d4:	b916      	cbnz	r6, 2dc <__data_size+0x15c>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <__data_size+0x54>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <__data_size+0x156>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <__data_size+0x18c>
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <__data_size+0x170>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <__data_size+0x182>
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
     2fc:	b91e      	cbnz	r6, 306 <__data_size+0x186>
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <__data_size+0x54>
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <__data_size+0x17c>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <__data_size+0x17e>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
     316:	431c      	orrs	r4, r3
     318:	fa2e f10c 	lsr.w	r1, lr, ip
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
     334:	fb09 3018 	mls	r0, r9, r8, r3
     338:	0c0b      	lsrs	r3, r1, #16
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <__data_size+0x24c>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     350:	d204      	bcs.n	35c <__data_size+0x1dc>
     352:	459a      	cmp	sl, r3
     354:	d902      	bls.n	35c <__data_size+0x1dc>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <__data_size+0x250>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     37c:	d204      	bcs.n	388 <__data_size+0x208>
     37e:	458e      	cmp	lr, r1
     380:	d902      	bls.n	388 <__data_size+0x208>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
     39a:	d302      	bcc.n	3a2 <__data_size+0x222>
     39c:	d106      	bne.n	3ac <__data_size+0x22c>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <__data_size+0x22c>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <__data_size+0x17e>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <__data_size+0x17e>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <__data_size+0x1dc>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <__data_size+0x208>

000003d4 <thread_print_code>:
    timing_stop();
}

/* Thread print code implementation */
void thread_print_code(void *argA , void *argB, void *argC)
{
     3d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Local vars */
    int64_t fin_time=0, release_time=0;     /* Timing variables to control task periodicity */    
        
    /* Task init code */
    printk("Thread led init (periodic)\n");
     3d8:	4828      	ldr	r0, [pc, #160]	; (47c <CONFIG_FLASH_SIZE+0x7c>)

    /* Thread loop */
    while(1) {    
        printk("\033[2J\033[H");  
       /* Print menu */       
	    printk("#######     Menu     #######\n\n\r    Button state (0-ON  1-OFF):\n\r   Button 1 : %d   Button 2 : %d   Button 3 : %d   Button 4 : %d\n\n\r",But0,But1,But2,But3);
     3da:	4f29      	ldr	r7, [pc, #164]	; (480 <CONFIG_FLASH_SIZE+0x80>)
     3dc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 484 <CONFIG_FLASH_SIZE+0x84>
    printk("Thread led init (periodic)\n");
     3e0:	f005 fc4f 	bl	5c82 <printk>
    release_time = k_uptime_get() + thread_print_period;
     3e4:	f005 fbf8 	bl	5bd8 <k_uptime_get>
     3e8:	f510 7496 	adds.w	r4, r0, #300	; 0x12c
     3ec:	f141 0500 	adc.w	r5, r1, #0
        printk("\033[2J\033[H");  
     3f0:	4825      	ldr	r0, [pc, #148]	; (488 <CONFIG_FLASH_SIZE+0x88>)
     3f2:	f8df a098 	ldr.w	sl, [pc, #152]	; 48c <CONFIG_FLASH_SIZE+0x8c>
	    printk("    Led state(1-ON  0-OFF):\n\r   Led 1 : %d   Led 2 : %d   Led 3 : %d   Led 4 : %d\n\n\r",led0stat,led1stat,led2stat,led3stat);
		printk("    Temperature : %d C\n\n\r",temp);
        printk("\n\n\r    Command : ");
        for(int i = 0; i < cmdStringLen; i++) {
     3f6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 490 <CONFIG_FLASH_SIZE+0x90>
            printk("%c",cmdString[i]);
     3fa:	f8df b098 	ldr.w	fp, [pc, #152]	; 494 <CONFIG_FLASH_SIZE+0x94>
        printk("\033[2J\033[H");  
     3fe:	f005 fc40 	bl	5c82 <printk>
	    printk("#######     Menu     #######\n\n\r    Button state (0-ON  1-OFF):\n\r   Button 1 : %d   Button 2 : %d   Button 3 : %d   Button 4 : %d\n\n\r",But0,But1,But2,But3);
     402:	4b25      	ldr	r3, [pc, #148]	; (498 <CONFIG_FLASH_SIZE+0x98>)
     404:	4825      	ldr	r0, [pc, #148]	; (49c <CONFIG_FLASH_SIZE+0x9c>)
     406:	6839      	ldr	r1, [r7, #0]
     408:	f8d8 2000 	ldr.w	r2, [r8]
     40c:	681b      	ldr	r3, [r3, #0]
     40e:	6800      	ldr	r0, [r0, #0]
     410:	9000      	str	r0, [sp, #0]
     412:	4823      	ldr	r0, [pc, #140]	; (4a0 <CONFIG_FLASH_SIZE+0xa0>)
     414:	f005 fc35 	bl	5c82 <printk>
	    printk("    Led state(1-ON  0-OFF):\n\r   Led 1 : %d   Led 2 : %d   Led 3 : %d   Led 4 : %d\n\n\r",led0stat,led1stat,led2stat,led3stat);
     418:	4b22      	ldr	r3, [pc, #136]	; (4a4 <CONFIG_FLASH_SIZE+0xa4>)
     41a:	4823      	ldr	r0, [pc, #140]	; (4a8 <CONFIG_FLASH_SIZE+0xa8>)
     41c:	6819      	ldr	r1, [r3, #0]
     41e:	4b23      	ldr	r3, [pc, #140]	; (4ac <CONFIG_FLASH_SIZE+0xac>)
     420:	681a      	ldr	r2, [r3, #0]
     422:	4b23      	ldr	r3, [pc, #140]	; (4b0 <CONFIG_FLASH_SIZE+0xb0>)
     424:	681b      	ldr	r3, [r3, #0]
     426:	6800      	ldr	r0, [r0, #0]
     428:	9000      	str	r0, [sp, #0]
     42a:	4822      	ldr	r0, [pc, #136]	; (4b4 <CONFIG_FLASH_SIZE+0xb4>)
     42c:	f005 fc29 	bl	5c82 <printk>
		printk("    Temperature : %d C\n\n\r",temp);
     430:	4b21      	ldr	r3, [pc, #132]	; (4b8 <CONFIG_FLASH_SIZE+0xb8>)
     432:	4822      	ldr	r0, [pc, #136]	; (4bc <CONFIG_FLASH_SIZE+0xbc>)
     434:	f993 1000 	ldrsb.w	r1, [r3]
     438:	f005 fc23 	bl	5c82 <printk>
        printk("\n\n\r    Command : ");
     43c:	4820      	ldr	r0, [pc, #128]	; (4c0 <CONFIG_FLASH_SIZE+0xc0>)
     43e:	f005 fc20 	bl	5c82 <printk>
        for(int i = 0; i < cmdStringLen; i++) {
     442:	2600      	movs	r6, #0
     444:	f899 3000 	ldrb.w	r3, [r9]
     448:	42b3      	cmp	r3, r6
     44a:	dc0f      	bgt.n	46c <CONFIG_FLASH_SIZE+0x6c>
        }
        printk("\n\n\r");
     44c:	481d      	ldr	r0, [pc, #116]	; (4c4 <CONFIG_FLASH_SIZE+0xc4>)
     44e:	f005 fc18 	bl	5c82 <printk>



        /* Wait for next release instant */ 
        fin_time = k_uptime_get();
     452:	f005 fbc1 	bl	5bd8 <k_uptime_get>
        if( fin_time < release_time) {
     456:	42a0      	cmp	r0, r4
     458:	41a9      	sbcs	r1, r5
     45a:	dac9      	bge.n	3f0 <thread_print_code+0x1c>
            k_msleep(release_time - fin_time);
     45c:	1a20      	subs	r0, r4, r0
     45e:	f005 fbdd 	bl	5c1c <k_msleep.isra.0>
            release_time += thread_print_period;
     462:	f514 7496 	adds.w	r4, r4, #300	; 0x12c
     466:	f145 0500 	adc.w	r5, r5, #0
     46a:	e7c1      	b.n	3f0 <thread_print_code+0x1c>
            printk("%c",cmdString[i]);
     46c:	f81a 1b01 	ldrb.w	r1, [sl], #1
     470:	4658      	mov	r0, fp
     472:	f005 fc06 	bl	5c82 <printk>
        for(int i = 0; i < cmdStringLen; i++) {
     476:	3601      	adds	r6, #1
     478:	e7e4      	b.n	444 <CONFIG_FLASH_SIZE+0x44>
     47a:	bf00      	nop
     47c:	000073b4 	.word	0x000073b4
     480:	20000700 	.word	0x20000700
     484:	200006fc 	.word	0x200006fc
     488:	000073d0 	.word	0x000073d0
     48c:	20001005 	.word	0x20001005
     490:	20001004 	.word	0x20001004
     494:	000074dd 	.word	0x000074dd
     498:	200006f8 	.word	0x200006f8
     49c:	200006f4 	.word	0x200006f4
     4a0:	000073d8 	.word	0x000073d8
     4a4:	200006f0 	.word	0x200006f0
     4a8:	200006e4 	.word	0x200006e4
     4ac:	200006ec 	.word	0x200006ec
     4b0:	200006e8 	.word	0x200006e8
     4b4:	0000745c 	.word	0x0000745c
     4b8:	2000101a 	.word	0x2000101a
     4bc:	000074b1 	.word	0x000074b1
     4c0:	000074cb 	.word	0x000074cb
     4c4:	000074c7 	.word	0x000074c7

000004c8 <thread_led_code>:
{
     4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    printk("Thread led init (periodic)\n");
     4cc:	4819      	ldr	r0, [pc, #100]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
    release_time_led = k_uptime_get() + thread_led_period;
     4ce:	4d1a      	ldr	r5, [pc, #104]	; (538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>)
     4d0:	4c1a      	ldr	r4, [pc, #104]	; (53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>)
        gpio_pin_set_dt(&led0_dev,led0stat);
     4d2:	4e1b      	ldr	r6, [pc, #108]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
    printk("Thread led init (periodic)\n");
     4d4:	f005 fbd5 	bl	5c82 <printk>
    release_time_led = k_uptime_get() + thread_led_period;
     4d8:	f005 fb7e 	bl	5bd8 <k_uptime_get>
     4dc:	682b      	ldr	r3, [r5, #0]
     4de:	1818      	adds	r0, r3, r0
     4e0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
     4e4:	e9c4 0100 	strd	r0, r1, [r4]
        gpio_pin_set_dt(&led0_dev,led0stat);
     4e8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
        gpio_pin_set_dt(&led1_dev,led1stat);
     4ec:	4f16      	ldr	r7, [pc, #88]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
        gpio_pin_set_dt(&led0_dev,led0stat);
     4ee:	6831      	ldr	r1, [r6, #0]
     4f0:	4640      	mov	r0, r8
     4f2:	f005 fb7f 	bl	5bf4 <gpio_pin_set_dt.isra.0>
        gpio_pin_set_dt(&led1_dev,led1stat);
     4f6:	6839      	ldr	r1, [r7, #0]
     4f8:	4814      	ldr	r0, [pc, #80]	; (54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>)
     4fa:	f005 fb7b 	bl	5bf4 <gpio_pin_set_dt.isra.0>
        gpio_pin_set_dt(&led2_dev,led2stat);
     4fe:	4b14      	ldr	r3, [pc, #80]	; (550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>)
     500:	4814      	ldr	r0, [pc, #80]	; (554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>)
     502:	6819      	ldr	r1, [r3, #0]
     504:	f005 fb76 	bl	5bf4 <gpio_pin_set_dt.isra.0>
        gpio_pin_set_dt(&led3_dev,led3stat);
     508:	4b13      	ldr	r3, [pc, #76]	; (558 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x70>)
     50a:	4814      	ldr	r0, [pc, #80]	; (55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>)
     50c:	6819      	ldr	r1, [r3, #0]
     50e:	f005 fb71 	bl	5bf4 <gpio_pin_set_dt.isra.0>
        fin_time = k_uptime_get();
     512:	f005 fb61 	bl	5bd8 <k_uptime_get>
        if( fin_time < release_time_led) {
     516:	e9d4 3200 	ldrd	r3, r2, [r4]
     51a:	4298      	cmp	r0, r3
     51c:	4191      	sbcs	r1, r2
     51e:	dae6      	bge.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
            k_msleep(release_time_led - fin_time);
     520:	1a18      	subs	r0, r3, r0
     522:	f005 fb7b 	bl	5c1c <k_msleep.isra.0>
            release_time_led += thread_led_period;
     526:	e9d4 0100 	ldrd	r0, r1, [r4]
     52a:	682b      	ldr	r3, [r5, #0]
     52c:	1818      	adds	r0, r3, r0
     52e:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
     532:	e7d7      	b.n	4e4 <thread_led_code+0x1c>
     534:	000073b4 	.word	0x000073b4
     538:	20000004 	.word	0x20000004
     53c:	200003e8 	.word	0x200003e8
     540:	200006f0 	.word	0x200006f0
     544:	00007150 	.word	0x00007150
     548:	200006ec 	.word	0x200006ec
     54c:	00007148 	.word	0x00007148
     550:	200006e8 	.word	0x200006e8
     554:	00007140 	.word	0x00007140
     558:	200006e4 	.word	0x200006e4
     55c:	00007138 	.word	0x00007138

00000560 <thread_button_code>:
{
     560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    printk("Thread button init (periodic)\n");
     564:	481d      	ldr	r0, [pc, #116]	; (5dc <thread_button_code+0x7c>)
    release_time_button = k_uptime_get() + thread_button_period;
     566:	4c1e      	ldr	r4, [pc, #120]	; (5e0 <thread_button_code+0x80>)
       temp0 = gpio_pin_get_dt(&but0_dev);
     568:	4d1e      	ldr	r5, [pc, #120]	; (5e4 <thread_button_code+0x84>)
    printk("Thread button init (periodic)\n");
     56a:	f005 fb8a 	bl	5c82 <printk>
    release_time_button = k_uptime_get() + thread_button_period;
     56e:	f005 fb33 	bl	5bd8 <k_uptime_get>
     572:	4b1d      	ldr	r3, [pc, #116]	; (5e8 <thread_button_code+0x88>)
     574:	681b      	ldr	r3, [r3, #0]
     576:	1818      	adds	r0, r3, r0
     578:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
     57c:	e9c4 0100 	strd	r0, r1, [r4]
       temp1 = gpio_pin_get_dt(&but1_dev);
     580:	4f1a      	ldr	r7, [pc, #104]	; (5ec <thread_button_code+0x8c>)
       temp2 = gpio_pin_get_dt(&but2_dev);
     582:	4e1b      	ldr	r6, [pc, #108]	; (5f0 <thread_button_code+0x90>)
       temp0 = gpio_pin_get_dt(&but0_dev);
     584:	4628      	mov	r0, r5
     586:	f005 fb10 	bl	5baa <gpio_pin_get_dt>
     58a:	4682      	mov	sl, r0
       temp1 = gpio_pin_get_dt(&but1_dev);
     58c:	4638      	mov	r0, r7
     58e:	f005 fb0c 	bl	5baa <gpio_pin_get_dt>
     592:	4681      	mov	r9, r0
       temp2 = gpio_pin_get_dt(&but2_dev);
     594:	4630      	mov	r0, r6
     596:	f005 fb08 	bl	5baa <gpio_pin_get_dt>
     59a:	4680      	mov	r8, r0
       temp3 = gpio_pin_get_dt(&but3_dev);
     59c:	4815      	ldr	r0, [pc, #84]	; (5f4 <thread_button_code+0x94>)
     59e:	f005 fb04 	bl	5baa <gpio_pin_get_dt>
    But0 = temp0;
     5a2:	4a15      	ldr	r2, [pc, #84]	; (5f8 <thread_button_code+0x98>)
     5a4:	f8c2 a000 	str.w	sl, [r2]
    But1 = temp1;
     5a8:	4a14      	ldr	r2, [pc, #80]	; (5fc <thread_button_code+0x9c>)
     5aa:	f8c2 9000 	str.w	r9, [r2]
    But2 = temp2;
     5ae:	4a14      	ldr	r2, [pc, #80]	; (600 <thread_button_code+0xa0>)
     5b0:	f8c2 8000 	str.w	r8, [r2]
    But3 = temp3;
     5b4:	4a13      	ldr	r2, [pc, #76]	; (604 <thread_button_code+0xa4>)
     5b6:	6010      	str	r0, [r2, #0]
        fin_time = k_uptime_get();
     5b8:	f005 fb0e 	bl	5bd8 <k_uptime_get>
        if( fin_time < release_time_button) {
     5bc:	e9d4 3200 	ldrd	r3, r2, [r4]
     5c0:	4298      	cmp	r0, r3
     5c2:	4191      	sbcs	r1, r2
     5c4:	dade      	bge.n	584 <thread_button_code+0x24>
            k_msleep(release_time_button - fin_time);
     5c6:	1a18      	subs	r0, r3, r0
     5c8:	f005 fb28 	bl	5c1c <k_msleep.isra.0>
            release_time_button += thread_temperature_period;
     5cc:	4b0e      	ldr	r3, [pc, #56]	; (608 <thread_button_code+0xa8>)
     5ce:	e9d4 0100 	ldrd	r0, r1, [r4]
     5d2:	681b      	ldr	r3, [r3, #0]
     5d4:	1818      	adds	r0, r3, r0
     5d6:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
     5da:	e7cf      	b.n	57c <thread_button_code+0x1c>
     5dc:	000074e0 	.word	0x000074e0
     5e0:	200003f0 	.word	0x200003f0
     5e4:	00007130 	.word	0x00007130
     5e8:	20000008 	.word	0x20000008
     5ec:	00007128 	.word	0x00007128
     5f0:	00007120 	.word	0x00007120
     5f4:	00007118 	.word	0x00007118
     5f8:	20000700 	.word	0x20000700
     5fc:	200006fc 	.word	0x200006fc
     600:	200006f8 	.word	0x200006f8
     604:	200006f4 	.word	0x200006f4
     608:	2000000c 	.word	0x2000000c

0000060c <thread_temperature_code>:
{
     60c:	b5f0      	push	{r4, r5, r6, r7, lr}
    printk("Thread temperature init (periodic)\n");
     60e:	481b      	ldr	r0, [pc, #108]	; (67c <thread_temperature_code+0x70>)
    release_time_temperature = k_uptime_get() + thread_temperature_period;
     610:	4d1b      	ldr	r5, [pc, #108]	; (680 <thread_temperature_code+0x74>)
     612:	4c1c      	ldr	r4, [pc, #112]	; (684 <thread_temperature_code+0x78>)
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
     614:	4e1c      	ldr	r6, [pc, #112]	; (688 <thread_temperature_code+0x7c>)
{
     616:	b085      	sub	sp, #20
    printk("Thread temperature init (periodic)\n");
     618:	f005 fb33 	bl	5c82 <printk>
    release_time_temperature = k_uptime_get() + thread_temperature_period;
     61c:	f005 fadc 	bl	5bd8 <k_uptime_get>
     620:	682b      	ldr	r3, [r5, #0]
     622:	1818      	adds	r0, r3, r0
     624:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     628:	4b18      	ldr	r3, [pc, #96]	; (68c <thread_temperature_code+0x80>)
     62a:	e9c4 0100 	strd	r0, r1, [r4]
     62e:	689f      	ldr	r7, [r3, #8]
	msg.buf = buf;
     630:	9601      	str	r6, [sp, #4]
	msg.len = num_bytes;
     632:	2201      	movs	r2, #1
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
     634:	2303      	movs	r3, #3
	msg.len = num_bytes;
     636:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
     638:	f88d 300c 	strb.w	r3, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     63c:	234d      	movs	r3, #77	; 0x4d
     63e:	4813      	ldr	r0, [pc, #76]	; (68c <thread_temperature_code+0x80>)
     640:	f8d7 c008 	ldr.w	ip, [r7, #8]
     644:	a901      	add	r1, sp, #4
     646:	47e0      	blx	ip
		ret = i2c_read_dt(&dev_i2c, &temp, sizeof(temp));
     648:	4b11      	ldr	r3, [pc, #68]	; (690 <thread_temperature_code+0x84>)
     64a:	6018      	str	r0, [r3, #0]
		if(ret != 0){
     64c:	b120      	cbz	r0, 658 <thread_temperature_code+0x4c>
			printk("Failed to write/read I2C device address %x at Reg. %x \r\n", dev_i2c.addr,config);
     64e:	4811      	ldr	r0, [pc, #68]	; (694 <thread_temperature_code+0x88>)
     650:	2200      	movs	r2, #0
     652:	214d      	movs	r1, #77	; 0x4d
     654:	f005 fb15 	bl	5c82 <printk>
        fin_time = k_uptime_get();
     658:	f005 fabe 	bl	5bd8 <k_uptime_get>
        if( fin_time < release_time_temperature) {
     65c:	e9d4 3200 	ldrd	r3, r2, [r4]
     660:	4298      	cmp	r0, r3
     662:	4191      	sbcs	r1, r2
     664:	dae4      	bge.n	630 <thread_temperature_code+0x24>
            k_msleep(release_time_temperature - fin_time);
     666:	1a18      	subs	r0, r3, r0
     668:	f005 fad8 	bl	5c1c <k_msleep.isra.0>
            release_time_temperature += thread_temperature_period;
     66c:	e9d4 0100 	ldrd	r0, r1, [r4]
     670:	682b      	ldr	r3, [r5, #0]
     672:	1818      	adds	r0, r3, r0
     674:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
     678:	e7d6      	b.n	628 <thread_temperature_code+0x1c>
     67a:	bf00      	nop
     67c:	000074ff 	.word	0x000074ff
     680:	2000000c 	.word	0x2000000c
     684:	200003f8 	.word	0x200003f8
     688:	2000101a 	.word	0x2000101a
     68c:	00006f54 	.word	0x00006f54
     690:	200006e0 	.word	0x200006e0
     694:	00007523 	.word	0x00007523

00000698 <cmdProcessor>:
int cmdProcessor(void) {
     698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for(i=0; i < cmdStringLen; i++) {
     69c:	4b61      	ldr	r3, [pc, #388]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     69e:	4a62      	ldr	r2, [pc, #392]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     6a0:	4c62      	ldr	r4, [pc, #392]	; (82c <CONFIG_ISR_STACK_SIZE+0x2c>)
     6a2:	7818      	ldrb	r0, [r3, #0]
     6a4:	4b62      	ldr	r3, [pc, #392]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     6a6:	6817      	ldr	r7, [r2, #0]
     6a8:	6826      	ldr	r6, [r4, #0]
     6aa:	2500      	movs	r5, #0
     6ac:	4698      	mov	r8, r3
     6ae:	46ae      	mov	lr, r5
     6b0:	46ac      	mov	ip, r5
     6b2:	4619      	mov	r1, r3
     6b4:	4560      	cmp	r0, ip
     6b6:	dc11      	bgt.n	6dc <cmdProcessor+0x44>
     6b8:	b105      	cbz	r5, 6bc <cmdProcessor+0x24>
     6ba:	6017      	str	r7, [r2, #0]
     6bc:	f1be 0f00 	cmp.w	lr, #0
     6c0:	d000      	beq.n	6c4 <cmdProcessor+0x2c>
     6c2:	6026      	str	r6, [r4, #0]
    if((SOF_C != 1) || (EOF_C != 1)) {
     6c4:	6825      	ldr	r5, [r4, #0]
     6c6:	2d01      	cmp	r5, #1
     6c8:	d102      	bne.n	6d0 <cmdProcessor+0x38>
     6ca:	6815      	ldr	r5, [r2, #0]
     6cc:	2d01      	cmp	r5, #1
     6ce:	d016      	beq.n	6fe <cmdProcessor+0x66>
		SOF_C = 0;
     6d0:	2300      	movs	r3, #0
     6d2:	6023      	str	r3, [r4, #0]
		EOF_C = 0;
     6d4:	6013      	str	r3, [r2, #0]
	    return WRONG_STR_FORMAT;
     6d6:	f06f 0003 	mvn.w	r0, #3
     6da:	e035      	b.n	748 <cmdProcessor+0xb0>
        if(cmdString[i] == '#') {
     6dc:	f818 9b01 	ldrb.w	r9, [r8], #1
     6e0:	f1b9 0f23 	cmp.w	r9, #35	; 0x23
     6e4:	d105      	bne.n	6f2 <cmdProcessor+0x5a>
			SOF_C ++;
     6e6:	3601      	adds	r6, #1
     6e8:	f04f 0e01 	mov.w	lr, #1
    for(i=0; i < cmdStringLen; i++) {
     6ec:	f10c 0c01 	add.w	ip, ip, #1
     6f0:	e7e0      	b.n	6b4 <cmdProcessor+0x1c>
		else if(cmdString[i] == '!') {
     6f2:	f1b9 0f21 	cmp.w	r9, #33	; 0x21
			EOF_C ++;
     6f6:	bf04      	itt	eq
     6f8:	3701      	addeq	r7, #1
     6fa:	2501      	moveq	r5, #1
     6fc:	e7f6      	b.n	6ec <cmdProcessor+0x54>
	if(cmdStringLen == 0) {
     6fe:	2800      	cmp	r0, #0
     700:	f000 808a 	beq.w	818 <CONFIG_ISR_STACK_SIZE+0x18>
	for(i=0; i < cmdStringLen; i++) {
     704:	2200      	movs	r2, #0
		if(cmdString[i] == SOF_SYM) {
     706:	f813 4b01 	ldrb.w	r4, [r3], #1
     70a:	2c23      	cmp	r4, #35	; 0x23
     70c:	d003      	beq.n	716 <cmdProcessor+0x7e>
	for(i=0; i < cmdStringLen; i++) {
     70e:	3201      	adds	r2, #1
     710:	4290      	cmp	r0, r2
     712:	dcf8      	bgt.n	706 <cmdProcessor+0x6e>
     714:	e7df      	b.n	6d6 <cmdProcessor+0x3e>
	if(i < cmdStringLen) {
     716:	4290      	cmp	r0, r2
     718:	dddd      	ble.n	6d6 <cmdProcessor+0x3e>
		if(cmdString[i+1] == 'L') { /* L command detected */
     71a:	188b      	adds	r3, r1, r2
     71c:	785c      	ldrb	r4, [r3, #1]
     71e:	2c4c      	cmp	r4, #76	; 0x4c
     720:	d120      	bne.n	764 <cmdProcessor+0xcc>
            if((cmdString[i+4] != EOF_SYM) || ((i+4) > cmdStringLen)) { /*Detect EOF symbol*/
     722:	791c      	ldrb	r4, [r3, #4]
     724:	2c21      	cmp	r4, #33	; 0x21
     726:	d1d6      	bne.n	6d6 <cmdProcessor+0x3e>
     728:	3203      	adds	r2, #3
     72a:	4290      	cmp	r0, r2
     72c:	ddd3      	ble.n	6d6 <cmdProcessor+0x3e>
            switch(cmdString[i+2]) {
     72e:	789b      	ldrb	r3, [r3, #2]
     730:	3b31      	subs	r3, #49	; 0x31
     732:	2b03      	cmp	r3, #3
     734:	d8cf      	bhi.n	6d6 <cmdProcessor+0x3e>
     736:	e8df f003 	tbb	[pc, r3]
     73a:	0902      	.short	0x0902
     73c:	110d      	.short	0x110d
                    led0stat = (cmdString[i+3]-'0');
     73e:	5c8b      	ldrb	r3, [r1, r2]
     740:	4a3c      	ldr	r2, [pc, #240]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     742:	3b30      	subs	r3, #48	; 0x30
                    led3stat = (cmdString[i+3]-'0');
     744:	6013      	str	r3, [r2, #0]
            return EXIT_SUCCESS;
     746:	2000      	movs	r0, #0
}
     748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    led1stat = (cmdString[i+3]-'0');
     74c:	5c8b      	ldrb	r3, [r1, r2]
     74e:	4a3a      	ldr	r2, [pc, #232]	; (838 <CONFIG_ISR_STACK_SIZE+0x38>)
     750:	3b30      	subs	r3, #48	; 0x30
     752:	e7f7      	b.n	744 <cmdProcessor+0xac>
                    led2stat = (cmdString[i+3]-'0');
     754:	5c8b      	ldrb	r3, [r1, r2]
     756:	4a39      	ldr	r2, [pc, #228]	; (83c <CONFIG_ISR_STACK_SIZE+0x3c>)
     758:	3b30      	subs	r3, #48	; 0x30
     75a:	e7f3      	b.n	744 <cmdProcessor+0xac>
                    led3stat = (cmdString[i+3]-'0');
     75c:	5c8b      	ldrb	r3, [r1, r2]
     75e:	4a38      	ldr	r2, [pc, #224]	; (840 <CONFIG_ISR_STACK_SIZE+0x40>)
     760:	3b30      	subs	r3, #48	; 0x30
     762:	e7ef      	b.n	744 <cmdProcessor+0xac>
        }else if(cmdString[i+1] == 'T') { /* T command detected */
     764:	2c54      	cmp	r4, #84	; 0x54
     766:	d15a      	bne.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
			if(cmdString[i+7] != EOF_SYM)  {/*Detect EOF symbol*/
     768:	79da      	ldrb	r2, [r3, #7]
     76a:	2a21      	cmp	r2, #33	; 0x21
     76c:	d1b3      	bne.n	6d6 <cmdProcessor+0x3e>
            switch(cmdString[i+2]) {
     76e:	789a      	ldrb	r2, [r3, #2]
     770:	2a32      	cmp	r2, #50	; 0x32
     772:	d021      	beq.n	7b8 <cmdProcessor+0x120>
     774:	2a33      	cmp	r2, #51	; 0x33
     776:	d037      	beq.n	7e8 <cmdProcessor+0x150>
     778:	2a31      	cmp	r2, #49	; 0x31
     77a:	d1ac      	bne.n	6d6 <cmdProcessor+0x3e>
                    thread_temperature_period = (cmdString[i+3] - '0') * 1000 + (cmdString[i+4] - '0') * 100 + (cmdString[i+5] - '0') * 10 + (cmdString[i+6] - '0') * 1;
     77c:	791a      	ldrb	r2, [r3, #4]
     77e:	78d9      	ldrb	r1, [r3, #3]
     780:	4c30      	ldr	r4, [pc, #192]	; (844 <CONFIG_ISR_STACK_SIZE+0x44>)
     782:	2064      	movs	r0, #100	; 0x64
     784:	3a30      	subs	r2, #48	; 0x30
     786:	3930      	subs	r1, #48	; 0x30
     788:	4342      	muls	r2, r0
     78a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     78e:	fb00 2201 	mla	r2, r0, r1, r2
     792:	7959      	ldrb	r1, [r3, #5]
     794:	799b      	ldrb	r3, [r3, #6]
     796:	3930      	subs	r1, #48	; 0x30
     798:	200a      	movs	r0, #10
     79a:	fb00 2201 	mla	r2, r0, r1, r2
     79e:	3b30      	subs	r3, #48	; 0x30
     7a0:	4413      	add	r3, r2
     7a2:	6023      	str	r3, [r4, #0]
                    release_time_temperature = k_uptime_get() + thread_temperature_period;
     7a4:	f005 fa18 	bl	5bd8 <k_uptime_get>
     7a8:	4a27      	ldr	r2, [pc, #156]	; (848 <CONFIG_ISR_STACK_SIZE+0x48>)
                    release_time_button = k_uptime_get() + thread_button_period;
     7aa:	6823      	ldr	r3, [r4, #0]
     7ac:	1818      	adds	r0, r3, r0
     7ae:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
     7b2:	e9c2 0100 	strd	r0, r1, [r2]
                break;
     7b6:	e7c6      	b.n	746 <cmdProcessor+0xae>
                    thread_button_period = (cmdString[i+3] - '0') * 1000 + (cmdString[i+4] - '0') * 100 + (cmdString[i+5] - '0') * 10 + (cmdString[i+6] - '0') * 1;
     7b8:	791a      	ldrb	r2, [r3, #4]
     7ba:	78d9      	ldrb	r1, [r3, #3]
     7bc:	4c23      	ldr	r4, [pc, #140]	; (84c <CONFIG_ISR_STACK_SIZE+0x4c>)
     7be:	2064      	movs	r0, #100	; 0x64
     7c0:	3a30      	subs	r2, #48	; 0x30
     7c2:	3930      	subs	r1, #48	; 0x30
     7c4:	4342      	muls	r2, r0
     7c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     7ca:	fb00 2201 	mla	r2, r0, r1, r2
     7ce:	7959      	ldrb	r1, [r3, #5]
     7d0:	799b      	ldrb	r3, [r3, #6]
     7d2:	3930      	subs	r1, #48	; 0x30
     7d4:	200a      	movs	r0, #10
     7d6:	fb00 2201 	mla	r2, r0, r1, r2
     7da:	3b30      	subs	r3, #48	; 0x30
     7dc:	4413      	add	r3, r2
     7de:	6023      	str	r3, [r4, #0]
                    release_time_button = k_uptime_get() + thread_button_period;
     7e0:	f005 f9fa 	bl	5bd8 <k_uptime_get>
     7e4:	4a1a      	ldr	r2, [pc, #104]	; (850 <CONFIG_ISR_STACK_SIZE+0x50>)
     7e6:	e7e0      	b.n	7aa <cmdProcessor+0x112>
                    thread_led_period = (cmdString[i+3] - '0') * 1000 + (cmdString[i+4] - '0') * 100 + (cmdString[i+5] - '0') * 10 + (cmdString[i+6] - '0') * 1;
     7e8:	791a      	ldrb	r2, [r3, #4]
     7ea:	78d9      	ldrb	r1, [r3, #3]
     7ec:	4c19      	ldr	r4, [pc, #100]	; (854 <CONFIG_ISR_STACK_SIZE+0x54>)
     7ee:	2064      	movs	r0, #100	; 0x64
     7f0:	3a30      	subs	r2, #48	; 0x30
     7f2:	3930      	subs	r1, #48	; 0x30
     7f4:	4342      	muls	r2, r0
     7f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     7fa:	fb00 2201 	mla	r2, r0, r1, r2
     7fe:	7959      	ldrb	r1, [r3, #5]
     800:	799b      	ldrb	r3, [r3, #6]
     802:	3930      	subs	r1, #48	; 0x30
     804:	200a      	movs	r0, #10
     806:	fb00 2201 	mla	r2, r0, r1, r2
     80a:	3b30      	subs	r3, #48	; 0x30
     80c:	4413      	add	r3, r2
     80e:	6023      	str	r3, [r4, #0]
                    release_time_led = k_uptime_get() + thread_led_period;
     810:	f005 f9e2 	bl	5bd8 <k_uptime_get>
     814:	4a10      	ldr	r2, [pc, #64]	; (858 <CONFIG_ISR_STACK_SIZE+0x58>)
     816:	e7c8      	b.n	7aa <cmdProcessor+0x112>
		return EMPTY_STRING;
     818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     81c:	e794      	b.n	748 <cmdProcessor+0xb0>
			return CMD_NOT_FOUND;
     81e:	f06f 0001 	mvn.w	r0, #1
	return WRONG_STR_FORMAT;
     822:	e791      	b.n	748 <cmdProcessor+0xb0>
     824:	20001004 	.word	0x20001004
     828:	200006d8 	.word	0x200006d8
     82c:	200006dc 	.word	0x200006dc
     830:	20001005 	.word	0x20001005
     834:	200006f0 	.word	0x200006f0
     838:	200006ec 	.word	0x200006ec
     83c:	200006e8 	.word	0x200006e8
     840:	200006e4 	.word	0x200006e4
     844:	2000000c 	.word	0x2000000c
     848:	200003f8 	.word	0x200003f8
     84c:	20000008 	.word	0x20000008
     850:	200003f0 	.word	0x200003f0
     854:	20000004 	.word	0x20000004
     858:	200003e8 	.word	0x200003e8

0000085c <newCmdChar>:
	if (cmdStringLen < MAX_CMDSTRING_SIZE) {
     85c:	4a06      	ldr	r2, [pc, #24]	; (878 <newCmdChar+0x1c>)
     85e:	7813      	ldrb	r3, [r2, #0]
     860:	2b09      	cmp	r3, #9
		cmdString[cmdStringLen] = newChar;
     862:	bf9f      	itttt	ls
     864:	4905      	ldrls	r1, [pc, #20]	; (87c <newCmdChar+0x20>)
     866:	54c8      	strbls	r0, [r1, r3]
		cmdStringLen ++;
     868:	3301      	addls	r3, #1
		return EXIT_SUCCESS;
     86a:	2000      	movls	r0, #0
		cmdStringLen ++;
     86c:	bf94      	ite	ls
     86e:	7013      	strbls	r3, [r2, #0]
	return STRING_FULL;
     870:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
     874:	4770      	bx	lr
     876:	bf00      	nop
     878:	20001004 	.word	0x20001004
     87c:	20001005 	.word	0x20001005

00000880 <resetCmdString>:
	cmdStringLen = 0;
     880:	4a03      	ldr	r2, [pc, #12]	; (890 <resetCmdString+0x10>)
     882:	2300      	movs	r3, #0
     884:	7013      	strb	r3, [r2, #0]
	SOF_C = 0;
     886:	4a03      	ldr	r2, [pc, #12]	; (894 <resetCmdString+0x14>)
     888:	6013      	str	r3, [r2, #0]
	EOF_C = 0;		
     88a:	4a03      	ldr	r2, [pc, #12]	; (898 <resetCmdString+0x18>)
     88c:	6013      	str	r3, [r2, #0]
}
     88e:	4770      	bx	lr
     890:	20001004 	.word	0x20001004
     894:	200006dc 	.word	0x200006dc
     898:	200006d8 	.word	0x200006d8

0000089c <main>:
void main(void) {
     89c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!device_is_ready(led0_dev.port))  
     89e:	4890      	ldr	r0, [pc, #576]	; (ae0 <main+0x244>)
void main(void) {
     8a0:	b08d      	sub	sp, #52	; 0x34
	if (!device_is_ready(led0_dev.port))  
     8a2:	f005 f997 	bl	5bd4 <device_is_ready>
     8a6:	b928      	cbnz	r0, 8b4 <main+0x18>
        printk("Fatal error: led1 device not ready!");
     8a8:	488e      	ldr	r0, [pc, #568]	; (ae4 <main+0x248>)
}
     8aa:	b00d      	add	sp, #52	; 0x34
     8ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        printk("Fatal error: led2 device not ready!");
     8b0:	f005 b9e7 	b.w	5c82 <printk>
    if (!device_is_ready(led1_dev.port))  
     8b4:	488a      	ldr	r0, [pc, #552]	; (ae0 <main+0x244>)
     8b6:	f005 f98d 	bl	5bd4 <device_is_ready>
     8ba:	b908      	cbnz	r0, 8c0 <main+0x24>
        printk("Fatal error: led2 device not ready!");
     8bc:	488a      	ldr	r0, [pc, #552]	; (ae8 <main+0x24c>)
     8be:	e7f4      	b.n	8aa <main+0xe>
    if (!device_is_ready(led2_dev.port))  
     8c0:	4887      	ldr	r0, [pc, #540]	; (ae0 <main+0x244>)
     8c2:	f005 f987 	bl	5bd4 <device_is_ready>
     8c6:	b908      	cbnz	r0, 8cc <main+0x30>
        printk("Fatal error: led3 device not ready!");
     8c8:	4888      	ldr	r0, [pc, #544]	; (aec <main+0x250>)
     8ca:	e7ee      	b.n	8aa <main+0xe>
    if (!device_is_ready(led3_dev.port))  
     8cc:	4884      	ldr	r0, [pc, #528]	; (ae0 <main+0x244>)
     8ce:	f005 f981 	bl	5bd4 <device_is_ready>
     8d2:	b908      	cbnz	r0, 8d8 <main+0x3c>
        printk("Fatal error: led4 device not ready!");
     8d4:	4886      	ldr	r0, [pc, #536]	; (af0 <main+0x254>)
     8d6:	e7e8      	b.n	8aa <main+0xe>
    if (!device_is_ready(but0_dev.port))  
     8d8:	4881      	ldr	r0, [pc, #516]	; (ae0 <main+0x244>)
     8da:	f005 f97b 	bl	5bd4 <device_is_ready>
     8de:	b908      	cbnz	r0, 8e4 <main+0x48>
        printk("Fatal error: but0 device not ready!");
     8e0:	4884      	ldr	r0, [pc, #528]	; (af4 <main+0x258>)
     8e2:	e7e2      	b.n	8aa <main+0xe>
    if (!device_is_ready(but1_dev.port))  
     8e4:	487e      	ldr	r0, [pc, #504]	; (ae0 <main+0x244>)
     8e6:	f005 f975 	bl	5bd4 <device_is_ready>
     8ea:	b908      	cbnz	r0, 8f0 <main+0x54>
        printk("Fatal error: but1 device not ready!");
     8ec:	4882      	ldr	r0, [pc, #520]	; (af8 <main+0x25c>)
     8ee:	e7dc      	b.n	8aa <main+0xe>
    if (!device_is_ready(but2_dev.port))  
     8f0:	487b      	ldr	r0, [pc, #492]	; (ae0 <main+0x244>)
     8f2:	f005 f96f 	bl	5bd4 <device_is_ready>
     8f6:	b908      	cbnz	r0, 8fc <main+0x60>
        printk("Fatal error: but2 device not ready!");
     8f8:	4880      	ldr	r0, [pc, #512]	; (afc <main+0x260>)
     8fa:	e7d6      	b.n	8aa <main+0xe>
    if (!device_is_ready(but3_dev.port))  
     8fc:	4878      	ldr	r0, [pc, #480]	; (ae0 <main+0x244>)
     8fe:	f005 f969 	bl	5bd4 <device_is_ready>
     902:	b908      	cbnz	r0, 908 <main+0x6c>
        printk("Fatal error: but3 device not ready!");
     904:	487e      	ldr	r0, [pc, #504]	; (b00 <main+0x264>)
     906:	e7d0      	b.n	8aa <main+0xe>
    if (!device_is_ready(uart)) {
     908:	4d7e      	ldr	r5, [pc, #504]	; (b04 <main+0x268>)
     90a:	6828      	ldr	r0, [r5, #0]
     90c:	f005 f962 	bl	5bd4 <device_is_ready>
     910:	b908      	cbnz	r0, 916 <main+0x7a>
        printk("UART device not ready\r\n");
     912:	487d      	ldr	r0, [pc, #500]	; (b08 <main+0x26c>)
     914:	e7c9      	b.n	8aa <main+0xe>
    if (!device_is_ready(dev_i2c.bus)) {
     916:	487d      	ldr	r0, [pc, #500]	; (b0c <main+0x270>)
     918:	f005 f95c 	bl	5bd4 <device_is_ready>
     91c:	b938      	cbnz	r0, 92e <main+0x92>
        printk("I2C bus %s is not ready!\n\r",dev_i2c.bus->name);
     91e:	4b7b      	ldr	r3, [pc, #492]	; (b0c <main+0x270>)
     920:	487b      	ldr	r0, [pc, #492]	; (b10 <main+0x274>)
     922:	6819      	ldr	r1, [r3, #0]
}
     924:	b00d      	add	sp, #52	; 0x34
     926:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        printk("Error %d: Failed to configure BUT 3 \n\r", ret);
     92a:	f005 b9aa 	b.w	5c82 <printk>
    ret = gpio_pin_configure_dt(&led0_dev, led0_dev.dt_flags | GPIO_OUTPUT_ACTIVE);
     92e:	4979      	ldr	r1, [pc, #484]	; (b14 <main+0x278>)
     930:	4879      	ldr	r0, [pc, #484]	; (b18 <main+0x27c>)
     932:	4c7a      	ldr	r4, [pc, #488]	; (b1c <main+0x280>)
     934:	f005 f91a 	bl	5b6c <gpio_pin_configure_dt>
    if (ret < 0) {
     938:	2800      	cmp	r0, #0
    ret = gpio_pin_configure_dt(&led0_dev, led0_dev.dt_flags | GPIO_OUTPUT_ACTIVE);
     93a:	4601      	mov	r1, r0
     93c:	6020      	str	r0, [r4, #0]
    if (ret < 0) {
     93e:	da01      	bge.n	944 <main+0xa8>
        printk("Error %d: Failed to configure LED 0 \n\r", ret);
     940:	4877      	ldr	r0, [pc, #476]	; (b20 <main+0x284>)
     942:	e7ef      	b.n	924 <main+0x88>
	ret = gpio_pin_configure_dt(&led1_dev, led1_dev.dt_flags | GPIO_OUTPUT_ACTIVE);
     944:	4973      	ldr	r1, [pc, #460]	; (b14 <main+0x278>)
     946:	4877      	ldr	r0, [pc, #476]	; (b24 <main+0x288>)
     948:	f005 f910 	bl	5b6c <gpio_pin_configure_dt>
    if (ret < 0) {
     94c:	2800      	cmp	r0, #0
	ret = gpio_pin_configure_dt(&led1_dev, led1_dev.dt_flags | GPIO_OUTPUT_ACTIVE);
     94e:	4601      	mov	r1, r0
     950:	6020      	str	r0, [r4, #0]
    if (ret < 0) {
     952:	da01      	bge.n	958 <main+0xbc>
        printk("Error %d: Failed to configure LED 1 \n\r", ret);
     954:	4874      	ldr	r0, [pc, #464]	; (b28 <main+0x28c>)
     956:	e7e5      	b.n	924 <main+0x88>
	ret = gpio_pin_configure_dt(&led2_dev, led2_dev.dt_flags | GPIO_OUTPUT_ACTIVE);
     958:	496e      	ldr	r1, [pc, #440]	; (b14 <main+0x278>)
     95a:	4874      	ldr	r0, [pc, #464]	; (b2c <main+0x290>)
     95c:	f005 f906 	bl	5b6c <gpio_pin_configure_dt>
    if (ret < 0) {
     960:	2800      	cmp	r0, #0
	ret = gpio_pin_configure_dt(&led2_dev, led2_dev.dt_flags | GPIO_OUTPUT_ACTIVE);
     962:	4601      	mov	r1, r0
     964:	6020      	str	r0, [r4, #0]
    if (ret < 0) {
     966:	da01      	bge.n	96c <main+0xd0>
        printk("Error %d: Failed to configure LED 2 \n\r", ret);
     968:	4871      	ldr	r0, [pc, #452]	; (b30 <main+0x294>)
     96a:	e7db      	b.n	924 <main+0x88>
	ret = gpio_pin_configure_dt(&led3_dev, led3_dev.dt_flags | GPIO_OUTPUT_ACTIVE);
     96c:	4969      	ldr	r1, [pc, #420]	; (b14 <main+0x278>)
     96e:	4871      	ldr	r0, [pc, #452]	; (b34 <main+0x298>)
     970:	f005 f8fc 	bl	5b6c <gpio_pin_configure_dt>
    if (ret < 0) {
     974:	2800      	cmp	r0, #0
	ret = gpio_pin_configure_dt(&led3_dev, led3_dev.dt_flags | GPIO_OUTPUT_ACTIVE);
     976:	4601      	mov	r1, r0
     978:	6020      	str	r0, [r4, #0]
    if (ret < 0) {
     97a:	da01      	bge.n	980 <main+0xe4>
        printk("Error %d: Failed to configure LED 3 \n\r", ret);
     97c:	486e      	ldr	r0, [pc, #440]	; (b38 <main+0x29c>)
     97e:	e7d1      	b.n	924 <main+0x88>
    ret = gpio_pin_configure_dt(&but0_dev, GPIO_INPUT | GPIO_PULL_UP);
     980:	496e      	ldr	r1, [pc, #440]	; (b3c <main+0x2a0>)
     982:	486f      	ldr	r0, [pc, #444]	; (b40 <main+0x2a4>)
     984:	f005 f8f2 	bl	5b6c <gpio_pin_configure_dt>
    if (ret < 0) {
     988:	2800      	cmp	r0, #0
    ret = gpio_pin_configure_dt(&but0_dev, GPIO_INPUT | GPIO_PULL_UP);
     98a:	4601      	mov	r1, r0
     98c:	6020      	str	r0, [r4, #0]
    if (ret < 0) {
     98e:	da01      	bge.n	994 <main+0xf8>
        printk("Error %d: Failed to configure BUT 0 \n\r", ret);
     990:	486c      	ldr	r0, [pc, #432]	; (b44 <main+0x2a8>)
     992:	e7c7      	b.n	924 <main+0x88>
    ret = gpio_pin_configure_dt(&but1_dev, GPIO_INPUT | GPIO_PULL_UP);
     994:	4969      	ldr	r1, [pc, #420]	; (b3c <main+0x2a0>)
     996:	486c      	ldr	r0, [pc, #432]	; (b48 <main+0x2ac>)
     998:	f005 f8e8 	bl	5b6c <gpio_pin_configure_dt>
    if (ret < 0) {
     99c:	2800      	cmp	r0, #0
    ret = gpio_pin_configure_dt(&but1_dev, GPIO_INPUT | GPIO_PULL_UP);
     99e:	4601      	mov	r1, r0
     9a0:	6020      	str	r0, [r4, #0]
    if (ret < 0) {
     9a2:	da01      	bge.n	9a8 <main+0x10c>
        printk("Error %d: Failed to configure BUT 1 \n\r", ret);
     9a4:	4869      	ldr	r0, [pc, #420]	; (b4c <main+0x2b0>)
     9a6:	e7bd      	b.n	924 <main+0x88>
    ret = gpio_pin_configure_dt(&but2_dev, GPIO_INPUT | GPIO_PULL_UP);
     9a8:	4964      	ldr	r1, [pc, #400]	; (b3c <main+0x2a0>)
     9aa:	4869      	ldr	r0, [pc, #420]	; (b50 <main+0x2b4>)
     9ac:	f005 f8de 	bl	5b6c <gpio_pin_configure_dt>
    if (ret < 0) {
     9b0:	2800      	cmp	r0, #0
    ret = gpio_pin_configure_dt(&but2_dev, GPIO_INPUT | GPIO_PULL_UP);
     9b2:	4601      	mov	r1, r0
     9b4:	6020      	str	r0, [r4, #0]
    if (ret < 0) {
     9b6:	da01      	bge.n	9bc <main+0x120>
        printk("Error %d: Failed to configure BUT 2 \n\r", ret);
     9b8:	4866      	ldr	r0, [pc, #408]	; (b54 <main+0x2b8>)
     9ba:	e7b3      	b.n	924 <main+0x88>
    ret = gpio_pin_configure_dt(&but3_dev, GPIO_INPUT | GPIO_PULL_UP);
     9bc:	495f      	ldr	r1, [pc, #380]	; (b3c <main+0x2a0>)
     9be:	4866      	ldr	r0, [pc, #408]	; (b58 <main+0x2bc>)
     9c0:	f005 f8d4 	bl	5b6c <gpio_pin_configure_dt>
    if (ret < 0) {
     9c4:	2800      	cmp	r0, #0
    ret = gpio_pin_configure_dt(&but3_dev, GPIO_INPUT | GPIO_PULL_UP);
     9c6:	4601      	mov	r1, r0
     9c8:	6020      	str	r0, [r4, #0]
    if (ret < 0) {
     9ca:	da01      	bge.n	9d0 <main+0x134>
        printk("Error %d: Failed to configure BUT 3 \n\r", ret);
     9cc:	4863      	ldr	r0, [pc, #396]	; (b5c <main+0x2c0>)
     9ce:	e7a9      	b.n	924 <main+0x88>
    ret = uart_callback_set(uart, uart_cb, NULL);
     9d0:	6828      	ldr	r0, [r5, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	if (api->callback_set == NULL) {
     9d2:	6883      	ldr	r3, [r0, #8]
     9d4:	681b      	ldr	r3, [r3, #0]
     9d6:	b923      	cbnz	r3, 9e2 <main+0x146>
     9d8:	f06f 0357 	mvn.w	r3, #87	; 0x57
     9dc:	6023      	str	r3, [r4, #0]
}
     9de:	b00d      	add	sp, #52	; 0x34
     9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOSYS;
	}

	return api->callback_set(dev, callback, user_data);
     9e2:	495f      	ldr	r1, [pc, #380]	; (b60 <main+0x2c4>)
     9e4:	2200      	movs	r2, #0
     9e6:	4798      	blx	r3
    ret = uart_callback_set(uart, uart_cb, NULL);
     9e8:	6020      	str	r0, [r4, #0]
    if (ret) {
     9ea:	2800      	cmp	r0, #0
     9ec:	d1f7      	bne.n	9de <main+0x142>
	ret = uart_tx(uart, tx_buf, sizeof(tx_buf), SYS_FOREVER_MS);
     9ee:	6828      	ldr	r0, [r5, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->tx(dev, buf, len, timeout);
     9f0:	6883      	ldr	r3, [r0, #8]
     9f2:	495c      	ldr	r1, [pc, #368]	; (b64 <main+0x2c8>)
     9f4:	685e      	ldr	r6, [r3, #4]
     9f6:	2201      	movs	r2, #1
     9f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     9fc:	47b0      	blx	r6
     9fe:	6020      	str	r0, [r4, #0]
    if (ret) {
     a00:	2800      	cmp	r0, #0
     a02:	d1ec      	bne.n	9de <main+0x142>
	ret = uart_rx_enable(uart ,rx_buf,sizeof rx_buf,RECEIVE_TIMEOUT);
     a04:	6828      	ldr	r0, [r5, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
     a06:	6883      	ldr	r3, [r0, #8]
     a08:	4957      	ldr	r1, [pc, #348]	; (b68 <main+0x2cc>)
     a0a:	68dd      	ldr	r5, [r3, #12]
     a0c:	220a      	movs	r2, #10
     a0e:	2364      	movs	r3, #100	; 0x64
     a10:	47a8      	blx	r5
     a12:	4605      	mov	r5, r0
     a14:	6020      	str	r0, [r4, #0]
	if (ret) {
     a16:	2800      	cmp	r0, #0
     a18:	d1e1      	bne.n	9de <main+0x142>
	msg.len = num_bytes;
     a1a:	2304      	movs	r3, #4
     a1c:	930a      	str	r3, [sp, #40]	; 0x28
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     a1e:	2302      	movs	r3, #2
	msg.buf = (uint8_t *)buf;
     a20:	9009      	str	r0, [sp, #36]	; 0x24
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     a22:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     a26:	4839      	ldr	r0, [pc, #228]	; (b0c <main+0x270>)
     a28:	6883      	ldr	r3, [r0, #8]
     a2a:	2201      	movs	r2, #1
     a2c:	689e      	ldr	r6, [r3, #8]
     a2e:	a909      	add	r1, sp, #36	; 0x24
     a30:	234d      	movs	r3, #77	; 0x4d
     a32:	47b0      	blx	r6
    ret = i2c_write_dt(&dev_i2c, config, sizeof(config));
     a34:	6020      	str	r0, [r4, #0]
    if (ret != 0) {
     a36:	b120      	cbz	r0, a42 <main+0x1a6>
        printk("Failed to write to I2C device address %x at Reg. %x \n",dev_i2c.addr,config);
     a38:	484c      	ldr	r0, [pc, #304]	; (b6c <main+0x2d0>)
     a3a:	462a      	mov	r2, r5
     a3c:	214d      	movs	r1, #77	; 0x4d
     a3e:	f005 f920 	bl	5c82 <printk>
    timing_init();
     a42:	f001 fbf3 	bl	222c <timing_init>
    timing_start();
     a46:	2600      	movs	r6, #0
     a48:	f001 fbfc 	bl	2244 <timing_start>
    thread_temperature_tid = k_thread_create(&thread_temperature_data, thread_temperature_stack,
     a4c:	2700      	movs	r7, #0
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     a4e:	2400      	movs	r4, #0
     a50:	2503      	movs	r5, #3
     a52:	e9cd 6706 	strd	r6, r7, [sp, #24]
     a56:	e9cd 5403 	strd	r5, r4, [sp, #12]
     a5a:	e9cd 4401 	strd	r4, r4, [sp, #4]
     a5e:	4b44      	ldr	r3, [pc, #272]	; (b70 <main+0x2d4>)
     a60:	4944      	ldr	r1, [pc, #272]	; (b74 <main+0x2d8>)
     a62:	9400      	str	r4, [sp, #0]
     a64:	f44f 6280 	mov.w	r2, #1024	; 0x400
     a68:	4843      	ldr	r0, [pc, #268]	; (b78 <main+0x2dc>)
     a6a:	f003 ffcf 	bl	4a0c <z_impl_k_thread_create>
     a6e:	4b43      	ldr	r3, [pc, #268]	; (b7c <main+0x2e0>)
     a70:	6018      	str	r0, [r3, #0]
     a72:	4b43      	ldr	r3, [pc, #268]	; (b80 <main+0x2e4>)
     a74:	4943      	ldr	r1, [pc, #268]	; (b84 <main+0x2e8>)
     a76:	9400      	str	r4, [sp, #0]
     a78:	e9cd 6706 	strd	r6, r7, [sp, #24]
     a7c:	e9cd 5403 	strd	r5, r4, [sp, #12]
     a80:	e9cd 4401 	strd	r4, r4, [sp, #4]
     a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
     a88:	483f      	ldr	r0, [pc, #252]	; (b88 <main+0x2ec>)
     a8a:	f003 ffbf 	bl	4a0c <z_impl_k_thread_create>
    thread_button_tid = k_thread_create(&thread_button_data, thread_button_stack,
     a8e:	4b3f      	ldr	r3, [pc, #252]	; (b8c <main+0x2f0>)
     a90:	6018      	str	r0, [r3, #0]
     a92:	4b3f      	ldr	r3, [pc, #252]	; (b90 <main+0x2f4>)
     a94:	493f      	ldr	r1, [pc, #252]	; (b94 <main+0x2f8>)
     a96:	9400      	str	r4, [sp, #0]
     a98:	e9cd 6706 	strd	r6, r7, [sp, #24]
     a9c:	e9cd 5403 	strd	r5, r4, [sp, #12]
     aa0:	e9cd 4401 	strd	r4, r4, [sp, #4]
     aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
     aa8:	483b      	ldr	r0, [pc, #236]	; (b98 <main+0x2fc>)
     aaa:	f003 ffaf 	bl	4a0c <z_impl_k_thread_create>
    thread_led_tid = k_thread_create(&thread_led_data, thread_led_stack,
     aae:	4b3b      	ldr	r3, [pc, #236]	; (b9c <main+0x300>)
     ab0:	6018      	str	r0, [r3, #0]
     ab2:	2302      	movs	r3, #2
     ab4:	e9cd 4302 	strd	r4, r3, [sp, #8]
     ab8:	e9cd 6706 	strd	r6, r7, [sp, #24]
     abc:	e9cd 4400 	strd	r4, r4, [sp]
     ac0:	4b37      	ldr	r3, [pc, #220]	; (ba0 <main+0x304>)
     ac2:	4938      	ldr	r1, [pc, #224]	; (ba4 <main+0x308>)
     ac4:	9404      	str	r4, [sp, #16]
     ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
     aca:	4837      	ldr	r0, [pc, #220]	; (ba8 <main+0x30c>)
     acc:	f003 ff9e 	bl	4a0c <z_impl_k_thread_create>
	thread_print_tid = k_thread_create(&thread_print_data, thread_print_stack,
     ad0:	4b36      	ldr	r3, [pc, #216]	; (bac <main+0x310>)
     ad2:	6018      	str	r0, [r3, #0]
}
     ad4:	b00d      	add	sp, #52	; 0x34
     ad6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        resetCmdString();
     ada:	f7ff bed1 	b.w	880 <resetCmdString>
     ade:	bf00      	nop
     ae0:	00006f0c 	.word	0x00006f0c
     ae4:	0000755c 	.word	0x0000755c
     ae8:	00007580 	.word	0x00007580
     aec:	000075a4 	.word	0x000075a4
     af0:	000075c8 	.word	0x000075c8
     af4:	000075ec 	.word	0x000075ec
     af8:	00007610 	.word	0x00007610
     afc:	00007634 	.word	0x00007634
     b00:	00007658 	.word	0x00007658
     b04:	20000000 	.word	0x20000000
     b08:	0000767c 	.word	0x0000767c
     b0c:	00006f54 	.word	0x00006f54
     b10:	00007694 	.word	0x00007694
     b14:	001a0001 	.word	0x001a0001
     b18:	00007150 	.word	0x00007150
     b1c:	200006e0 	.word	0x200006e0
     b20:	000076af 	.word	0x000076af
     b24:	00007148 	.word	0x00007148
     b28:	000076d6 	.word	0x000076d6
     b2c:	00007140 	.word	0x00007140
     b30:	000076fd 	.word	0x000076fd
     b34:	00007138 	.word	0x00007138
     b38:	00007724 	.word	0x00007724
     b3c:	00010010 	.word	0x00010010
     b40:	00007130 	.word	0x00007130
     b44:	0000774b 	.word	0x0000774b
     b48:	00007128 	.word	0x00007128
     b4c:	00007772 	.word	0x00007772
     b50:	00007120 	.word	0x00007120
     b54:	00007799 	.word	0x00007799
     b58:	00007118 	.word	0x00007118
     b5c:	000077c0 	.word	0x000077c0
     b60:	00000bb1 	.word	0x00000bb1
     b64:	20001019 	.word	0x20001019
     b68:	2000100f 	.word	0x2000100f
     b6c:	000077e7 	.word	0x000077e7
     b70:	0000060d 	.word	0x0000060d
     b74:	200020a0 	.word	0x200020a0
     b78:	20000368 	.word	0x20000368
     b7c:	20000710 	.word	0x20000710
     b80:	00000561 	.word	0x00000561
     b84:	20001c80 	.word	0x20001c80
     b88:	200002e8 	.word	0x200002e8
     b8c:	2000070c 	.word	0x2000070c
     b90:	000004c9 	.word	0x000004c9
     b94:	20001860 	.word	0x20001860
     b98:	20000268 	.word	0x20000268
     b9c:	20000708 	.word	0x20000708
     ba0:	000003d5 	.word	0x000003d5
     ba4:	20001440 	.word	0x20001440
     ba8:	200001e8 	.word	0x200001e8
     bac:	20000704 	.word	0x20000704

00000bb0 <uart_cb>:
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data) {
     bb0:	b510      	push	{r4, lr}
    switch (evt->type) {
     bb2:	780a      	ldrb	r2, [r1, #0]
     bb4:	2a02      	cmp	r2, #2
     bb6:	d002      	beq.n	bbe <uart_cb+0xe>
     bb8:	2a05      	cmp	r2, #5
     bba:	d01b      	beq.n	bf4 <uart_cb+0x44>
}
     bbc:	bd10      	pop	{r4, pc}
        if(evt->data.rx.len > 0){
     bbe:	68cb      	ldr	r3, [r1, #12]
     bc0:	2b00      	cmp	r3, #0
     bc2:	d0fb      	beq.n	bbc <uart_cb+0xc>
            if(evt->data.rx.buf[evt->data.rx.offset] == '\r') {
     bc4:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
     bc8:	5cd4      	ldrb	r4, [r2, r3]
     bca:	2c0d      	cmp	r4, #13
     bcc:	d109      	bne.n	be2 <uart_cb+0x32>
                res = cmdProcessor();
     bce:	f7ff fd63 	bl	698 <cmdProcessor>
     bd2:	4601      	mov	r1, r0
                printk("\n\rcmdProcessor output: %d\n\r", res);
     bd4:	480c      	ldr	r0, [pc, #48]	; (c08 <uart_cb+0x58>)
     bd6:	f005 f854 	bl	5c82 <printk>
}
     bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                resetCmdString();
     bde:	f7ff be4f 	b.w	880 <resetCmdString>
            printk("%c",c);
     be2:	480a      	ldr	r0, [pc, #40]	; (c0c <uart_cb+0x5c>)
     be4:	4621      	mov	r1, r4
     be6:	f005 f84c 	bl	5c82 <printk>
            res = newCmdChar(c);
     bea:	4620      	mov	r0, r4
}
     bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            res = newCmdChar(c);
     bf0:	f7ff be34 	b.w	85c <newCmdChar>
     bf4:	6883      	ldr	r3, [r0, #8]
     bf6:	4906      	ldr	r1, [pc, #24]	; (c10 <uart_cb+0x60>)
     bf8:	68dc      	ldr	r4, [r3, #12]
     bfa:	220a      	movs	r2, #10
     bfc:	46a4      	mov	ip, r4
     bfe:	2364      	movs	r3, #100	; 0x64
}
     c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     c04:	4760      	bx	ip
     c06:	bf00      	nop
     c08:	0000781d 	.word	0x0000781d
     c0c:	000074dd 	.word	0x000074dd
     c10:	2000100f 	.word	0x2000100f

00000c14 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     c14:	680b      	ldr	r3, [r1, #0]
     c16:	3301      	adds	r3, #1
     c18:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     c1a:	4b01      	ldr	r3, [pc, #4]	; (c20 <char_out+0xc>)
     c1c:	681b      	ldr	r3, [r3, #0]
     c1e:	4718      	bx	r3
     c20:	20000010 	.word	0x20000010

00000c24 <__printk_hook_install>:
	_char_out = fn;
     c24:	4b01      	ldr	r3, [pc, #4]	; (c2c <__printk_hook_install+0x8>)
     c26:	6018      	str	r0, [r3, #0]
}
     c28:	4770      	bx	lr
     c2a:	bf00      	nop
     c2c:	20000010 	.word	0x20000010

00000c30 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     c30:	b507      	push	{r0, r1, r2, lr}
     c32:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     c34:	2100      	movs	r1, #0
{
     c36:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     c38:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     c3a:	4803      	ldr	r0, [pc, #12]	; (c48 <vprintk+0x18>)
     c3c:	a901      	add	r1, sp, #4
     c3e:	f000 f913 	bl	e68 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     c42:	b003      	add	sp, #12
     c44:	f85d fb04 	ldr.w	pc, [sp], #4
     c48:	00000c15 	.word	0x00000c15

00000c4c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c50:	8b05      	ldrh	r5, [r0, #24]
{
     c52:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     c54:	0728      	lsls	r0, r5, #28
{
     c56:	4690      	mov	r8, r2
	if (processing) {
     c58:	d411      	bmi.n	c7e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     c5a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c5c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     c60:	f040 80cd 	bne.w	dfe <process_event+0x1b2>
			evt = process_recheck(mgr);
     c64:	4620      	mov	r0, r4
     c66:	f005 f819 	bl	5c9c <process_recheck>
		}

		if (evt == EVT_NOP) {
     c6a:	b178      	cbz	r0, c8c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     c6c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c6e:	8b21      	ldrh	r1, [r4, #24]
     c70:	2804      	cmp	r0, #4
     c72:	d811      	bhi.n	c98 <process_event+0x4c>
     c74:	e8df f000 	tbb	[pc, r0]
     c78:	856d10c3 	.word	0x856d10c3
     c7c:	95          	.byte	0x95
     c7d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     c7e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     c80:	bf0c      	ite	eq
     c82:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     c86:	f045 0520 	orrne.w	r5, r5, #32
     c8a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     c8c:	f388 8811 	msr	BASEPRI, r8
     c90:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     c98:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     c9c:	45aa      	cmp	sl, r5
     c9e:	f000 80a6 	beq.w	dee <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     ca2:	2700      	movs	r7, #0
     ca4:	46b9      	mov	r9, r7
     ca6:	463e      	mov	r6, r7
     ca8:	68a3      	ldr	r3, [r4, #8]
     caa:	2b00      	cmp	r3, #0
     cac:	f000 80bd 	beq.w	e2a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     cb0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     cb4:	8321      	strh	r1, [r4, #24]
     cb6:	f388 8811 	msr	BASEPRI, r8
     cba:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     cbe:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     cc0:	2900      	cmp	r1, #0
     cc2:	f000 80bb 	beq.w	e3c <process_event+0x1f0>
	return node->next;
     cc6:	680d      	ldr	r5, [r1, #0]
     cc8:	2900      	cmp	r1, #0
     cca:	f000 80b7 	beq.w	e3c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
     cce:	f8d1 8004 	ldr.w	r8, [r1, #4]
     cd2:	4633      	mov	r3, r6
     cd4:	4652      	mov	r2, sl
     cd6:	4620      	mov	r0, r4
     cd8:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     cda:	2d00      	cmp	r5, #0
     cdc:	d076      	beq.n	dcc <process_event+0x180>
     cde:	682b      	ldr	r3, [r5, #0]
     ce0:	4629      	mov	r1, r5
     ce2:	461d      	mov	r5, r3
     ce4:	e7f0      	b.n	cc8 <process_event+0x7c>
     ce6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     cea:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     cec:	2a01      	cmp	r2, #1
     cee:	d81b      	bhi.n	d28 <process_event+0xdc>
	list->head = NULL;
     cf0:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cf2:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     cf6:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     cf8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cfa:	b289      	uxth	r1, r1
	list->tail = NULL;
     cfc:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     d00:	d109      	bne.n	d16 <process_event+0xca>
     d02:	463b      	mov	r3, r7
     d04:	e003      	b.n	d0e <process_event+0xc2>
				mgr->refs += 1U;
     d06:	8b62      	ldrh	r2, [r4, #26]
	return node->next;
     d08:	681b      	ldr	r3, [r3, #0]
     d0a:	3201      	adds	r2, #1
     d0c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     d0e:	2b00      	cmp	r3, #0
     d10:	d1f9      	bne.n	d06 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d12:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     d16:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     d18:	4620      	mov	r0, r4
     d1a:	f004 ffbf 	bl	5c9c <process_recheck>
     d1e:	2800      	cmp	r0, #0
     d20:	d07b      	beq.n	e1a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     d22:	f041 0120 	orr.w	r1, r1, #32
     d26:	e077      	b.n	e18 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     d28:	2b04      	cmp	r3, #4
     d2a:	d10a      	bne.n	d42 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d2c:	f021 0107 	bic.w	r1, r1, #7
     d30:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     d32:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     d34:	4620      	mov	r0, r4
     d36:	f004 ffb1 	bl	5c9c <process_recheck>
     d3a:	b110      	cbz	r0, d42 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     d3c:	f041 0120 	orr.w	r1, r1, #32
     d40:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d42:	8b21      	ldrh	r1, [r4, #24]
     d44:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d48:	45aa      	cmp	sl, r5
     d4a:	d050      	beq.n	dee <process_event+0x1a2>
     d4c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     d4e:	46b9      	mov	r9, r7
     d50:	e7aa      	b.n	ca8 <process_event+0x5c>
			transit = mgr->transitions->start;
     d52:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d54:	f021 0107 	bic.w	r1, r1, #7
     d58:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     d5c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     d5e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     d62:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     d64:	d12d      	bne.n	dc2 <process_event+0x176>
		    || (transit != NULL)) {
     d66:	f1b9 0f00 	cmp.w	r9, #0
     d6a:	d040      	beq.n	dee <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     d6c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     d70:	8321      	strh	r1, [r4, #24]
     d72:	f388 8811 	msr	BASEPRI, r8
     d76:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     d7a:	493a      	ldr	r1, [pc, #232]	; (e64 <process_event+0x218>)
     d7c:	4620      	mov	r0, r4
     d7e:	47c8      	blx	r9
     d80:	e029      	b.n	dd6 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d82:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     d86:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d88:	f041 0104 	orr.w	r1, r1, #4
     d8c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     d8e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     d90:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     d94:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     d96:	d0e6      	beq.n	d66 <process_event+0x11a>
     d98:	2700      	movs	r7, #0
		res = 0;
     d9a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d9c:	f04f 0a04 	mov.w	sl, #4
     da0:	e782      	b.n	ca8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     da2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     da6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     da8:	f041 0105 	orr.w	r1, r1, #5
     dac:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     dae:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     db0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     db4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     db6:	d0d6      	beq.n	d66 <process_event+0x11a>
     db8:	2700      	movs	r7, #0
		res = 0;
     dba:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     dbc:	f04f 0a05 	mov.w	sl, #5
     dc0:	e772      	b.n	ca8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     dc2:	2700      	movs	r7, #0
		res = 0;
     dc4:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     dc6:	f04f 0a06 	mov.w	sl, #6
     dca:	e76d      	b.n	ca8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     dcc:	462b      	mov	r3, r5
     dce:	e787      	b.n	ce0 <process_event+0x94>
			if (transit != NULL) {
     dd0:	f1b9 0f00 	cmp.w	r9, #0
     dd4:	d1d1      	bne.n	d7a <process_event+0x12e>
	__asm__ volatile(
     dd6:	f04f 0320 	mov.w	r3, #32
     dda:	f3ef 8811 	mrs	r8, BASEPRI
     dde:	f383 8812 	msr	BASEPRI_MAX, r3
     de2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     de6:	8b23      	ldrh	r3, [r4, #24]
     de8:	f023 0308 	bic.w	r3, r3, #8
     dec:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     dee:	8b25      	ldrh	r5, [r4, #24]
     df0:	06ea      	lsls	r2, r5, #27
     df2:	d52e      	bpl.n	e52 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     df4:	f025 0310 	bic.w	r3, r5, #16
     df8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     dfa:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     dfe:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     e00:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     e02:	2e00      	cmp	r6, #0
     e04:	f6bf af6f 	bge.w	ce6 <process_event+0x9a>
	list->head = NULL;
     e08:	2300      	movs	r3, #0
		*clients = mgr->clients;
     e0a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     e0c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e10:	f021 0107 	bic.w	r1, r1, #7
     e14:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     e18:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     e1a:	8b21      	ldrh	r1, [r4, #24]
     e1c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     e20:	45aa      	cmp	sl, r5
     e22:	f04f 0900 	mov.w	r9, #0
     e26:	f47f af3f 	bne.w	ca8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     e2a:	2f00      	cmp	r7, #0
     e2c:	d09b      	beq.n	d66 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     e2e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     e32:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     e34:	f388 8811 	msr	BASEPRI, r8
     e38:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     e3c:	2f00      	cmp	r7, #0
     e3e:	d0c7      	beq.n	dd0 <process_event+0x184>
	return node->next;
     e40:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     e42:	4639      	mov	r1, r7
     e44:	4633      	mov	r3, r6
     e46:	4652      	mov	r2, sl
     e48:	4620      	mov	r0, r4
     e4a:	f004 ff53 	bl	5cf4 <notify_one>
	list->head = node;
     e4e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     e50:	e7f4      	b.n	e3c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     e52:	06ab      	lsls	r3, r5, #26
     e54:	f57f af1a 	bpl.w	c8c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     e58:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     e5c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     e5e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     e62:	e6ff      	b.n	c64 <process_event+0x18>
     e64:	00005d21 	.word	0x00005d21

00000e68 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e6c:	4681      	mov	r9, r0
     e6e:	b095      	sub	sp, #84	; 0x54
     e70:	468b      	mov	fp, r1
     e72:	4617      	mov	r7, r2
     e74:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     e76:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     e78:	7838      	ldrb	r0, [r7, #0]
     e7a:	b908      	cbnz	r0, e80 <cbvprintf+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     e7c:	4628      	mov	r0, r5
     e7e:	e358      	b.n	1532 <CONFIG_FPROTECT_BLOCK_SIZE+0x532>
			OUTC(*fp++);
     e80:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     e82:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     e84:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     e86:	d006      	beq.n	e96 <cbvprintf+0x2e>
			OUTC('%');
     e88:	4659      	mov	r1, fp
     e8a:	47c8      	blx	r9
     e8c:	2800      	cmp	r0, #0
     e8e:	f2c0 8350 	blt.w	1532 <CONFIG_FPROTECT_BLOCK_SIZE+0x532>
     e92:	3501      	adds	r5, #1
		if (bps == NULL) {
     e94:	e204      	b.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
		} state = {
     e96:	2218      	movs	r2, #24
     e98:	2100      	movs	r1, #0
     e9a:	a80e      	add	r0, sp, #56	; 0x38
     e9c:	f005 f85b 	bl	5f56 <memset>
	if (*sp == '%') {
     ea0:	787b      	ldrb	r3, [r7, #1]
     ea2:	2b25      	cmp	r3, #37	; 0x25
     ea4:	d07d      	beq.n	fa2 <cbvprintf+0x13a>
     ea6:	2300      	movs	r3, #0
     ea8:	1c78      	adds	r0, r7, #1
     eaa:	4698      	mov	r8, r3
     eac:	469e      	mov	lr, r3
     eae:	469c      	mov	ip, r3
     eb0:	461e      	mov	r6, r3
     eb2:	4601      	mov	r1, r0
		switch (*sp) {
     eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
     eb8:	2a2b      	cmp	r2, #43	; 0x2b
     eba:	f000 80a1 	beq.w	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
     ebe:	f200 8098 	bhi.w	ff2 <cbvprintf+0x18a>
     ec2:	2a20      	cmp	r2, #32
     ec4:	f000 809f 	beq.w	1006 <CONFIG_FPROTECT_BLOCK_SIZE+0x6>
     ec8:	2a23      	cmp	r2, #35	; 0x23
     eca:	f000 809f 	beq.w	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
     ece:	b12b      	cbz	r3, edc <cbvprintf+0x74>
     ed0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     ed8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     edc:	f1b8 0f00 	cmp.w	r8, #0
     ee0:	d005      	beq.n	eee <cbvprintf+0x86>
     ee2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     ee6:	f043 0320 	orr.w	r3, r3, #32
     eea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     eee:	f1be 0f00 	cmp.w	lr, #0
     ef2:	d005      	beq.n	f00 <cbvprintf+0x98>
     ef4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     ef8:	f043 0310 	orr.w	r3, r3, #16
     efc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     f00:	f1bc 0f00 	cmp.w	ip, #0
     f04:	d005      	beq.n	f12 <cbvprintf+0xaa>
     f06:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     f0a:	f043 0308 	orr.w	r3, r3, #8
     f0e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     f12:	b12e      	cbz	r6, f20 <cbvprintf+0xb8>
     f14:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     f18:	f043 0304 	orr.w	r3, r3, #4
     f1c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     f20:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     f24:	f003 0044 	and.w	r0, r3, #68	; 0x44
     f28:	2844      	cmp	r0, #68	; 0x44
     f2a:	d103      	bne.n	f34 <cbvprintf+0xcc>
		conv->flag_zero = false;
     f2c:	f36f 1386 	bfc	r3, #6, #1
     f30:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     f34:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     f38:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     f3e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     f42:	d17f      	bne.n	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
		conv->width_star = true;
     f44:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     f48:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     f4c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     f4e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     f52:	781a      	ldrb	r2, [r3, #0]
     f54:	2a2e      	cmp	r2, #46	; 0x2e
     f56:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     f5a:	bf0c      	ite	eq
     f5c:	2101      	moveq	r1, #1
     f5e:	2100      	movne	r1, #0
     f60:	f361 0241 	bfi	r2, r1, #1, #1
     f64:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     f68:	d178      	bne.n	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
	if (*sp == '*') {
     f6a:	785a      	ldrb	r2, [r3, #1]
     f6c:	2a2a      	cmp	r2, #42	; 0x2a
     f6e:	d06e      	beq.n	104e <CONFIG_FPROTECT_BLOCK_SIZE+0x4e>
	++sp;
     f70:	3301      	adds	r3, #1
	size_t val = 0;
     f72:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     f74:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     f78:	4619      	mov	r1, r3
     f7a:	f811 0b01 	ldrb.w	r0, [r1], #1
     f7e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     f82:	2e09      	cmp	r6, #9
     f84:	f240 8095 	bls.w	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
	conv->unsupported |= ((conv->prec_value < 0)
     f88:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     f8c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     f8e:	f3c1 0040 	ubfx	r0, r1, #1, #1
     f92:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     f96:	460a      	mov	r2, r1
     f98:	f360 0241 	bfi	r2, r0, #1, #1
     f9c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     fa0:	e05c      	b.n	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
		conv->specifier = *sp++;
     fa2:	1cba      	adds	r2, r7, #2
     fa4:	9203      	str	r2, [sp, #12]
     fa6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     faa:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     fae:	07da      	lsls	r2, r3, #31
     fb0:	f140 812e 	bpl.w	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
			width = va_arg(ap, int);
     fb4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     fb8:	f1b8 0f00 	cmp.w	r8, #0
     fbc:	da07      	bge.n	fce <cbvprintf+0x166>
				conv->flag_dash = true;
     fbe:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     fc2:	f042 0204 	orr.w	r2, r2, #4
     fc6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
     fca:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
     fce:	075e      	lsls	r6, r3, #29
     fd0:	f140 8127 	bpl.w	1222 <CONFIG_FPROTECT_BLOCK_SIZE+0x222>
			int arg = va_arg(ap, int);
     fd4:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     fd8:	f1ba 0f00 	cmp.w	sl, #0
     fdc:	f280 8126 	bge.w	122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
				conv->prec_present = false;
     fe0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     fe4:	f36f 0341 	bfc	r3, #1, #1
     fe8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     fec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     ff0:	e11c      	b.n	122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
		switch (*sp) {
     ff2:	2a2d      	cmp	r2, #45	; 0x2d
     ff4:	d00d      	beq.n	1012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
     ff6:	2a30      	cmp	r2, #48	; 0x30
     ff8:	f47f af69 	bne.w	ece <cbvprintf+0x66>
     ffc:	2301      	movs	r3, #1
	} while (loop);
     ffe:	e758      	b.n	eb2 <cbvprintf+0x4a>
		switch (*sp) {
    1000:	f04f 0c01 	mov.w	ip, #1
    1004:	e755      	b.n	eb2 <cbvprintf+0x4a>
    1006:	f04f 0e01 	mov.w	lr, #1
    100a:	e752      	b.n	eb2 <cbvprintf+0x4a>
    100c:	f04f 0801 	mov.w	r8, #1
    1010:	e74f      	b.n	eb2 <cbvprintf+0x4a>
    1012:	2601      	movs	r6, #1
    1014:	e74d      	b.n	eb2 <cbvprintf+0x4a>
		val = 10U * val + *sp++ - '0';
    1016:	fb0e 6202 	mla	r2, lr, r2, r6
    101a:	3a30      	subs	r2, #48	; 0x30
    101c:	4603      	mov	r3, r0
    101e:	4618      	mov	r0, r3
    1020:	f810 6b01 	ldrb.w	r6, [r0], #1
    1024:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1028:	f1bc 0f09 	cmp.w	ip, #9
    102c:	d9f3      	bls.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
	if (sp != wp) {
    102e:	4299      	cmp	r1, r3
    1030:	d08f      	beq.n	f52 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1032:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    1036:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    1038:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    103a:	f362 0141 	bfi	r1, r2, #1, #1
    103e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    1042:	e786      	b.n	f52 <cbvprintf+0xea>
    1044:	460b      	mov	r3, r1
	size_t val = 0;
    1046:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1048:	f04f 0e0a 	mov.w	lr, #10
    104c:	e7e7      	b.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
		conv->prec_star = true;
    104e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1052:	f042 0204 	orr.w	r2, r2, #4
    1056:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    105a:	3302      	adds	r3, #2
	switch (*sp) {
    105c:	781a      	ldrb	r2, [r3, #0]
    105e:	2a6c      	cmp	r2, #108	; 0x6c
    1060:	d047      	beq.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
    1062:	d82b      	bhi.n	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
    1064:	2a68      	cmp	r2, #104	; 0x68
    1066:	d031      	beq.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
    1068:	2a6a      	cmp	r2, #106	; 0x6a
    106a:	d04b      	beq.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    106c:	2a4c      	cmp	r2, #76	; 0x4c
    106e:	d051      	beq.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
	conv->specifier = *sp++;
    1070:	461a      	mov	r2, r3
    1072:	f812 3b01 	ldrb.w	r3, [r2], #1
    1076:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    1078:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    107a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    107e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    1082:	f200 80be 	bhi.w	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
    1086:	2b6d      	cmp	r3, #109	; 0x6d
    1088:	d851      	bhi.n	112e <CONFIG_FPROTECT_BLOCK_SIZE+0x12e>
    108a:	2b69      	cmp	r3, #105	; 0x69
    108c:	f200 80b9 	bhi.w	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
    1090:	2b57      	cmp	r3, #87	; 0x57
    1092:	d867      	bhi.n	1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
    1094:	2b41      	cmp	r3, #65	; 0x41
    1096:	d003      	beq.n	10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
    1098:	3b45      	subs	r3, #69	; 0x45
    109a:	2b02      	cmp	r3, #2
    109c:	f200 80b1 	bhi.w	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
		conv->specifier_cat = SPECIFIER_FP;
    10a0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    10a4:	2204      	movs	r2, #4
    10a6:	f362 0302 	bfi	r3, r2, #0, #3
    10aa:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    10ae:	2301      	movs	r3, #1
			break;
    10b0:	e073      	b.n	119a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
		val = 10U * val + *sp++ - '0';
    10b2:	fb0c 0202 	mla	r2, ip, r2, r0
    10b6:	3a30      	subs	r2, #48	; 0x30
    10b8:	460b      	mov	r3, r1
    10ba:	e75d      	b.n	f78 <cbvprintf+0x110>
	switch (*sp) {
    10bc:	2a74      	cmp	r2, #116	; 0x74
    10be:	d025      	beq.n	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
    10c0:	2a7a      	cmp	r2, #122	; 0x7a
    10c2:	d1d5      	bne.n	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
		conv->length_mod = LENGTH_Z;
    10c4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    10c8:	2106      	movs	r1, #6
    10ca:	e00c      	b.n	10e6 <CONFIG_FPROTECT_BLOCK_SIZE+0xe6>
		if (*++sp == 'h') {
    10cc:	785a      	ldrb	r2, [r3, #1]
    10ce:	2a68      	cmp	r2, #104	; 0x68
    10d0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    10d4:	d106      	bne.n	10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
			conv->length_mod = LENGTH_HH;
    10d6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    10d8:	f361 02c6 	bfi	r2, r1, #3, #4
    10dc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    10e0:	3302      	adds	r3, #2
    10e2:	e7c5      	b.n	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
			conv->length_mod = LENGTH_H;
    10e4:	2102      	movs	r1, #2
    10e6:	f361 02c6 	bfi	r2, r1, #3, #4
    10ea:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    10ee:	3301      	adds	r3, #1
    10f0:	e7be      	b.n	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
		if (*++sp == 'l') {
    10f2:	785a      	ldrb	r2, [r3, #1]
    10f4:	2a6c      	cmp	r2, #108	; 0x6c
    10f6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    10fa:	d101      	bne.n	1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
			conv->length_mod = LENGTH_LL;
    10fc:	2104      	movs	r1, #4
    10fe:	e7eb      	b.n	10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>
			conv->length_mod = LENGTH_L;
    1100:	2103      	movs	r1, #3
    1102:	e7f0      	b.n	10e6 <CONFIG_FPROTECT_BLOCK_SIZE+0xe6>
		conv->length_mod = LENGTH_J;
    1104:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1108:	2105      	movs	r1, #5
    110a:	e7ec      	b.n	10e6 <CONFIG_FPROTECT_BLOCK_SIZE+0xe6>
		conv->length_mod = LENGTH_T;
    110c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1110:	2107      	movs	r1, #7
    1112:	e7e8      	b.n	10e6 <CONFIG_FPROTECT_BLOCK_SIZE+0xe6>
		conv->unsupported = true;
    1114:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    1118:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    111c:	f022 0202 	bic.w	r2, r2, #2
    1120:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1124:	f042 0202 	orr.w	r2, r2, #2
    1128:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    112c:	e7df      	b.n	10ee <CONFIG_FPROTECT_BLOCK_SIZE+0xee>
	switch (conv->specifier) {
    112e:	3b6e      	subs	r3, #110	; 0x6e
    1130:	b2d9      	uxtb	r1, r3
    1132:	2301      	movs	r3, #1
    1134:	408b      	lsls	r3, r1
    1136:	f240 4182 	movw	r1, #1154	; 0x482
    113a:	420b      	tst	r3, r1
    113c:	d137      	bne.n	11ae <CONFIG_FPROTECT_BLOCK_SIZE+0x1ae>
    113e:	f013 0f24 	tst.w	r3, #36	; 0x24
    1142:	d151      	bne.n	11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
    1144:	07d8      	lsls	r0, r3, #31
    1146:	d55c      	bpl.n	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
		conv->specifier_cat = SPECIFIER_PTR;
    1148:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    114c:	2103      	movs	r1, #3
    114e:	f361 0302 	bfi	r3, r1, #0, #3
    1152:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1156:	f002 0378 	and.w	r3, r2, #120	; 0x78
    115a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    115e:	424b      	negs	r3, r1
    1160:	414b      	adcs	r3, r1
    1162:	e01a      	b.n	119a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
	switch (conv->specifier) {
    1164:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    1168:	b2c9      	uxtb	r1, r1
    116a:	2001      	movs	r0, #1
    116c:	fa00 f101 	lsl.w	r1, r0, r1
    1170:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1174:	d194      	bne.n	10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
    1176:	f640 0601 	movw	r6, #2049	; 0x801
    117a:	4231      	tst	r1, r6
    117c:	d11d      	bne.n	11ba <CONFIG_FPROTECT_BLOCK_SIZE+0x1ba>
    117e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    1182:	d03e      	beq.n	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
		conv->specifier_cat = SPECIFIER_SINT;
    1184:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1188:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    118c:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1190:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    1192:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1196:	d034      	beq.n	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
	bool unsupported = false;
    1198:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    119a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    119e:	f3c2 0140 	ubfx	r1, r2, #1, #1
    11a2:	430b      	orrs	r3, r1
    11a4:	f363 0241 	bfi	r2, r3, #1, #1
    11a8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    11ac:	e6fd      	b.n	faa <cbvprintf+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    11ae:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    11b2:	2102      	movs	r1, #2
    11b4:	f361 0302 	bfi	r3, r1, #0, #3
    11b8:	e7e8      	b.n	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
    11ba:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    11be:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    11c0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    11c4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    11c8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    11ca:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    11ce:	bf02      	ittt	eq
    11d0:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    11d4:	f041 0101 	orreq.w	r1, r1, #1
    11d8:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    11dc:	2b63      	cmp	r3, #99	; 0x63
    11de:	d1db      	bne.n	1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>
			unsupported = (conv->length_mod != LENGTH_NONE);
    11e0:	1e13      	subs	r3, r2, #0
    11e2:	bf18      	it	ne
    11e4:	2301      	movne	r3, #1
    11e6:	e7d8      	b.n	119a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
		conv->specifier_cat = SPECIFIER_PTR;
    11e8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    11ec:	2103      	movs	r1, #3
    11ee:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    11f2:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    11f6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    11fa:	bf14      	ite	ne
    11fc:	2301      	movne	r3, #1
    11fe:	2300      	moveq	r3, #0
    1200:	e7cb      	b.n	119a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
		conv->invalid = true;
    1202:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1206:	f043 0301 	orr.w	r3, r3, #1
    120a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    120e:	e7c3      	b.n	1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>
		} else if (conv->width_present) {
    1210:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    1214:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1216:	bfb4      	ite	lt
    1218:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    121c:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    1220:	e6d5      	b.n	fce <cbvprintf+0x166>
		} else if (conv->prec_present) {
    1222:	0798      	lsls	r0, r3, #30
    1224:	f57f aee2 	bpl.w	fec <cbvprintf+0x184>
			precision = conv->prec_value;
    1228:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    122c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    1230:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1232:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    1236:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    123a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    123e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1240:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1244:	d133      	bne.n	12ae <CONFIG_FPROTECT_BLOCK_SIZE+0x2ae>
			switch (length_mod) {
    1246:	1ecb      	subs	r3, r1, #3
    1248:	2b04      	cmp	r3, #4
    124a:	d804      	bhi.n	1256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
    124c:	e8df f003 	tbb	[pc, r3]
    1250:	10464610 	.word	0x10464610
    1254:	10          	.byte	0x10
    1255:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1256:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    1258:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    125a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    125e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1262:	d10b      	bne.n	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
				value->sint = (char)value->sint;
    1264:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    1268:	930e      	str	r3, [sp, #56]	; 0x38
    126a:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
    126c:	930f      	str	r3, [sp, #60]	; 0x3c
    126e:	e007      	b.n	1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1270:	f854 3b04 	ldr.w	r3, [r4], #4
    1274:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    1276:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    127a:	e002      	b.n	1282 <CONFIG_FPROTECT_BLOCK_SIZE+0x282>
			} else if (length_mod == LENGTH_H) {
    127c:	2902      	cmp	r1, #2
    127e:	d011      	beq.n	12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>
				value->sint = va_arg(ap, int);
    1280:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    1282:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1286:	f013 0603 	ands.w	r6, r3, #3
    128a:	d047      	beq.n	131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>
			OUTS(sp, fp);
    128c:	9b03      	ldr	r3, [sp, #12]
    128e:	463a      	mov	r2, r7
    1290:	4659      	mov	r1, fp
    1292:	4648      	mov	r0, r9
    1294:	f004 fe0d 	bl	5eb2 <outs>
    1298:	2800      	cmp	r0, #0
    129a:	f2c0 814a 	blt.w	1532 <CONFIG_FPROTECT_BLOCK_SIZE+0x532>
    129e:	4405      	add	r5, r0
			continue;
    12a0:	9f03      	ldr	r7, [sp, #12]
    12a2:	e5e9      	b.n	e78 <cbvprintf+0x10>
				value->sint = (short)value->sint;
    12a4:	b21a      	sxth	r2, r3
    12a6:	920e      	str	r2, [sp, #56]	; 0x38
    12a8:	f343 33c0 	sbfx	r3, r3, #15, #1
    12ac:	e7de      	b.n	126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>
		} else if (specifier_cat == SPECIFIER_UINT) {
    12ae:	2b02      	cmp	r3, #2
    12b0:	d124      	bne.n	12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
			switch (length_mod) {
    12b2:	1ecb      	subs	r3, r1, #3
    12b4:	2b04      	cmp	r3, #4
    12b6:	d804      	bhi.n	12c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c2>
    12b8:	e8df f003 	tbb	[pc, r3]
    12bc:	18101018 	.word	0x18101018
    12c0:	18          	.byte	0x18
    12c1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    12c2:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    12c4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    12c8:	f04f 0200 	mov.w	r2, #0
    12cc:	d014      	beq.n	12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>
			} else if (length_mod == LENGTH_H) {
    12ce:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    12d0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    12d4:	d1d5      	bne.n	1282 <CONFIG_FPROTECT_BLOCK_SIZE+0x282>
				value->uint = (unsigned short)value->uint;
    12d6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    12d8:	930e      	str	r3, [sp, #56]	; 0x38
    12da:	e7d2      	b.n	1282 <CONFIG_FPROTECT_BLOCK_SIZE+0x282>
					(uint_value_type)va_arg(ap,
    12dc:	3407      	adds	r4, #7
    12de:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    12e2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    12e6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    12ea:	e7ca      	b.n	1282 <CONFIG_FPROTECT_BLOCK_SIZE+0x282>
					(uint_value_type)va_arg(ap, size_t);
    12ec:	f854 3b04 	ldr.w	r3, [r4], #4
    12f0:	930e      	str	r3, [sp, #56]	; 0x38
    12f2:	2300      	movs	r3, #0
    12f4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    12f6:	e7c4      	b.n	1282 <CONFIG_FPROTECT_BLOCK_SIZE+0x282>
				value->uint = (unsigned char)value->uint;
    12f8:	b2db      	uxtb	r3, r3
    12fa:	e7bc      	b.n	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
		} else if (specifier_cat == SPECIFIER_FP) {
    12fc:	2b04      	cmp	r3, #4
    12fe:	d108      	bne.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
					(sint_value_type)va_arg(ap, long long);
    1300:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    1302:	f024 0407 	bic.w	r4, r4, #7
    1306:	e9d4 2300 	ldrd	r2, r3, [r4]
    130a:	3408      	adds	r4, #8
    130c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1310:	e7b7      	b.n	1282 <CONFIG_FPROTECT_BLOCK_SIZE+0x282>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1312:	2b03      	cmp	r3, #3
    1314:	d1b5      	bne.n	1282 <CONFIG_FPROTECT_BLOCK_SIZE+0x282>
			value->ptr = va_arg(ap, void *);
    1316:	f854 3b04 	ldr.w	r3, [r4], #4
    131a:	e7dd      	b.n	12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
		switch (conv->specifier) {
    131c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1320:	2878      	cmp	r0, #120	; 0x78
    1322:	d8bd      	bhi.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
    1324:	2862      	cmp	r0, #98	; 0x62
    1326:	d81c      	bhi.n	1362 <CONFIG_FPROTECT_BLOCK_SIZE+0x362>
    1328:	2825      	cmp	r0, #37	; 0x25
    132a:	f43f adad 	beq.w	e88 <cbvprintf+0x20>
    132e:	2858      	cmp	r0, #88	; 0x58
    1330:	d1b6      	bne.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1332:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1336:	9300      	str	r3, [sp, #0]
    1338:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    133c:	ab08      	add	r3, sp, #32
    133e:	aa10      	add	r2, sp, #64	; 0x40
    1340:	f004 fd71 	bl	5e26 <encode_uint>
			if (precision >= 0) {
    1344:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    1348:	4607      	mov	r7, r0
			if (precision >= 0) {
    134a:	f280 809a 	bge.w	1482 <CONFIG_FPROTECT_BLOCK_SIZE+0x482>
		if (bps == NULL) {
    134e:	2f00      	cmp	r7, #0
    1350:	d0a6      	beq.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
		size_t nj_len = (bpe - bps);
    1352:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1356:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    1358:	2e00      	cmp	r6, #0
    135a:	f000 80c1 	beq.w	14e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e0>
			nj_len += 1U;
    135e:	3001      	adds	r0, #1
    1360:	e0be      	b.n	14e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e0>
		switch (conv->specifier) {
    1362:	3863      	subs	r0, #99	; 0x63
    1364:	2815      	cmp	r0, #21
    1366:	d89b      	bhi.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
    1368:	a201      	add	r2, pc, #4	; (adr r2, 1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>)
    136a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    136e:	bf00      	nop
    1370:	00001445 	.word	0x00001445
    1374:	00001457 	.word	0x00001457
    1378:	000012a1 	.word	0x000012a1
    137c:	000012a1 	.word	0x000012a1
    1380:	000012a1 	.word	0x000012a1
    1384:	000012a1 	.word	0x000012a1
    1388:	00001457 	.word	0x00001457
    138c:	000012a1 	.word	0x000012a1
    1390:	000012a1 	.word	0x000012a1
    1394:	000012a1 	.word	0x000012a1
    1398:	000012a1 	.word	0x000012a1
    139c:	000014e5 	.word	0x000014e5
    13a0:	0000147d 	.word	0x0000147d
    13a4:	000014a3 	.word	0x000014a3
    13a8:	000012a1 	.word	0x000012a1
    13ac:	000012a1 	.word	0x000012a1
    13b0:	000013c9 	.word	0x000013c9
    13b4:	000012a1 	.word	0x000012a1
    13b8:	0000147d 	.word	0x0000147d
    13bc:	000012a1 	.word	0x000012a1
    13c0:	000012a1 	.word	0x000012a1
    13c4:	0000147d 	.word	0x0000147d
			if (precision >= 0) {
    13c8:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    13cc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    13ce:	db35      	blt.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
				len = strnlen(bps, precision);
    13d0:	4651      	mov	r1, sl
    13d2:	4638      	mov	r0, r7
    13d4:	f004 fdab 	bl	5f2e <strnlen>
			bpe = bps + len;
    13d8:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    13dc:	2f00      	cmp	r7, #0
    13de:	f43f af5f 	beq.w	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
		char sign = 0;
    13e2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    13e4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    13e8:	f013 0210 	ands.w	r2, r3, #16
    13ec:	9205      	str	r2, [sp, #20]
    13ee:	f000 8093 	beq.w	1518 <CONFIG_FPROTECT_BLOCK_SIZE+0x518>
			nj_len += 2U;
    13f2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    13f4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    13f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    13f8:	bf48      	it	mi
    13fa:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    13fc:	9204      	str	r2, [sp, #16]
    13fe:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    1400:	bf48      	it	mi
    1402:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    1404:	f1b8 0f00 	cmp.w	r8, #0
    1408:	f340 80a0 	ble.w	154c <CONFIG_FPROTECT_BLOCK_SIZE+0x54c>
			if (!conv->flag_dash) {
    140c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    1410:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    1414:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1418:	0750      	lsls	r0, r2, #29
    141a:	9306      	str	r3, [sp, #24]
    141c:	f100 8096 	bmi.w	154c <CONFIG_FPROTECT_BLOCK_SIZE+0x54c>
				if (conv->flag_zero) {
    1420:	0651      	lsls	r1, r2, #25
    1422:	f140 8089 	bpl.w	1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>
					if (sign != 0) {
    1426:	b13e      	cbz	r6, 1438 <CONFIG_FPROTECT_BLOCK_SIZE+0x438>
						OUTC(sign);
    1428:	4659      	mov	r1, fp
    142a:	4630      	mov	r0, r6
    142c:	47c8      	blx	r9
    142e:	2800      	cmp	r0, #0
    1430:	db7f      	blt.n	1532 <CONFIG_FPROTECT_BLOCK_SIZE+0x532>
    1432:	9b06      	ldr	r3, [sp, #24]
    1434:	3501      	adds	r5, #1
    1436:	461e      	mov	r6, r3
					pad = '0';
    1438:	2230      	movs	r2, #48	; 0x30
    143a:	e07e      	b.n	153a <CONFIG_FPROTECT_BLOCK_SIZE+0x53a>
				len = strlen(bps);
    143c:	4638      	mov	r0, r7
    143e:	f004 fd6f 	bl	5f20 <strlen>
    1442:	e7c9      	b.n	13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1446:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    144a:	2600      	movs	r6, #0
			bps = buf;
    144c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    144e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    1452:	2001      	movs	r0, #1
    1454:	e7c6      	b.n	13e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e4>
			if (conv->flag_plus) {
    1456:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    1458:	bf5c      	itt	pl
    145a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    145e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    1460:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    1464:	bf48      	it	mi
    1466:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    1468:	2b00      	cmp	r3, #0
    146a:	f6bf af62 	bge.w	1332 <CONFIG_FPROTECT_BLOCK_SIZE+0x332>
				value->uint = (uint_value_type)-sint;
    146e:	4252      	negs	r2, r2
    1470:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1474:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    1478:	262d      	movs	r6, #45	; 0x2d
    147a:	e75a      	b.n	1332 <CONFIG_FPROTECT_BLOCK_SIZE+0x332>
		switch (conv->specifier) {
    147c:	2600      	movs	r6, #0
    147e:	e758      	b.n	1332 <CONFIG_FPROTECT_BLOCK_SIZE+0x332>
		char sign = 0;
    1480:	2600      	movs	r6, #0
				conv->flag_zero = false;
    1482:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    1486:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    148a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    148c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1490:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    1492:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    1496:	f67f af5a 	bls.w	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
					conv->pad0_value = precision - (int)len;
    149a:	ebaa 0303 	sub.w	r3, sl, r3
    149e:	9311      	str	r3, [sp, #68]	; 0x44
    14a0:	e755      	b.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
			if (value->ptr != NULL) {
    14a2:	980e      	ldr	r0, [sp, #56]	; 0x38
    14a4:	b390      	cbz	r0, 150c <CONFIG_FPROTECT_BLOCK_SIZE+0x50c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    14a6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    14aa:	9300      	str	r3, [sp, #0]
    14ac:	aa10      	add	r2, sp, #64	; 0x40
    14ae:	ab08      	add	r3, sp, #32
    14b0:	2100      	movs	r1, #0
    14b2:	f004 fcb8 	bl	5e26 <encode_uint>
				conv->altform_0c = true;
    14b6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    14ba:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    14be:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    14c2:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    14c6:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    14ca:	4607      	mov	r7, r0
				conv->altform_0c = true;
    14cc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    14d0:	dad6      	bge.n	1480 <CONFIG_FPROTECT_BLOCK_SIZE+0x480>
		if (bps == NULL) {
    14d2:	2800      	cmp	r0, #0
    14d4:	f43f aee4 	beq.w	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
		size_t nj_len = (bpe - bps);
    14d8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    14dc:	1a18      	subs	r0, r3, r0
		char sign = 0;
    14de:	2600      	movs	r6, #0
    14e0:	469a      	mov	sl, r3
    14e2:	e77f      	b.n	13e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e4>
				store_count(conv, value->ptr, count);
    14e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    14e6:	2907      	cmp	r1, #7
    14e8:	f63f aeda 	bhi.w	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
    14ec:	e8df f001 	tbb	[pc, r1]
    14f0:	0c06040c 	.word	0x0c06040c
    14f4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    14f8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    14fa:	e6d1      	b.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
		*(short *)dp = (short)count;
    14fc:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    14fe:	e6cf      	b.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
		*(intmax_t *)dp = (intmax_t)count;
    1500:	17ea      	asrs	r2, r5, #31
    1502:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    1506:	e6cb      	b.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1508:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    150a:	e6c9      	b.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
    150c:	4f2e      	ldr	r7, [pc, #184]	; (15c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c8>)
		char sign = 0;
    150e:	4606      	mov	r6, r0
			bpe = bps + 5;
    1510:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    1514:	2005      	movs	r0, #5
    1516:	e765      	b.n	13e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e4>
		} else if (conv->altform_0) {
    1518:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    151a:	bf48      	it	mi
    151c:	3001      	addmi	r0, #1
    151e:	e769      	b.n	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
    1520:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    1522:	4610      	mov	r0, r2
    1524:	9206      	str	r2, [sp, #24]
    1526:	4659      	mov	r1, fp
    1528:	47c8      	blx	r9
    152a:	2800      	cmp	r0, #0
    152c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1530:	da04      	bge.n	153c <CONFIG_FPROTECT_BLOCK_SIZE+0x53c>
#undef OUTS
#undef OUTC
}
    1532:	b015      	add	sp, #84	; 0x54
    1534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1538:	2220      	movs	r2, #32
					pad = '0';
    153a:	4643      	mov	r3, r8
				while (width-- > 0) {
    153c:	4619      	mov	r1, r3
    153e:	2900      	cmp	r1, #0
    1540:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    1544:	dcec      	bgt.n	1520 <CONFIG_FPROTECT_BLOCK_SIZE+0x520>
    1546:	4445      	add	r5, r8
    1548:	1a6d      	subs	r5, r5, r1
    154a:	4698      	mov	r8, r3
		if (sign != 0) {
    154c:	b12e      	cbz	r6, 155a <CONFIG_FPROTECT_BLOCK_SIZE+0x55a>
			OUTC(sign);
    154e:	4659      	mov	r1, fp
    1550:	4630      	mov	r0, r6
    1552:	47c8      	blx	r9
    1554:	2800      	cmp	r0, #0
    1556:	dbec      	blt.n	1532 <CONFIG_FPROTECT_BLOCK_SIZE+0x532>
    1558:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    155a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    155e:	06da      	lsls	r2, r3, #27
    1560:	d401      	bmi.n	1566 <CONFIG_FPROTECT_BLOCK_SIZE+0x566>
    1562:	071b      	lsls	r3, r3, #28
    1564:	d505      	bpl.n	1572 <CONFIG_FPROTECT_BLOCK_SIZE+0x572>
				OUTC('0');
    1566:	4659      	mov	r1, fp
    1568:	2030      	movs	r0, #48	; 0x30
    156a:	47c8      	blx	r9
    156c:	2800      	cmp	r0, #0
    156e:	dbe0      	blt.n	1532 <CONFIG_FPROTECT_BLOCK_SIZE+0x532>
    1570:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1572:	9b05      	ldr	r3, [sp, #20]
    1574:	b133      	cbz	r3, 1584 <CONFIG_FPROTECT_BLOCK_SIZE+0x584>
				OUTC(conv->specifier);
    1576:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    157a:	4659      	mov	r1, fp
    157c:	47c8      	blx	r9
    157e:	2800      	cmp	r0, #0
    1580:	dbd7      	blt.n	1532 <CONFIG_FPROTECT_BLOCK_SIZE+0x532>
    1582:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1584:	9e04      	ldr	r6, [sp, #16]
    1586:	442e      	add	r6, r5
    1588:	e005      	b.n	1596 <CONFIG_FPROTECT_BLOCK_SIZE+0x596>
				OUTC('0');
    158a:	4659      	mov	r1, fp
    158c:	2030      	movs	r0, #48	; 0x30
    158e:	47c8      	blx	r9
    1590:	2800      	cmp	r0, #0
    1592:	dbce      	blt.n	1532 <CONFIG_FPROTECT_BLOCK_SIZE+0x532>
    1594:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1596:	1b73      	subs	r3, r6, r5
    1598:	2b00      	cmp	r3, #0
    159a:	dcf6      	bgt.n	158a <CONFIG_FPROTECT_BLOCK_SIZE+0x58a>
			OUTS(bps, bpe);
    159c:	4653      	mov	r3, sl
    159e:	463a      	mov	r2, r7
    15a0:	4659      	mov	r1, fp
    15a2:	4648      	mov	r0, r9
    15a4:	f004 fc85 	bl	5eb2 <outs>
    15a8:	2800      	cmp	r0, #0
    15aa:	dbc2      	blt.n	1532 <CONFIG_FPROTECT_BLOCK_SIZE+0x532>
    15ac:	4405      	add	r5, r0
		while (width > 0) {
    15ae:	44a8      	add	r8, r5
    15b0:	eba8 0305 	sub.w	r3, r8, r5
    15b4:	2b00      	cmp	r3, #0
    15b6:	f77f ae73 	ble.w	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
			OUTC(' ');
    15ba:	4659      	mov	r1, fp
    15bc:	2020      	movs	r0, #32
    15be:	47c8      	blx	r9
    15c0:	2800      	cmp	r0, #0
    15c2:	dbb6      	blt.n	1532 <CONFIG_FPROTECT_BLOCK_SIZE+0x532>
    15c4:	3501      	adds	r5, #1
			--width;
    15c6:	e7f3      	b.n	15b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b0>
    15c8:	00007839 	.word	0x00007839

000015cc <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    15cc:	b508      	push	{r3, lr}
	__asm__ volatile(
    15ce:	f04f 0220 	mov.w	r2, #32
    15d2:	f3ef 8311 	mrs	r3, BASEPRI
    15d6:	f382 8812 	msr	BASEPRI_MAX, r2
    15da:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    15de:	f000 fe05 	bl	21ec <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    15e2:	4803      	ldr	r0, [pc, #12]	; (15f0 <sys_reboot+0x24>)
    15e4:	f004 fb4d 	bl	5c82 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    15e8:	f000 fa2a 	bl	1a40 <arch_cpu_idle>
    15ec:	e7fc      	b.n	15e8 <sys_reboot+0x1c>
    15ee:	bf00      	nop
    15f0:	0000783f 	.word	0x0000783f

000015f4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    15f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    15f8:	4605      	mov	r5, r0
    15fa:	f04f 0320 	mov.w	r3, #32
    15fe:	f3ef 8611 	mrs	r6, BASEPRI
    1602:	f383 8812 	msr	BASEPRI_MAX, r3
    1606:	f3bf 8f6f 	isb	sy
	return list->head;
    160a:	4b0e      	ldr	r3, [pc, #56]	; (1644 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    160c:	4f0e      	ldr	r7, [pc, #56]	; (1648 <pm_state_notify+0x54>)
    160e:	681c      	ldr	r4, [r3, #0]
    1610:	f8df 8038 	ldr.w	r8, [pc, #56]	; 164c <pm_state_notify+0x58>
    1614:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1618:	b92c      	cbnz	r4, 1626 <pm_state_notify+0x32>
	__asm__ volatile(
    161a:	f386 8811 	msr	BASEPRI, r6
    161e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    1626:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    162a:	2d00      	cmp	r5, #0
    162c:	bf18      	it	ne
    162e:	4613      	movne	r3, r2
		if (callback) {
    1630:	b12b      	cbz	r3, 163e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1632:	f898 2014 	ldrb.w	r2, [r8, #20]
    1636:	fb09 f202 	mul.w	r2, r9, r2
    163a:	5cb8      	ldrb	r0, [r7, r2]
    163c:	4798      	blx	r3
	return node->next;
    163e:	6824      	ldr	r4, [r4, #0]
    1640:	e7ea      	b.n	1618 <pm_state_notify+0x24>
    1642:	bf00      	nop
    1644:	20000724 	.word	0x20000724
    1648:	20000718 	.word	0x20000718
    164c:	20000df4 	.word	0x20000df4

00001650 <atomic_clear_bit.constprop.0>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1650:	4a0a      	ldr	r2, [pc, #40]	; (167c <atomic_clear_bit.constprop.0+0x2c>)
    1652:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1656:	0943      	lsrs	r3, r0, #5
    1658:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    165c:	f000 001f 	and.w	r0, r0, #31
    1660:	2301      	movs	r3, #1
    1662:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1664:	43db      	mvns	r3, r3
    1666:	e852 0f00 	ldrex	r0, [r2]
    166a:	4018      	ands	r0, r3
    166c:	e842 0100 	strex	r1, r0, [r2]
    1670:	2900      	cmp	r1, #0
    1672:	d1f8      	bne.n	1666 <atomic_clear_bit.constprop.0+0x16>
    1674:	f3bf 8f5b 	dmb	ish
}
    1678:	4770      	bx	lr
    167a:	bf00      	nop
    167c:	20000714 	.word	0x20000714

00001680 <pm_system_resume>:

void pm_system_resume(void)
{
    1680:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    1682:	4b19      	ldr	r3, [pc, #100]	; (16e8 <pm_system_resume+0x68>)
    1684:	7d1c      	ldrb	r4, [r3, #20]
    1686:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    168a:	f004 031f 	and.w	r3, r4, #31
    168e:	2201      	movs	r2, #1
    1690:	409a      	lsls	r2, r3
    1692:	4b16      	ldr	r3, [pc, #88]	; (16ec <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1694:	0961      	lsrs	r1, r4, #5
    1696:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    169a:	43d0      	mvns	r0, r2
    169c:	e853 1f00 	ldrex	r1, [r3]
    16a0:	ea01 0500 	and.w	r5, r1, r0
    16a4:	e843 5600 	strex	r6, r5, [r3]
    16a8:	2e00      	cmp	r6, #0
    16aa:	d1f7      	bne.n	169c <pm_system_resume+0x1c>
    16ac:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    16b0:	420a      	tst	r2, r1
    16b2:	d013      	beq.n	16dc <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    16b4:	4b0e      	ldr	r3, [pc, #56]	; (16f0 <pm_system_resume+0x70>)
    16b6:	4d0f      	ldr	r5, [pc, #60]	; (16f4 <pm_system_resume+0x74>)
    16b8:	b18b      	cbz	r3, 16de <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    16ba:	230c      	movs	r3, #12
    16bc:	4363      	muls	r3, r4
    16be:	18ea      	adds	r2, r5, r3
    16c0:	5ce8      	ldrb	r0, [r5, r3]
    16c2:	7851      	ldrb	r1, [r2, #1]
    16c4:	f004 fc5f 	bl	5f86 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    16c8:	2000      	movs	r0, #0
    16ca:	f7ff ff93 	bl	15f4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    16ce:	230c      	movs	r3, #12
    16d0:	435c      	muls	r4, r3
    16d2:	192a      	adds	r2, r5, r4
    16d4:	2300      	movs	r3, #0
    16d6:	512b      	str	r3, [r5, r4]
    16d8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    16dc:	bd70      	pop	{r4, r5, r6, pc}
    16de:	f383 8811 	msr	BASEPRI, r3
    16e2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    16e6:	e7ef      	b.n	16c8 <pm_system_resume+0x48>
    16e8:	20000df4 	.word	0x20000df4
    16ec:	2000072c 	.word	0x2000072c
    16f0:	00005f87 	.word	0x00005f87
    16f4:	20000718 	.word	0x20000718

000016f8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    16f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    16fc:	4b32      	ldr	r3, [pc, #200]	; (17c8 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    16fe:	4a33      	ldr	r2, [pc, #204]	; (17cc <pm_system_suspend+0xd4>)
    1700:	7d1c      	ldrb	r4, [r3, #20]
    1702:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1706:	0963      	lsrs	r3, r4, #5
    1708:	ea4f 0883 	mov.w	r8, r3, lsl #2
    170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1710:	4e2f      	ldr	r6, [pc, #188]	; (17d0 <pm_system_suspend+0xd8>)
    1712:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1716:	f004 091f 	and.w	r9, r4, #31
    171a:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    171e:	f013 0f01 	tst.w	r3, #1
{
    1722:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1724:	d10a      	bne.n	173c <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    1726:	4601      	mov	r1, r0
    1728:	4620      	mov	r0, r4
    172a:	f000 f869 	bl	1800 <pm_policy_next_state>
		if (info != NULL) {
    172e:	b128      	cbz	r0, 173c <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    1730:	c807      	ldmia	r0, {r0, r1, r2}
    1732:	230c      	movs	r3, #12
    1734:	fb03 6304 	mla	r3, r3, r4, r6
    1738:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    173c:	230c      	movs	r3, #12
    173e:	4363      	muls	r3, r4
    1740:	18f2      	adds	r2, r6, r3
    1742:	5cf5      	ldrb	r5, [r6, r3]
    1744:	b92d      	cbnz	r5, 1752 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    1746:	4620      	mov	r0, r4
    1748:	f7ff ff82 	bl	1650 <atomic_clear_bit.constprop.0>
		ret = false;
    174c:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    174e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    1752:	1c7b      	adds	r3, r7, #1
    1754:	d010      	beq.n	1778 <pm_system_suspend+0x80>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1756:	f8d2 c008 	ldr.w	ip, [r2, #8]
    175a:	4d1e      	ldr	r5, [pc, #120]	; (17d4 <pm_system_suspend+0xdc>)
    175c:	4a1e      	ldr	r2, [pc, #120]	; (17d8 <pm_system_suspend+0xe0>)
    175e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1762:	2100      	movs	r1, #0
    1764:	fbec 5100 	umlal	r5, r1, ip, r0
    1768:	2300      	movs	r3, #0
    176a:	4628      	mov	r0, r5
    176c:	f7fe fcc8 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1770:	2101      	movs	r1, #1
    1772:	1a38      	subs	r0, r7, r0
    1774:	f005 fb28 	bl	6dc8 <z_set_timeout_expiry>
	k_sched_lock();
    1778:	f003 fcfc 	bl	5174 <k_sched_lock>
	pm_state_notify(true);
    177c:	2001      	movs	r0, #1
    177e:	f7ff ff39 	bl	15f4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1782:	f3bf 8f5b 	dmb	ish
    1786:	4b15      	ldr	r3, [pc, #84]	; (17dc <pm_system_suspend+0xe4>)
    1788:	4498      	add	r8, r3
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    178a:	2301      	movs	r3, #1
    178c:	fa03 f309 	lsl.w	r3, r3, r9
    1790:	e858 2f00 	ldrex	r2, [r8]
    1794:	431a      	orrs	r2, r3
    1796:	e848 2100 	strex	r1, r2, [r8]
    179a:	2900      	cmp	r1, #0
    179c:	d1f8      	bne.n	1790 <pm_system_suspend+0x98>
    179e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    17a2:	4b0f      	ldr	r3, [pc, #60]	; (17e0 <pm_system_suspend+0xe8>)
    17a4:	b133      	cbz	r3, 17b4 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    17a6:	230c      	movs	r3, #12
    17a8:	4363      	muls	r3, r4
    17aa:	18f2      	adds	r2, r6, r3
    17ac:	5cf0      	ldrb	r0, [r6, r3]
    17ae:	7851      	ldrb	r1, [r2, #1]
    17b0:	f004 fbdd 	bl	5f6e <pm_state_set>
	pm_system_resume();
    17b4:	f7ff ff64 	bl	1680 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    17b8:	4620      	mov	r0, r4
    17ba:	f7ff ff49 	bl	1650 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    17be:	f003 fced 	bl	519c <k_sched_unlock>
	bool ret = true;
    17c2:	2001      	movs	r0, #1
    17c4:	e7c3      	b.n	174e <pm_system_suspend+0x56>
    17c6:	bf00      	nop
    17c8:	20000df4 	.word	0x20000df4
    17cc:	20000714 	.word	0x20000714
    17d0:	20000718 	.word	0x20000718
    17d4:	000f423f 	.word	0x000f423f
    17d8:	000f4240 	.word	0x000f4240
    17dc:	2000072c 	.word	0x2000072c
    17e0:	00005f6f 	.word	0x00005f6f

000017e4 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    17e4:	4b05      	ldr	r3, [pc, #20]	; (17fc <pm_policy_state_lock_is_active+0x18>)
    17e6:	f3bf 8f5b 	dmb	ish
    17ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    17ee:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    17f2:	3800      	subs	r0, #0
    17f4:	bf18      	it	ne
    17f6:	2001      	movne	r0, #1
    17f8:	4770      	bx	lr
    17fa:	bf00      	nop
    17fc:	20000730 	.word	0x20000730

00001800 <pm_policy_next_state>:
{
    1800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1804:	4688      	mov	r8, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1806:	a901      	add	r1, sp, #4
    1808:	f000 f842 	bl	1890 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    180c:	1e44      	subs	r4, r0, #1
    180e:	b224      	sxth	r4, r4
    1810:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1814:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1884 <pm_policy_next_state+0x84>
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1818:	4605      	mov	r5, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    181a:	00a4      	lsls	r4, r4, #2
    181c:	b925      	cbnz	r5, 1828 <pm_policy_next_state+0x28>
	return NULL;
    181e:	462f      	mov	r7, r5
}
    1820:	4638      	mov	r0, r7
    1822:	b003      	add	sp, #12
    1824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    1828:	9b01      	ldr	r3, [sp, #4]
		if (pm_policy_state_lock_is_active(state->state)) {
    182a:	5d18      	ldrb	r0, [r3, r4]
		const struct pm_state_info *state = &cpu_states[i];
    182c:	191f      	adds	r7, r3, r4
		if (pm_policy_state_lock_is_active(state->state)) {
    182e:	f7ff ffd9 	bl	17e4 <pm_policy_state_lock_is_active>
    1832:	4606      	mov	r6, r0
    1834:	bb10      	cbnz	r0, 187c <pm_policy_next_state+0x7c>
    1836:	6878      	ldr	r0, [r7, #4]
    1838:	4a13      	ldr	r2, [pc, #76]	; (1888 <pm_policy_next_state+0x88>)
    183a:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    183e:	46cc      	mov	ip, r9
    1840:	4631      	mov	r1, r6
    1842:	fbe0 c10a 	umlal	ip, r1, r0, sl
    1846:	2300      	movs	r3, #0
    1848:	4660      	mov	r0, ip
    184a:	f7fe fc59 	bl	100 <__aeabi_uldivmod>
    184e:	4683      	mov	fp, r0
    1850:	68b8      	ldr	r0, [r7, #8]
    1852:	4a0d      	ldr	r2, [pc, #52]	; (1888 <pm_policy_next_state+0x88>)
    1854:	46cc      	mov	ip, r9
    1856:	4631      	mov	r1, r6
    1858:	fbe0 c10a 	umlal	ip, r1, r0, sl
    185c:	2300      	movs	r3, #0
    185e:	4660      	mov	r0, ip
    1860:	f7fe fc4e 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1864:	4b09      	ldr	r3, [pc, #36]	; (188c <pm_policy_next_state+0x8c>)
    1866:	681b      	ldr	r3, [r3, #0]
    1868:	1c5a      	adds	r2, r3, #1
    186a:	d001      	beq.n	1870 <pm_policy_next_state+0x70>
    186c:	4283      	cmp	r3, r0
    186e:	d905      	bls.n	187c <pm_policy_next_state+0x7c>
		if ((ticks == K_TICKS_FOREVER) ||
    1870:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    1874:	d0d4      	beq.n	1820 <pm_policy_next_state+0x20>
		    (ticks >= (min_residency + exit_latency))) {
    1876:	4458      	add	r0, fp
		if ((ticks == K_TICKS_FOREVER) ||
    1878:	4540      	cmp	r0, r8
    187a:	d9d1      	bls.n	1820 <pm_policy_next_state+0x20>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    187c:	3d01      	subs	r5, #1
    187e:	b2ad      	uxth	r5, r5
    1880:	3c0c      	subs	r4, #12
    1882:	e7cb      	b.n	181c <pm_policy_next_state+0x1c>
    1884:	000f423f 	.word	0x000f423f
    1888:	000f4240 	.word	0x000f4240
    188c:	20000014 	.word	0x20000014

00001890 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1890:	b908      	cbnz	r0, 1896 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1892:	4b02      	ldr	r3, [pc, #8]	; (189c <pm_state_cpu_get_all+0xc>)
    1894:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1896:	2000      	movs	r0, #0
    1898:	4770      	bx	lr
    189a:	bf00      	nop
    189c:	00007158 	.word	0x00007158

000018a0 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    18a0:	4801      	ldr	r0, [pc, #4]	; (18a8 <nrf_cc3xx_platform_abort_init+0x8>)
    18a2:	f003 bfd5 	b.w	5850 <nrf_cc3xx_platform_set_abort>
    18a6:	bf00      	nop
    18a8:	00007158 	.word	0x00007158

000018ac <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    18ac:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    18ae:	4604      	mov	r4, r0
    18b0:	b918      	cbnz	r0, 18ba <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    18b2:	4b0d      	ldr	r3, [pc, #52]	; (18e8 <mutex_free_platform+0x3c>)
    18b4:	480d      	ldr	r0, [pc, #52]	; (18ec <mutex_free_platform+0x40>)
    18b6:	685b      	ldr	r3, [r3, #4]
    18b8:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    18ba:	6861      	ldr	r1, [r4, #4]
    18bc:	f031 0304 	bics.w	r3, r1, #4
    18c0:	d00c      	beq.n	18dc <mutex_free_platform+0x30>
    18c2:	2908      	cmp	r1, #8
    18c4:	d00a      	beq.n	18dc <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    18c6:	f011 0102 	ands.w	r1, r1, #2
    18ca:	d008      	beq.n	18de <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    18cc:	4808      	ldr	r0, [pc, #32]	; (18f0 <mutex_free_platform+0x44>)
    18ce:	4621      	mov	r1, r4
    18d0:	f005 f94a 	bl	6b68 <k_mem_slab_free>
        mutex->mutex = NULL;
    18d4:	2300      	movs	r3, #0
    18d6:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    18d8:	2300      	movs	r3, #0
    18da:	6063      	str	r3, [r4, #4]
}
    18dc:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    18de:	6820      	ldr	r0, [r4, #0]
    18e0:	2214      	movs	r2, #20
    18e2:	f004 fb38 	bl	5f56 <memset>
    18e6:	e7f7      	b.n	18d8 <mutex_free_platform+0x2c>
    18e8:	20000120 	.word	0x20000120
    18ec:	00007868 	.word	0x00007868
    18f0:	20000c4c 	.word	0x20000c4c

000018f4 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    18f4:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    18f6:	b308      	cbz	r0, 193c <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    18f8:	6843      	ldr	r3, [r0, #4]
    18fa:	2b04      	cmp	r3, #4
    18fc:	d110      	bne.n	1920 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    18fe:	2201      	movs	r2, #1
    1900:	6803      	ldr	r3, [r0, #0]
    1902:	f3bf 8f5b 	dmb	ish
    1906:	e853 1f00 	ldrex	r1, [r3]
    190a:	2900      	cmp	r1, #0
    190c:	d103      	bne.n	1916 <mutex_lock_platform+0x22>
    190e:	e843 2000 	strex	r0, r2, [r3]
    1912:	2800      	cmp	r0, #0
    1914:	d1f7      	bne.n	1906 <mutex_lock_platform+0x12>
    1916:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    191a:	d10b      	bne.n	1934 <mutex_lock_platform+0x40>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    191c:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    191e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1920:	b153      	cbz	r3, 1938 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1922:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    192c:	f003 f912 	bl	4b54 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1930:	2800      	cmp	r0, #0
    1932:	d0f3      	beq.n	191c <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1934:	4803      	ldr	r0, [pc, #12]	; (1944 <mutex_lock_platform+0x50>)
    1936:	e7f2      	b.n	191e <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1938:	4803      	ldr	r0, [pc, #12]	; (1948 <mutex_lock_platform+0x54>)
    193a:	e7f0      	b.n	191e <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    193c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1940:	e7ed      	b.n	191e <mutex_lock_platform+0x2a>
    1942:	bf00      	nop
    1944:	ffff8fe9 	.word	0xffff8fe9
    1948:	ffff8fea 	.word	0xffff8fea

0000194c <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    194c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    194e:	b1c0      	cbz	r0, 1982 <mutex_unlock_platform+0x36>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1950:	6843      	ldr	r3, [r0, #4]
    1952:	2b04      	cmp	r3, #4
    1954:	d110      	bne.n	1978 <mutex_unlock_platform+0x2c>
    1956:	2200      	movs	r2, #0
    1958:	6803      	ldr	r3, [r0, #0]
    195a:	f3bf 8f5b 	dmb	ish
    195e:	e853 1f00 	ldrex	r1, [r3]
    1962:	2901      	cmp	r1, #1
    1964:	d103      	bne.n	196e <mutex_unlock_platform+0x22>
    1966:	e843 2000 	strex	r0, r2, [r3]
    196a:	2800      	cmp	r0, #0
    196c:	d1f7      	bne.n	195e <mutex_unlock_platform+0x12>
    196e:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1972:	d109      	bne.n	1988 <mutex_unlock_platform+0x3c>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1974:	2000      	movs	r0, #0
    }
}
    1976:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1978:	b143      	cbz	r3, 198c <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    197a:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    197c:	f003 f962 	bl	4c44 <z_impl_k_mutex_unlock>
    1980:	e7f8      	b.n	1974 <mutex_unlock_platform+0x28>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1982:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1986:	e7f6      	b.n	1976 <mutex_unlock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1988:	4801      	ldr	r0, [pc, #4]	; (1990 <mutex_unlock_platform+0x44>)
    198a:	e7f4      	b.n	1976 <mutex_unlock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    198c:	4801      	ldr	r0, [pc, #4]	; (1994 <mutex_unlock_platform+0x48>)
    198e:	e7f2      	b.n	1976 <mutex_unlock_platform+0x2a>
    1990:	ffff8fe9 	.word	0xffff8fe9
    1994:	ffff8fea 	.word	0xffff8fea

00001998 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1998:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    199a:	4604      	mov	r4, r0
    199c:	b918      	cbnz	r0, 19a6 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    199e:	4b16      	ldr	r3, [pc, #88]	; (19f8 <mutex_init_platform+0x60>)
    19a0:	4816      	ldr	r0, [pc, #88]	; (19fc <mutex_init_platform+0x64>)
    19a2:	685b      	ldr	r3, [r3, #4]
    19a4:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    19a6:	6863      	ldr	r3, [r4, #4]
    19a8:	2b04      	cmp	r3, #4
    19aa:	d023      	beq.n	19f4 <mutex_init_platform+0x5c>
    19ac:	2b08      	cmp	r3, #8
    19ae:	d021      	beq.n	19f4 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    19b0:	b9cb      	cbnz	r3, 19e6 <mutex_init_platform+0x4e>
    19b2:	6823      	ldr	r3, [r4, #0]
    19b4:	b9bb      	cbnz	r3, 19e6 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    19b6:	4812      	ldr	r0, [pc, #72]	; (1a00 <mutex_init_platform+0x68>)
    19b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    19bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    19c0:	4621      	mov	r1, r4
    19c2:	f002 ffc3 	bl	494c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    19c6:	b908      	cbnz	r0, 19cc <mutex_init_platform+0x34>
    19c8:	6823      	ldr	r3, [r4, #0]
    19ca:	b91b      	cbnz	r3, 19d4 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    19cc:	4b0a      	ldr	r3, [pc, #40]	; (19f8 <mutex_init_platform+0x60>)
    19ce:	480d      	ldr	r0, [pc, #52]	; (1a04 <mutex_init_platform+0x6c>)
    19d0:	685b      	ldr	r3, [r3, #4]
    19d2:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    19d4:	6820      	ldr	r0, [r4, #0]
    19d6:	2214      	movs	r2, #20
    19d8:	2100      	movs	r1, #0
    19da:	f004 fabc 	bl	5f56 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    19de:	6863      	ldr	r3, [r4, #4]
    19e0:	f043 0302 	orr.w	r3, r3, #2
    19e4:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    19e6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    19e8:	f005 f8fc 	bl	6be4 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    19ec:	6863      	ldr	r3, [r4, #4]
    19ee:	f043 0301 	orr.w	r3, r3, #1
    19f2:	6063      	str	r3, [r4, #4]
}
    19f4:	bd10      	pop	{r4, pc}
    19f6:	bf00      	nop
    19f8:	20000120 	.word	0x20000120
    19fc:	00007868 	.word	0x00007868
    1a00:	20000c4c 	.word	0x20000c4c
    1a04:	0000788e 	.word	0x0000788e

00001a08 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1a08:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1a0a:	4906      	ldr	r1, [pc, #24]	; (1a24 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1a0c:	4806      	ldr	r0, [pc, #24]	; (1a28 <nrf_cc3xx_platform_mutex_init+0x20>)
    1a0e:	2340      	movs	r3, #64	; 0x40
    1a10:	2214      	movs	r2, #20
    1a12:	f005 f88e 	bl	6b32 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1a1a:	4904      	ldr	r1, [pc, #16]	; (1a2c <nrf_cc3xx_platform_mutex_init+0x24>)
    1a1c:	4804      	ldr	r0, [pc, #16]	; (1a30 <nrf_cc3xx_platform_mutex_init+0x28>)
    1a1e:	f003 bf77 	b.w	5910 <nrf_cc3xx_platform_set_mutexes>
    1a22:	bf00      	nop
    1a24:	2000074c 	.word	0x2000074c
    1a28:	20000c4c 	.word	0x20000c4c
    1a2c:	00007160 	.word	0x00007160
    1a30:	00007174 	.word	0x00007174

00001a34 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1a34:	4901      	ldr	r1, [pc, #4]	; (1a3c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1a36:	2210      	movs	r2, #16
	str	r2, [r1]
    1a38:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1a3a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1a3c:	e000ed10 	.word	0xe000ed10

00001a40 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1a40:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1a42:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1a44:	f380 8811 	msr	BASEPRI, r0
	isb
    1a48:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1a4c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1a50:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1a52:	b662      	cpsie	i
	isb
    1a54:	f3bf 8f6f 	isb	sy

	bx	lr
    1a58:	4770      	bx	lr
    1a5a:	bf00      	nop

00001a5c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1a5c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1a5e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1a60:	f381 8811 	msr	BASEPRI, r1

	wfe
    1a64:	bf20      	wfe

	msr	BASEPRI, r0
    1a66:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1a6a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1a6c:	4770      	bx	lr
    1a6e:	bf00      	nop

00001a70 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1a70:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1a72:	2800      	cmp	r0, #0
    1a74:	db07      	blt.n	1a86 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a76:	4a04      	ldr	r2, [pc, #16]	; (1a88 <arch_irq_enable+0x18>)
    1a78:	0941      	lsrs	r1, r0, #5
    1a7a:	2301      	movs	r3, #1
    1a7c:	f000 001f 	and.w	r0, r0, #31
    1a80:	4083      	lsls	r3, r0
    1a82:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1a86:	4770      	bx	lr
    1a88:	e000e100 	.word	0xe000e100

00001a8c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1a8c:	4b05      	ldr	r3, [pc, #20]	; (1aa4 <arch_irq_is_enabled+0x18>)
    1a8e:	0942      	lsrs	r2, r0, #5
    1a90:	f000 001f 	and.w	r0, r0, #31
    1a94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1a98:	2301      	movs	r3, #1
    1a9a:	fa03 f000 	lsl.w	r0, r3, r0
}
    1a9e:	4010      	ands	r0, r2
    1aa0:	4770      	bx	lr
    1aa2:	bf00      	nop
    1aa4:	e000e100 	.word	0xe000e100

00001aa8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1aa8:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1aaa:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1aac:	bfa8      	it	ge
    1aae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1ab2:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ab6:	bfb8      	it	lt
    1ab8:	4b06      	ldrlt	r3, [pc, #24]	; (1ad4 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1aba:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1abe:	bfac      	ite	ge
    1ac0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ac4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ac8:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1aca:	bfb4      	ite	lt
    1acc:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ace:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    1ad2:	4770      	bx	lr
    1ad4:	e000ed14 	.word	0xe000ed14

00001ad8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1ad8:	bf30      	wfi
    b z_SysNmiOnReset
    1ada:	f7ff bffd 	b.w	1ad8 <z_SysNmiOnReset>
    1ade:	bf00      	nop

00001ae0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1ae0:	4a0b      	ldr	r2, [pc, #44]	; (1b10 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1ae2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1ae4:	4b0b      	ldr	r3, [pc, #44]	; (1b14 <z_arm_prep_c+0x34>)
    1ae6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1aea:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1aec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1af0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1af4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1af8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1b00:	f002 fe54 	bl	47ac <z_bss_zero>
	z_data_copy();
    1b04:	f003 fc66 	bl	53d4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1b08:	f000 f9c4 	bl	1e94 <z_arm_interrupt_init>
	z_cstart();
    1b0c:	f002 fe92 	bl	4834 <z_cstart>
    1b10:	00000000 	.word	0x00000000
    1b14:	e000ed00 	.word	0xe000ed00

00001b18 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1b18:	4a09      	ldr	r2, [pc, #36]	; (1b40 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1b1a:	490a      	ldr	r1, [pc, #40]	; (1b44 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1b1c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1b1e:	6809      	ldr	r1, [r1, #0]
    1b20:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1b22:	4909      	ldr	r1, [pc, #36]	; (1b48 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1b24:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1b26:	684b      	ldr	r3, [r1, #4]
    1b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1b2c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1b2e:	2300      	movs	r3, #0
    1b30:	f383 8811 	msr	BASEPRI, r3
    1b34:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1b38:	6893      	ldr	r3, [r2, #8]
}
    1b3a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1b3c:	4770      	bx	lr
    1b3e:	bf00      	nop
    1b40:	20000df4 	.word	0x20000df4
    1b44:	00007328 	.word	0x00007328
    1b48:	e000ed00 	.word	0xe000ed00

00001b4c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1b4c:	4912      	ldr	r1, [pc, #72]	; (1b98 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1b4e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1b50:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1b54:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1b56:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1b5a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1b5e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1b60:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1b64:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1b68:	4f0c      	ldr	r7, [pc, #48]	; (1b9c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1b6a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1b6e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1b70:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1b72:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1b74:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1b76:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1b78:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1b7a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1b7e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1b80:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1b82:	f000 fa41 	bl	2008 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1b86:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1b8a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1b8e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1b92:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1b96:	4770      	bx	lr
    ldr r1, =_kernel
    1b98:	20000df4 	.word	0x20000df4
    ldr v4, =_SCS_ICSR
    1b9c:	e000ed04 	.word	0xe000ed04

00001ba0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1ba0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1ba4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1ba6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1baa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1bae:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1bb0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1bb4:	2902      	cmp	r1, #2
    beq _oops
    1bb6:	d0ff      	beq.n	1bb8 <_oops>

00001bb8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1bb8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1bba:	f004 f998 	bl	5eee <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1bbe:	bd01      	pop	{r0, pc}

00001bc0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1bc0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1bc4:	9b00      	ldr	r3, [sp, #0]
    1bc6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1bca:	490a      	ldr	r1, [pc, #40]	; (1bf4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1bcc:	9b01      	ldr	r3, [sp, #4]
    1bce:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1bd2:	9b02      	ldr	r3, [sp, #8]
    1bd4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1bd8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1be0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1be4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1be8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1bea:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1bec:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1bee:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1bf0:	4770      	bx	lr
    1bf2:	bf00      	nop
    1bf4:	00005e13 	.word	0x00005e13

00001bf8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1bf8:	4a09      	ldr	r2, [pc, #36]	; (1c20 <z_check_thread_stack_fail+0x28>)
{
    1bfa:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1bfc:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1bfe:	b170      	cbz	r0, 1c1e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1c00:	f113 0f16 	cmn.w	r3, #22
    1c04:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1c06:	d005      	beq.n	1c14 <z_check_thread_stack_fail+0x1c>
    1c08:	f1a0 0220 	sub.w	r2, r0, #32
    1c0c:	429a      	cmp	r2, r3
    1c0e:	d805      	bhi.n	1c1c <z_check_thread_stack_fail+0x24>
    1c10:	4283      	cmp	r3, r0
    1c12:	d203      	bcs.n	1c1c <z_check_thread_stack_fail+0x24>
		return 0;
    1c14:	4281      	cmp	r1, r0
    1c16:	bf28      	it	cs
    1c18:	2000      	movcs	r0, #0
    1c1a:	4770      	bx	lr
    1c1c:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    1c1e:	4770      	bx	lr
    1c20:	20000df4 	.word	0x20000df4

00001c24 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1c24:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1c26:	4b09      	ldr	r3, [pc, #36]	; (1c4c <arch_switch_to_main_thread+0x28>)
    1c28:	6098      	str	r0, [r3, #8]
{
    1c2a:	460d      	mov	r5, r1
    1c2c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1c2e:	f000 f9eb 	bl	2008 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1c32:	4620      	mov	r0, r4
    1c34:	f385 8809 	msr	PSP, r5
    1c38:	2100      	movs	r1, #0
    1c3a:	b663      	cpsie	if
    1c3c:	f381 8811 	msr	BASEPRI, r1
    1c40:	f3bf 8f6f 	isb	sy
    1c44:	2200      	movs	r2, #0
    1c46:	2300      	movs	r3, #0
    1c48:	f004 f8e3 	bl	5e12 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1c4c:	20000df4 	.word	0x20000df4

00001c50 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1c50:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1c52:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1c54:	4a0b      	ldr	r2, [pc, #44]	; (1c84 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1c56:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1c58:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1c5a:	bf1e      	ittt	ne
	movne	r1, #0
    1c5c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1c5e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1c60:	f004 ffb1 	blne	6bc6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1c64:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1c66:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1c6a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1c6e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1c72:	4905      	ldr	r1, [pc, #20]	; (1c88 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1c74:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1c76:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1c78:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1c7a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1c7e:	4903      	ldr	r1, [pc, #12]	; (1c8c <_isr_wrapper+0x3c>)
	bx r1
    1c80:	4708      	bx	r1
    1c82:	0000      	.short	0x0000
	ldr r2, =_kernel
    1c84:	20000df4 	.word	0x20000df4
	ldr r1, =_sw_isr_table
    1c88:	00006f6c 	.word	0x00006f6c
	ldr r1, =z_arm_int_exit
    1c8c:	00001c91 	.word	0x00001c91

00001c90 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1c90:	4b04      	ldr	r3, [pc, #16]	; (1ca4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1c92:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1c94:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1c96:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1c98:	d003      	beq.n	1ca2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1c9a:	4903      	ldr	r1, [pc, #12]	; (1ca8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1ca0:	600a      	str	r2, [r1, #0]

00001ca2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1ca2:	4770      	bx	lr
	ldr r3, =_kernel
    1ca4:	20000df4 	.word	0x20000df4
	ldr r1, =_SCS_ICSR
    1ca8:	e000ed04 	.word	0xe000ed04

00001cac <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1cac:	4b0d      	ldr	r3, [pc, #52]	; (1ce4 <bus_fault.constprop.0+0x38>)
    1cae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1cb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cb4:	0592      	lsls	r2, r2, #22
    1cb6:	d508      	bpl.n	1cca <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cbc:	0412      	lsls	r2, r2, #16
    1cbe:	d504      	bpl.n	1cca <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1cc0:	b118      	cbz	r0, 1cca <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1cc8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1cca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cce:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1cd0:	4a04      	ldr	r2, [pc, #16]	; (1ce4 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1cd2:	bf58      	it	pl
    1cd4:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1cd6:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1cd8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1cda:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1cde:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1ce0:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1ce2:	4770      	bx	lr
    1ce4:	e000ed00 	.word	0xe000ed00

00001ce8 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1ce8:	4b1d      	ldr	r3, [pc, #116]	; (1d60 <mem_manage_fault.constprop.0+0x78>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1cea:	b570      	push	{r4, r5, r6, lr}
    1cec:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1cee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1cf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cf4:	0792      	lsls	r2, r2, #30
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1cf6:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1cf8:	d522      	bpl.n	1d40 <mem_manage_fault.constprop.0+0x58>
		uint32_t temp = SCB->MMFAR;
    1cfa:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cfe:	0614      	lsls	r4, r2, #24
    1d00:	d51e      	bpl.n	1d40 <mem_manage_fault.constprop.0+0x58>
			if (from_hard_fault != 0) {
    1d02:	b119      	cbz	r1, 1d0c <mem_manage_fault.constprop.0+0x24>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1d0a:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d12:	4c13      	ldr	r4, [pc, #76]	; (1d60 <mem_manage_fault.constprop.0+0x78>)
    1d14:	f012 0f10 	tst.w	r2, #16
    1d18:	d115      	bne.n	1d46 <mem_manage_fault.constprop.0+0x5e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1d1c:	0799      	lsls	r1, r3, #30
    1d1e:	d412      	bmi.n	1d46 <mem_manage_fault.constprop.0+0x5e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1d20:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1d22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1d24:	4a0e      	ldr	r2, [pc, #56]	; (1d60 <mem_manage_fault.constprop.0+0x78>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1d26:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1d28:	bf42      	ittt	mi
    1d2a:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
    1d2c:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
    1d30:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1d32:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1d34:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1d38:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1d3a:	2300      	movs	r3, #0
    1d3c:	702b      	strb	r3, [r5, #0]
}
    1d3e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1d40:	f06f 0015 	mvn.w	r0, #21
    1d44:	e7e2      	b.n	1d0c <mem_manage_fault.constprop.0+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1d46:	6863      	ldr	r3, [r4, #4]
    1d48:	051a      	lsls	r2, r3, #20
    1d4a:	d5e9      	bpl.n	1d20 <mem_manage_fault.constprop.0+0x38>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1d4c:	4631      	mov	r1, r6
    1d4e:	f7ff ff53 	bl	1bf8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1d52:	2800      	cmp	r0, #0
    1d54:	d0e4      	beq.n	1d20 <mem_manage_fault.constprop.0+0x38>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1d56:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1d5a:	2002      	movs	r0, #2
    1d5c:	e7e1      	b.n	1d22 <mem_manage_fault.constprop.0+0x3a>
    1d5e:	bf00      	nop
    1d60:	e000ed00 	.word	0xe000ed00

00001d64 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1d64:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1d66:	4b41      	ldr	r3, [pc, #260]	; (1e6c <z_arm_fault+0x108>)
    1d68:	685b      	ldr	r3, [r3, #4]
{
    1d6a:	b08a      	sub	sp, #40	; 0x28
    1d6c:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1d72:	2600      	movs	r6, #0
    1d74:	f386 8811 	msr	BASEPRI, r6
    1d78:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1d7c:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    1d80:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    1d84:	d111      	bne.n	1daa <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1d86:	f002 000c 	and.w	r0, r2, #12
    1d8a:	2808      	cmp	r0, #8
    1d8c:	d00d      	beq.n	1daa <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1d8e:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1d90:	bf4c      	ite	mi
    1d92:	460d      	movmi	r5, r1
			*nested_exc = true;
    1d94:	2601      	movpl	r6, #1
	*recoverable = false;
    1d96:	2200      	movs	r2, #0
	switch (fault) {
    1d98:	3b03      	subs	r3, #3
	*recoverable = false;
    1d9a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1d9e:	2b03      	cmp	r3, #3
    1da0:	d83b      	bhi.n	1e1a <z_arm_fault+0xb6>
    1da2:	e8df f003 	tbb	[pc, r3]
    1da6:	5304      	.short	0x5304
    1da8:	5b57      	.short	0x5b57
		return NULL;
    1daa:	4635      	mov	r5, r6
    1dac:	e7f3      	b.n	1d96 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1dae:	4b2f      	ldr	r3, [pc, #188]	; (1e6c <z_arm_fault+0x108>)
    1db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1db2:	0791      	lsls	r1, r2, #30
    1db4:	d431      	bmi.n	1e1a <z_arm_fault+0xb6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1db8:	2a00      	cmp	r2, #0
    1dba:	db2e      	blt.n	1e1a <z_arm_fault+0xb6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1dbe:	0052      	lsls	r2, r2, #1
    1dc0:	d52b      	bpl.n	1e1a <z_arm_fault+0xb6>
	uint16_t fault_insn = *(ret_addr - 1);
    1dc2:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1dc4:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    1dc8:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1dcc:	4291      	cmp	r1, r2
    1dce:	d00a      	beq.n	1de6 <z_arm_fault+0x82>
		} else if (SCB_MMFSR != 0) {
    1dd0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    1dd4:	b14a      	cbz	r2, 1dea <z_arm_fault+0x86>
			reason = mem_manage_fault(esf, 1, recoverable);
    1dd6:	f10d 0207 	add.w	r2, sp, #7
    1dda:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1ddc:	4628      	mov	r0, r5
    1dde:	f7ff ff83 	bl	1ce8 <mem_manage_fault.constprop.0>
    1de2:	4604      	mov	r4, r0
		break;
    1de4:	e01a      	b.n	1e1c <z_arm_fault+0xb8>
			reason = esf->basic.r0;
    1de6:	682c      	ldr	r4, [r5, #0]
    1de8:	e018      	b.n	1e1c <z_arm_fault+0xb8>
		} else if (SCB_BFSR != 0) {
    1dea:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    1dee:	b12a      	cbz	r2, 1dfc <z_arm_fault+0x98>
			reason = bus_fault(esf, 1, recoverable);
    1df0:	f10d 0107 	add.w	r1, sp, #7
    1df4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1df6:	f7ff ff59 	bl	1cac <bus_fault.constprop.0>
    1dfa:	e7f2      	b.n	1de2 <z_arm_fault+0x7e>
		} else if (SCB_UFSR != 0) {
    1dfc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    1dfe:	b292      	uxth	r2, r2
    1e00:	b15a      	cbz	r2, 1e1a <z_arm_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1e0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e10:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1e14:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1e18:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
    1e1a:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1e1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1e20:	b993      	cbnz	r3, 1e48 <z_arm_fault+0xe4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1e22:	2220      	movs	r2, #32
    1e24:	4629      	mov	r1, r5
    1e26:	a802      	add	r0, sp, #8
    1e28:	f004 f88a 	bl	5f40 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1e2e:	b1be      	cbz	r6, 1e60 <z_arm_fault+0xfc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1e30:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1e34:	b922      	cbnz	r2, 1e40 <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1e36:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1e3a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1e3e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1e40:	a902      	add	r1, sp, #8
    1e42:	4620      	mov	r0, r4
    1e44:	f004 f851 	bl	5eea <z_arm_fatal_error>
}
    1e48:	b00a      	add	sp, #40	; 0x28
    1e4a:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    1e4c:	f10d 0207 	add.w	r2, sp, #7
    1e50:	2100      	movs	r1, #0
    1e52:	e7c3      	b.n	1ddc <z_arm_fault+0x78>
		reason = bus_fault(esf, 0, recoverable);
    1e54:	f10d 0107 	add.w	r1, sp, #7
    1e58:	2000      	movs	r0, #0
    1e5a:	e7cc      	b.n	1df6 <z_arm_fault+0x92>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e5c:	4b03      	ldr	r3, [pc, #12]	; (1e6c <z_arm_fault+0x108>)
    1e5e:	e7d0      	b.n	1e02 <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1e60:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1e64:	f023 0301 	bic.w	r3, r3, #1
    1e68:	e7e9      	b.n	1e3e <z_arm_fault+0xda>
    1e6a:	bf00      	nop
    1e6c:	e000ed00 	.word	0xe000ed00

00001e70 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1e70:	4a02      	ldr	r2, [pc, #8]	; (1e7c <z_arm_fault_init+0xc>)
    1e72:	6953      	ldr	r3, [r2, #20]
    1e74:	f043 0310 	orr.w	r3, r3, #16
    1e78:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1e7a:	4770      	bx	lr
    1e7c:	e000ed00 	.word	0xe000ed00

00001e80 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1e80:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1e84:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1e88:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1e8a:	4672      	mov	r2, lr
	bl z_arm_fault
    1e8c:	f7ff ff6a 	bl	1d64 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1e90:	bd01      	pop	{r0, pc}
    1e92:	bf00      	nop

00001e94 <z_arm_interrupt_init>:
    1e94:	4804      	ldr	r0, [pc, #16]	; (1ea8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1e96:	2300      	movs	r3, #0
    1e98:	2120      	movs	r1, #32
    1e9a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1e9c:	3301      	adds	r3, #1
    1e9e:	2b30      	cmp	r3, #48	; 0x30
    1ea0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1ea4:	d1f9      	bne.n	1e9a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1ea6:	4770      	bx	lr
    1ea8:	e000e100 	.word	0xe000e100

00001eac <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1eac:	2000      	movs	r0, #0
    msr CONTROL, r0
    1eae:	f380 8814 	msr	CONTROL, r0
    isb
    1eb2:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1eb6:	f004 ffd7 	bl	6e68 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1eba:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1ebc:	490d      	ldr	r1, [pc, #52]	; (1ef4 <__start+0x48>)
    str r0, [r1]
    1ebe:	6008      	str	r0, [r1, #0]
    dsb
    1ec0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1ec4:	480c      	ldr	r0, [pc, #48]	; (1ef8 <__start+0x4c>)
    msr msp, r0
    1ec6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1eca:	f000 f82b 	bl	1f24 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1ece:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1ed0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1ed4:	4809      	ldr	r0, [pc, #36]	; (1efc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1ed6:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1eda:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1edc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1ee0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1ee4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1ee6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1ee8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1eec:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1ef0:	f7ff fdf6 	bl	1ae0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1ef4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1ef8:	20003240 	.word	0x20003240
    ldr r0, =z_interrupt_stacks
    1efc:	200024c0 	.word	0x200024c0

00001f00 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1f00:	4907      	ldr	r1, [pc, #28]	; (1f20 <z_arm_clear_arm_mpu_config+0x20>)
    1f02:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1f06:	2300      	movs	r3, #0
	int num_regions =
    1f08:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1f0c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1f0e:	4293      	cmp	r3, r2
    1f10:	db00      	blt.n	1f14 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1f12:	4770      	bx	lr
  MPU->RNR = rnr;
    1f14:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1f18:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1f1c:	3301      	adds	r3, #1
    1f1e:	e7f6      	b.n	1f0e <z_arm_clear_arm_mpu_config+0xe>
    1f20:	e000ed00 	.word	0xe000ed00

00001f24 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1f24:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1f26:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1f28:	2300      	movs	r3, #0
    1f2a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1f2e:	f7ff ffe7 	bl	1f00 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1f32:	4b14      	ldr	r3, [pc, #80]	; (1f84 <z_arm_init_arch_hw_at_boot+0x60>)
    1f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1f44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1f48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1f4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1f50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1f54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1f58:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1f5c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1f60:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1f64:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1f68:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1f6c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1f70:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1f74:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1f78:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1f7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f7e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1f82:	bd08      	pop	{r3, pc}
    1f84:	e000e100 	.word	0xe000e100

00001f88 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1f88:	4b08      	ldr	r3, [pc, #32]	; (1fac <z_impl_k_thread_abort+0x24>)
    1f8a:	689b      	ldr	r3, [r3, #8]
    1f8c:	4283      	cmp	r3, r0
    1f8e:	d10b      	bne.n	1fa8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1f90:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1f94:	b143      	cbz	r3, 1fa8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1f96:	4b06      	ldr	r3, [pc, #24]	; (1fb0 <z_impl_k_thread_abort+0x28>)
    1f98:	685a      	ldr	r2, [r3, #4]
    1f9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1f9e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1fa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1fa6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1fa8:	f003 b9c2 	b.w	5330 <z_thread_abort>
    1fac:	20000df4 	.word	0x20000df4
    1fb0:	e000ed00 	.word	0xe000ed00

00001fb4 <arch_timing_init>:
 * @return 0
 */
static inline int z_arm_dwt_init(void)
{
	/* Enable tracing */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    1fb4:	4a07      	ldr	r2, [pc, #28]	; (1fd4 <arch_timing_init+0x20>)
    1fb6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    1fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1fbe:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 * @return 0
 */
static inline int z_arm_dwt_init_cycle_counter(void)
{
	/* Clear and enable the cycle counter */
	DWT->CYCCNT = 0;
    1fc2:	4b05      	ldr	r3, [pc, #20]	; (1fd8 <arch_timing_init+0x24>)
    1fc4:	2200      	movs	r2, #0
    1fc6:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    1fc8:	681a      	ldr	r2, [r3, #0]
    1fca:	f042 0201 	orr.w	r2, r2, #1
    1fce:	601a      	str	r2, [r3, #0]

void arch_timing_init(void)
{
	z_arm_dwt_init();
	z_arm_dwt_init_cycle_counter();
}
    1fd0:	4770      	bx	lr
    1fd2:	bf00      	nop
    1fd4:	e000ed00 	.word	0xe000ed00
    1fd8:	e0001000 	.word	0xe0001000

00001fdc <arch_timing_start>:
 *
 * This routine starts the cycle counter and resets its value to zero.
 */
static inline void z_arm_dwt_cycle_count_start(void)
{
	DWT->CYCCNT = 0;
    1fdc:	4b03      	ldr	r3, [pc, #12]	; (1fec <arch_timing_start+0x10>)
    1fde:	2200      	movs	r2, #0
    1fe0:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    1fe2:	681a      	ldr	r2, [r3, #0]
    1fe4:	f042 0201 	orr.w	r2, r2, #1
    1fe8:	601a      	str	r2, [r3, #0]

void arch_timing_start(void)
{
	z_arm_dwt_cycle_count_start();
}
    1fea:	4770      	bx	lr
    1fec:	e0001000 	.word	0xe0001000

00001ff0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1ff0:	4b02      	ldr	r3, [pc, #8]	; (1ffc <z_arm_configure_static_mpu_regions+0xc>)
    1ff2:	4a03      	ldr	r2, [pc, #12]	; (2000 <z_arm_configure_static_mpu_regions+0x10>)
    1ff4:	4803      	ldr	r0, [pc, #12]	; (2004 <z_arm_configure_static_mpu_regions+0x14>)
    1ff6:	2101      	movs	r1, #1
    1ff8:	f000 b870 	b.w	20dc <arm_core_mpu_configure_static_mpu_regions>
    1ffc:	20040000 	.word	0x20040000
    2000:	20000000 	.word	0x20000000
    2004:	00007184 	.word	0x00007184

00002008 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2008:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    200a:	4b05      	ldr	r3, [pc, #20]	; (2020 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    200c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    200e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2010:	4a04      	ldr	r2, [pc, #16]	; (2024 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2012:	2120      	movs	r1, #32
    2014:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2018:	4618      	mov	r0, r3
    201a:	2101      	movs	r1, #1
    201c:	f000 b868 	b.w	20f0 <arm_core_mpu_configure_dynamic_mpu_regions>
    2020:	20000c68 	.word	0x20000c68
    2024:	150b0000 	.word	0x150b0000

00002028 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2028:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    202a:	4e20      	ldr	r6, [pc, #128]	; (20ac <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    202c:	2500      	movs	r5, #0
    202e:	428d      	cmp	r5, r1
    2030:	db01      	blt.n	2036 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2032:	4610      	mov	r0, r2
    2034:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    2036:	6844      	ldr	r4, [r0, #4]
    2038:	b374      	cbz	r4, 2098 <mpu_configure_regions+0x70>
		if (do_sanity_check &&
    203a:	b153      	cbz	r3, 2052 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    203c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2040:	ea14 0f0c 	tst.w	r4, ip
    2044:	d12f      	bne.n	20a6 <mpu_configure_regions+0x7e>
		&&
    2046:	2c1f      	cmp	r4, #31
    2048:	d92d      	bls.n	20a6 <mpu_configure_regions+0x7e>
		((part->start & (part->size - 1U)) == 0U);
    204a:	6807      	ldr	r7, [r0, #0]
		&&
    204c:	ea1c 0f07 	tst.w	ip, r7
    2050:	d129      	bne.n	20a6 <mpu_configure_regions+0x7e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2052:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2054:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2056:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    205a:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    205e:	d91e      	bls.n	209e <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
    2060:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2064:	d81d      	bhi.n	20a2 <mpu_configure_regions+0x7a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2066:	3c01      	subs	r4, #1
    2068:	fab4 f484 	clz	r4, r4
    206c:	f1c4 041f 	rsb	r4, r4, #31
    2070:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2072:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2076:	ea4c 0c04 	orr.w	ip, ip, r4
    207a:	d814      	bhi.n	20a6 <mpu_configure_regions+0x7e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    207c:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    2080:	4314      	orrs	r4, r2
    2082:	f044 0410 	orr.w	r4, r4, #16
    2086:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    208a:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    208e:	f04c 0401 	orr.w	r4, ip, #1
    2092:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    2096:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    2098:	3501      	adds	r5, #1
    209a:	300c      	adds	r0, #12
    209c:	e7c7      	b.n	202e <mpu_configure_regions+0x6>
		return REGION_32B;
    209e:	2408      	movs	r4, #8
    20a0:	e7e7      	b.n	2072 <mpu_configure_regions+0x4a>
		return REGION_4G;
    20a2:	243e      	movs	r4, #62	; 0x3e
    20a4:	e7e5      	b.n	2072 <mpu_configure_regions+0x4a>
			return -EINVAL;
    20a6:	f06f 0215 	mvn.w	r2, #21
    20aa:	e7c2      	b.n	2032 <mpu_configure_regions+0xa>
    20ac:	e000ed00 	.word	0xe000ed00

000020b0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    20b0:	4b04      	ldr	r3, [pc, #16]	; (20c4 <arm_core_mpu_enable+0x14>)
    20b2:	2205      	movs	r2, #5
    20b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    20b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    20bc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    20c0:	4770      	bx	lr
    20c2:	bf00      	nop
    20c4:	e000ed00 	.word	0xe000ed00

000020c8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    20c8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    20cc:	4b02      	ldr	r3, [pc, #8]	; (20d8 <arm_core_mpu_disable+0x10>)
    20ce:	2200      	movs	r2, #0
    20d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    20d4:	4770      	bx	lr
    20d6:	bf00      	nop
    20d8:	e000ed00 	.word	0xe000ed00

000020dc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    20dc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    20de:	4c03      	ldr	r4, [pc, #12]	; (20ec <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    20e0:	2301      	movs	r3, #1
    20e2:	7822      	ldrb	r2, [r4, #0]
    20e4:	f7ff ffa0 	bl	2028 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    20e8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    20ea:	bd10      	pop	{r4, pc}
    20ec:	2000101b 	.word	0x2000101b

000020f0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    20f0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    20f2:	4a09      	ldr	r2, [pc, #36]	; (2118 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    20f4:	2300      	movs	r3, #0
    20f6:	7812      	ldrb	r2, [r2, #0]
    20f8:	f7ff ff96 	bl	2028 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    20fc:	f110 0f16 	cmn.w	r0, #22
    2100:	d002      	beq.n	2108 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    2102:	4a06      	ldr	r2, [pc, #24]	; (211c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2104:	2807      	cmp	r0, #7
    2106:	dd00      	ble.n	210a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2108:	bd08      	pop	{r3, pc}
    210a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    210e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    2112:	3001      	adds	r0, #1
    2114:	e7f6      	b.n	2104 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    2116:	bf00      	nop
    2118:	2000101b 	.word	0x2000101b
    211c:	e000ed00 	.word	0xe000ed00

00002120 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2120:	4914      	ldr	r1, [pc, #80]	; (2174 <z_arm_mpu_init+0x54>)
    2122:	6808      	ldr	r0, [r1, #0]
    2124:	2808      	cmp	r0, #8
{
    2126:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2128:	d821      	bhi.n	216e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    212a:	f7ff ffcd 	bl	20c8 <arm_core_mpu_disable>
    212e:	4c12      	ldr	r4, [pc, #72]	; (2178 <z_arm_mpu_init+0x58>)
    2130:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2132:	2200      	movs	r2, #0
    2134:	4290      	cmp	r0, r2
    2136:	f101 010c 	add.w	r1, r1, #12
    213a:	d105      	bne.n	2148 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    213c:	4b0f      	ldr	r3, [pc, #60]	; (217c <z_arm_mpu_init+0x5c>)
    213e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2140:	f7ff ffb6 	bl	20b0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2144:	2000      	movs	r0, #0
}
    2146:	bd10      	pop	{r4, pc}
    2148:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    214c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2150:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2154:	4313      	orrs	r3, r2
    2156:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    215a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    215e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2162:	f043 0301 	orr.w	r3, r3, #1
    2166:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    216a:	3201      	adds	r2, #1
    216c:	e7e2      	b.n	2134 <z_arm_mpu_init+0x14>
		return -1;
    216e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2172:	e7e8      	b.n	2146 <z_arm_mpu_init+0x26>
    2174:	00007190 	.word	0x00007190
    2178:	e000ed00 	.word	0xe000ed00
    217c:	2000101b 	.word	0x2000101b

00002180 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2180:	4b01      	ldr	r3, [pc, #4]	; (2188 <__stdout_hook_install+0x8>)
    2182:	6018      	str	r0, [r3, #0]
}
    2184:	4770      	bx	lr
    2186:	bf00      	nop
    2188:	20000038 	.word	0x20000038

0000218c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    218c:	b510      	push	{r4, lr}
	__asm__ volatile(
    218e:	f04f 0320 	mov.w	r3, #32
    2192:	f3ef 8011 	mrs	r0, BASEPRI
    2196:	f383 8812 	msr	BASEPRI_MAX, r3
    219a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    219e:	4a11      	ldr	r2, [pc, #68]	; (21e4 <nordicsemi_nrf52_init+0x58>)
    21a0:	2301      	movs	r3, #1
    21a2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    21a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    21aa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    21ae:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    21b2:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    21b6:	2c08      	cmp	r4, #8
    21b8:	d108      	bne.n	21cc <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    21ba:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    21be:	2905      	cmp	r1, #5
    21c0:	d804      	bhi.n	21cc <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    21c2:	4c09      	ldr	r4, [pc, #36]	; (21e8 <nordicsemi_nrf52_init+0x5c>)
    21c4:	5c61      	ldrb	r1, [r4, r1]
    21c6:	b109      	cbz	r1, 21cc <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    21c8:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    21cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21d0:	2201      	movs	r2, #1
    21d2:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    21d6:	f380 8811 	msr	BASEPRI, r0
    21da:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    21de:	2000      	movs	r0, #0
    21e0:	bd10      	pop	{r4, pc}
    21e2:	bf00      	nop
    21e4:	4001e000 	.word	0x4001e000
    21e8:	000078ca 	.word	0x000078ca

000021ec <sys_arch_reboot>:
    *p_gpregret = val;
    21ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21f0:	b2c0      	uxtb	r0, r0
    21f2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    21f6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    21fa:	4905      	ldr	r1, [pc, #20]	; (2210 <sys_arch_reboot+0x24>)
    21fc:	4b05      	ldr	r3, [pc, #20]	; (2214 <sys_arch_reboot+0x28>)
    21fe:	68ca      	ldr	r2, [r1, #12]
    2200:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2204:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2206:	60cb      	str	r3, [r1, #12]
    2208:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    220c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    220e:	e7fd      	b.n	220c <sys_arch_reboot+0x20>
    2210:	e000ed00 	.word	0xe000ed00
    2214:	05fa0004 	.word	0x05fa0004

00002218 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2218:	b120      	cbz	r0, 2224 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    221a:	4b03      	ldr	r3, [pc, #12]	; (2228 <arch_busy_wait+0x10>)
    221c:	0180      	lsls	r0, r0, #6
    221e:	f043 0301 	orr.w	r3, r3, #1
    2222:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2224:	4770      	bx	lr
    2226:	bf00      	nop
    2228:	00007110 	.word	0x00007110

0000222c <timing_init>:

static bool has_inited;
static atomic_val_t started_ref;

void timing_init(void)
{
    222c:	b510      	push	{r4, lr}
	if (has_inited) {
    222e:	4c04      	ldr	r4, [pc, #16]	; (2240 <timing_init+0x14>)
    2230:	7823      	ldrb	r3, [r4, #0]
    2232:	b91b      	cbnz	r3, 223c <timing_init+0x10>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_init();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_init();
#else
	arch_timing_init();
    2234:	f7ff febe 	bl	1fb4 <arch_timing_init>
#endif

	has_inited = true;
    2238:	2301      	movs	r3, #1
    223a:	7023      	strb	r3, [r4, #0]
}
    223c:	bd10      	pop	{r4, pc}
    223e:	bf00      	nop
    2240:	2000101c 	.word	0x2000101c

00002244 <timing_start>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2244:	4b07      	ldr	r3, [pc, #28]	; (2264 <timing_start+0x20>)
    2246:	f3bf 8f5b 	dmb	ish
    224a:	e853 2f00 	ldrex	r2, [r3]
    224e:	1c51      	adds	r1, r2, #1
    2250:	e843 1000 	strex	r0, r1, [r3]
    2254:	2800      	cmp	r0, #0
    2256:	d1f8      	bne.n	224a <timing_start+0x6>
    2258:	f3bf 8f5b 	dmb	ish

void timing_start(void)
{
	if (atomic_inc(&started_ref) != 0) {
    225c:	b90a      	cbnz	r2, 2262 <timing_start+0x1e>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_start();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_start();
#else
	arch_timing_start();
    225e:	f7ff bebd 	b.w	1fdc <arch_timing_start>
#endif
}
    2262:	4770      	bx	lr
    2264:	20000c74 	.word	0x20000c74

00002268 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2268:	4b08      	ldr	r3, [pc, #32]	; (228c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    226a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    226c:	1ac3      	subs	r3, r0, r3
{
    226e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2270:	4907      	ldr	r1, [pc, #28]	; (2290 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    2272:	109b      	asrs	r3, r3, #2
{
    2274:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2276:	4359      	muls	r1, r3
    2278:	4806      	ldr	r0, [pc, #24]	; (2294 <onoff_stop+0x2c>)
    227a:	2240      	movs	r2, #64	; 0x40
    227c:	f003 fea5 	bl	5fca <stop>
	notify(mgr, res);
    2280:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2282:	4601      	mov	r1, r0
	notify(mgr, res);
    2284:	4620      	mov	r0, r4
}
    2286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    228a:	4718      	bx	r3
    228c:	20000c8c 	.word	0x20000c8c
    2290:	b6db6db7 	.word	0xb6db6db7
    2294:	00006edc 	.word	0x00006edc

00002298 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2298:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    229a:	4c0c      	ldr	r4, [pc, #48]	; (22cc <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    229c:	4a0c      	ldr	r2, [pc, #48]	; (22d0 <onoff_start+0x38>)
    229e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    22a0:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    22a2:	9300      	str	r3, [sp, #0]
{
    22a4:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    22a6:	460b      	mov	r3, r1
    22a8:	490a      	ldr	r1, [pc, #40]	; (22d4 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    22aa:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    22ac:	4361      	muls	r1, r4
{
    22ae:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    22b0:	4809      	ldr	r0, [pc, #36]	; (22d8 <onoff_start+0x40>)
    22b2:	f003 feb7 	bl	6024 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    22b6:	1e01      	subs	r1, r0, #0
    22b8:	da05      	bge.n	22c6 <onoff_start+0x2e>
		notify(mgr, err);
    22ba:	4630      	mov	r0, r6
    22bc:	462b      	mov	r3, r5
	}
}
    22be:	b002      	add	sp, #8
    22c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    22c4:	4718      	bx	r3
}
    22c6:	b002      	add	sp, #8
    22c8:	bd70      	pop	{r4, r5, r6, pc}
    22ca:	bf00      	nop
    22cc:	20000c8c 	.word	0x20000c8c
    22d0:	00006091 	.word	0x00006091
    22d4:	b6db6db7 	.word	0xb6db6db7
    22d8:	00006edc 	.word	0x00006edc

000022dc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    22dc:	2200      	movs	r2, #0
{
    22de:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    22e0:	2101      	movs	r1, #1
{
    22e2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    22e4:	4610      	mov	r0, r2
    22e6:	f7ff fbdf 	bl	1aa8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    22ea:	480f      	ldr	r0, [pc, #60]	; (2328 <clk_init+0x4c>)
    22ec:	f001 fb74 	bl	39d8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    22f0:	4b0e      	ldr	r3, [pc, #56]	; (232c <clk_init+0x50>)
    22f2:	4298      	cmp	r0, r3
    22f4:	d115      	bne.n	2322 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    22f6:	f004 faa3 	bl	6840 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    22fa:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    22fc:	490c      	ldr	r1, [pc, #48]	; (2330 <clk_init+0x54>)
    22fe:	4630      	mov	r0, r6
    2300:	f003 fd1c 	bl	5d3c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2304:	2800      	cmp	r0, #0
    2306:	db0b      	blt.n	2320 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    2308:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    230a:	4909      	ldr	r1, [pc, #36]	; (2330 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    230c:	2501      	movs	r5, #1
    230e:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2310:	f104 001c 	add.w	r0, r4, #28
    2314:	f003 fd12 	bl	5d3c <onoff_manager_init>
		if (err < 0) {
    2318:	2800      	cmp	r0, #0
    231a:	db01      	blt.n	2320 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    231c:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    231e:	2000      	movs	r0, #0
}
    2320:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2322:	f06f 0004 	mvn.w	r0, #4
    2326:	e7fb      	b.n	2320 <clk_init+0x44>
    2328:	00002369 	.word	0x00002369
    232c:	0bad0000 	.word	0x0bad0000
    2330:	000071b0 	.word	0x000071b0

00002334 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2334:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2336:	230c      	movs	r3, #12
    2338:	4809      	ldr	r0, [pc, #36]	; (2360 <clkstarted_handle.constprop.0+0x2c>)
    233a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    233c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    233e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2340:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2344:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2346:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2348:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    234a:	4418      	add	r0, r3
    234c:	f003 fe2a 	bl	5fa4 <set_on_state>
	if (callback) {
    2350:	b12d      	cbz	r5, 235e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2352:	4632      	mov	r2, r6
    2354:	462b      	mov	r3, r5
    2356:	4803      	ldr	r0, [pc, #12]	; (2364 <clkstarted_handle.constprop.0+0x30>)
}
    2358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    235c:	4718      	bx	r3
}
    235e:	bd70      	pop	{r4, r5, r6, pc}
    2360:	20000c8c 	.word	0x20000c8c
    2364:	00006edc 	.word	0x00006edc

00002368 <clock_event_handler>:
	switch (event) {
    2368:	b110      	cbz	r0, 2370 <clock_event_handler+0x8>
    236a:	2801      	cmp	r0, #1
    236c:	d004      	beq.n	2378 <clock_event_handler+0x10>
    236e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2370:	4b03      	ldr	r3, [pc, #12]	; (2380 <clock_event_handler+0x18>)
    2372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2374:	075b      	lsls	r3, r3, #29
    2376:	d101      	bne.n	237c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2378:	f7ff bfdc 	b.w	2334 <clkstarted_handle.constprop.0>
}
    237c:	4770      	bx	lr
    237e:	bf00      	nop
    2380:	20000c8c 	.word	0x20000c8c

00002384 <generic_hfclk_start>:
{
    2384:	b508      	push	{r3, lr}
	__asm__ volatile(
    2386:	f04f 0320 	mov.w	r3, #32
    238a:	f3ef 8111 	mrs	r1, BASEPRI
    238e:	f383 8812 	msr	BASEPRI_MAX, r3
    2392:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2396:	4a12      	ldr	r2, [pc, #72]	; (23e0 <generic_hfclk_start+0x5c>)
    2398:	6813      	ldr	r3, [r2, #0]
    239a:	f043 0002 	orr.w	r0, r3, #2
    239e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    23a0:	07da      	lsls	r2, r3, #31
    23a2:	d408      	bmi.n	23b6 <generic_hfclk_start+0x32>
	__asm__ volatile(
    23a4:	f381 8811 	msr	BASEPRI, r1
    23a8:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    23ac:	2001      	movs	r0, #1
}
    23ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    23b2:	f004 ba52 	b.w	685a <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    23b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23ba:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    23be:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    23c2:	07d3      	lsls	r3, r2, #31
    23c4:	d5ee      	bpl.n	23a4 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    23c6:	4807      	ldr	r0, [pc, #28]	; (23e4 <generic_hfclk_start+0x60>)
    23c8:	f003 fdec 	bl	5fa4 <set_on_state>
    23cc:	f381 8811 	msr	BASEPRI, r1
    23d0:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    23d4:	2000      	movs	r0, #0
}
    23d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    23da:	f7ff bfab 	b.w	2334 <clkstarted_handle.constprop.0>
    23de:	bf00      	nop
    23e0:	20000cdc 	.word	0x20000cdc
    23e4:	20000ccc 	.word	0x20000ccc

000023e8 <api_blocking_start>:
{
    23e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    23ea:	2200      	movs	r2, #0
    23ec:	2301      	movs	r3, #1
    23ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    23f2:	4a09      	ldr	r2, [pc, #36]	; (2418 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    23f4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    23f8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    23fa:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    23fe:	f003 fe40 	bl	6082 <api_start>
	if (err < 0) {
    2402:	2800      	cmp	r0, #0
    2404:	db05      	blt.n	2412 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    240a:	2300      	movs	r3, #0
    240c:	4668      	mov	r0, sp
    240e:	f002 fc7b 	bl	4d08 <z_impl_k_sem_take>
}
    2412:	b005      	add	sp, #20
    2414:	f85d fb04 	ldr.w	pc, [sp], #4
    2418:	000060af 	.word	0x000060af

0000241c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    241c:	4b09      	ldr	r3, [pc, #36]	; (2444 <generic_hfclk_stop+0x28>)
    241e:	f3bf 8f5b 	dmb	ish
    2422:	e853 2f00 	ldrex	r2, [r3]
    2426:	f022 0102 	bic.w	r1, r2, #2
    242a:	e843 1000 	strex	r0, r1, [r3]
    242e:	2800      	cmp	r0, #0
    2430:	d1f7      	bne.n	2422 <generic_hfclk_stop+0x6>
    2432:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2436:	07d3      	lsls	r3, r2, #31
    2438:	d402      	bmi.n	2440 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    243a:	2001      	movs	r0, #1
    243c:	f004 ba49 	b.w	68d2 <nrfx_clock_stop>
}
    2440:	4770      	bx	lr
    2442:	bf00      	nop
    2444:	20000cdc 	.word	0x20000cdc

00002448 <z_nrf_clock_control_lf_on>:
{
    2448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    244c:	4938      	ldr	r1, [pc, #224]	; (2530 <z_nrf_clock_control_lf_on+0xe8>)
    244e:	f3bf 8f5b 	dmb	ish
    2452:	4607      	mov	r7, r0
    2454:	2201      	movs	r2, #1
    2456:	e851 3f00 	ldrex	r3, [r1]
    245a:	e841 2000 	strex	r0, r2, [r1]
    245e:	2800      	cmp	r0, #0
    2460:	d1f9      	bne.n	2456 <z_nrf_clock_control_lf_on+0xe>
    2462:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2466:	b933      	cbnz	r3, 2476 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2468:	4932      	ldr	r1, [pc, #200]	; (2534 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    246a:	4833      	ldr	r0, [pc, #204]	; (2538 <z_nrf_clock_control_lf_on+0xf0>)
    246c:	604b      	str	r3, [r1, #4]
    246e:	60cb      	str	r3, [r1, #12]
    2470:	608a      	str	r2, [r1, #8]
    2472:	f003 fc76 	bl	5d62 <onoff_request>
	switch (start_mode) {
    2476:	1e7b      	subs	r3, r7, #1
    2478:	2b01      	cmp	r3, #1
    247a:	d82b      	bhi.n	24d4 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    247c:	2f01      	cmp	r7, #1
    247e:	d107      	bne.n	2490 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2484:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2488:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    248c:	2b01      	cmp	r3, #1
    248e:	d021      	beq.n	24d4 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2490:	f004 fb93 	bl	6bba <k_is_in_isr>
    2494:	4605      	mov	r5, r0
    2496:	b9f8      	cbnz	r0, 24d8 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    2498:	4b28      	ldr	r3, [pc, #160]	; (253c <z_nrf_clock_control_lf_on+0xf4>)
    249a:	781b      	ldrb	r3, [r3, #0]
    249c:	b1e3      	cbz	r3, 24d8 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    249e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    24a2:	2202      	movs	r2, #2
    24a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    24a8:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24aa:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2540 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    24ae:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    24b2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    24b6:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    24ba:	03d2      	lsls	r2, r2, #15
    24bc:	d516      	bpl.n	24ec <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    24be:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    24c2:	2b01      	cmp	r3, #1
    24c4:	d001      	beq.n	24ca <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    24c6:	2f01      	cmp	r7, #1
    24c8:	d110      	bne.n	24ec <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    24ca:	b35d      	cbz	r5, 2524 <z_nrf_clock_control_lf_on+0xdc>
    24cc:	f386 8811 	msr	BASEPRI, r6
    24d0:	f3bf 8f6f 	isb	sy
}
    24d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    24d8:	f04f 0320 	mov.w	r3, #32
    24dc:	f3ef 8611 	mrs	r6, BASEPRI
    24e0:	f383 8812 	msr	BASEPRI_MAX, r3
    24e4:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    24e8:	2501      	movs	r5, #1
    24ea:	e7de      	b.n	24aa <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    24ec:	b1ad      	cbz	r5, 251a <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    24ee:	4630      	mov	r0, r6
    24f0:	f7ff fab4 	bl	1a5c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    24f4:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    24f8:	2b00      	cmp	r3, #0
    24fa:	d1da      	bne.n	24b2 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    24fc:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2500:	2a00      	cmp	r2, #0
    2502:	d0d6      	beq.n	24b2 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2504:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2508:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    250c:	2301      	movs	r3, #1
    250e:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    2512:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2516:	60a3      	str	r3, [r4, #8]
}
    2518:	e7cb      	b.n	24b2 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    251a:	2100      	movs	r1, #0
    251c:	2021      	movs	r0, #33	; 0x21
    251e:	f002 fee7 	bl	52f0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2522:	e7e7      	b.n	24f4 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    2524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2528:	2202      	movs	r2, #2
    252a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    252e:	e7d1      	b.n	24d4 <z_nrf_clock_control_lf_on+0x8c>
    2530:	20000c88 	.word	0x20000c88
    2534:	20000c78 	.word	0x20000c78
    2538:	20000ca8 	.word	0x20000ca8
    253c:	2000142d 	.word	0x2000142d
    2540:	e000e100 	.word	0xe000e100

00002544 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2544:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2546:	4b08      	ldr	r3, [pc, #32]	; (2568 <uart_console_init+0x24>)
    2548:	4808      	ldr	r0, [pc, #32]	; (256c <uart_console_init+0x28>)
    254a:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    254c:	f004 fac8 	bl	6ae0 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2550:	b138      	cbz	r0, 2562 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2552:	4807      	ldr	r0, [pc, #28]	; (2570 <uart_console_init+0x2c>)
    2554:	f7ff fe14 	bl	2180 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2558:	4805      	ldr	r0, [pc, #20]	; (2570 <uart_console_init+0x2c>)
    255a:	f7fe fb63 	bl	c24 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    255e:	2000      	movs	r0, #0
}
    2560:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2562:	f06f 0012 	mvn.w	r0, #18
    2566:	e7fb      	b.n	2560 <uart_console_init+0x1c>
    2568:	20000ce0 	.word	0x20000ce0
    256c:	00006f3c 	.word	0x00006f3c
    2570:	00002575 	.word	0x00002575

00002574 <console_out>:
	if ('\n' == c) {
    2574:	280a      	cmp	r0, #10
{
    2576:	b538      	push	{r3, r4, r5, lr}
    2578:	4d07      	ldr	r5, [pc, #28]	; (2598 <console_out+0x24>)
    257a:	4604      	mov	r4, r0
	if ('\n' == c) {
    257c:	d104      	bne.n	2588 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    257e:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
    2580:	6883      	ldr	r3, [r0, #8]
    2582:	210d      	movs	r1, #13
    2584:	69db      	ldr	r3, [r3, #28]
    2586:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2588:	6828      	ldr	r0, [r5, #0]
    258a:	6883      	ldr	r3, [r0, #8]
    258c:	b2e1      	uxtb	r1, r4
    258e:	69db      	ldr	r3, [r3, #28]
    2590:	4798      	blx	r3
}
    2592:	4620      	mov	r0, r4
    2594:	bd38      	pop	{r3, r4, r5, pc}
    2596:	bf00      	nop
    2598:	20000ce0 	.word	0x20000ce0

0000259c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    259c:	b530      	push	{r4, r5, lr}
	return port->config;
    259e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    25a0:	7b05      	ldrb	r5, [r0, #12]
    25a2:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    25a6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    25aa:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    25ac:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    25b0:	d104      	bne.n	25bc <gpio_nrfx_pin_interrupt_configure+0x20>
		nrfx_gpiote_trigger_disable(abs_pin);
    25b2:	4620      	mov	r0, r4
    25b4:	f001 fc90 	bl	3ed8 <nrfx_gpiote_trigger_disable>

		return 0;
    25b8:	2000      	movs	r0, #0
    25ba:	e04a      	b.n	2652 <gpio_nrfx_pin_interrupt_configure+0xb6>
	}

	nrfx_gpiote_trigger_config_t trigger_config = {
    25bc:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    25be:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    25c2:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    25c6:	d114      	bne.n	25f2 <gpio_nrfx_pin_interrupt_configure+0x56>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    25c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    25cc:	bf0c      	ite	eq
    25ce:	2304      	moveq	r3, #4
    25d0:	2305      	movne	r3, #5
    25d2:	f88d 3008 	strb.w	r3, [sp, #8]
		}

		trigger_config.p_in_channel = &ch;
	}

	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    25d6:	2300      	movs	r3, #0
    25d8:	4619      	mov	r1, r3
    25da:	aa02      	add	r2, sp, #8
    25dc:	4620      	mov	r0, r4
    25de:	f001 fabb 	bl	3b58 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    25e2:	4b20      	ldr	r3, [pc, #128]	; (2664 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    25e4:	4298      	cmp	r0, r3
    25e6:	d13a      	bne.n	265e <gpio_nrfx_pin_interrupt_configure+0xc2>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);
    25e8:	2101      	movs	r1, #1
    25ea:	4620      	mov	r0, r4
    25ec:	f001 fc2c 	bl	3e48 <nrfx_gpiote_trigger_enable>

	return 0;
    25f0:	e7e2      	b.n	25b8 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    25f2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    25f6:	d02e      	beq.n	2656 <gpio_nrfx_pin_interrupt_configure+0xba>
    25f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    25fc:	bf14      	ite	ne
    25fe:	2301      	movne	r3, #1
    2600:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2602:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2606:	6883      	ldr	r3, [r0, #8]
    2608:	40cb      	lsrs	r3, r1
    260a:	07d9      	lsls	r1, r3, #31
    260c:	d4e3      	bmi.n	25d6 <gpio_nrfx_pin_interrupt_configure+0x3a>
    260e:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2612:	d1e0      	bne.n	25d6 <gpio_nrfx_pin_interrupt_configure+0x3a>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    2614:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    2616:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    2618:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    261c:	4a12      	ldr	r2, [pc, #72]	; (2668 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    261e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    2622:	bf18      	it	ne
    2624:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    262c:	07db      	lsls	r3, r3, #31
    262e:	d4d2      	bmi.n	25d6 <gpio_nrfx_pin_interrupt_configure+0x3a>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2630:	f10d 0507 	add.w	r5, sp, #7
    2634:	4629      	mov	r1, r5
    2636:	4620      	mov	r0, r4
    2638:	f001 fbb2 	bl	3da0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    263c:	4b0b      	ldr	r3, [pc, #44]	; (266c <gpio_nrfx_pin_interrupt_configure+0xd0>)
    263e:	4298      	cmp	r0, r3
    2640:	d10b      	bne.n	265a <gpio_nrfx_pin_interrupt_configure+0xbe>
			err = nrfx_gpiote_channel_alloc(&ch);
    2642:	4628      	mov	r0, r5
    2644:	f001 fbfa 	bl	3e3c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2648:	4b06      	ldr	r3, [pc, #24]	; (2664 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    264a:	4298      	cmp	r0, r3
    264c:	d005      	beq.n	265a <gpio_nrfx_pin_interrupt_configure+0xbe>
				return -ENOMEM;
    264e:	f06f 000b 	mvn.w	r0, #11
}
    2652:	b005      	add	sp, #20
    2654:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2656:	2303      	movs	r3, #3
    2658:	e7d3      	b.n	2602 <gpio_nrfx_pin_interrupt_configure+0x66>
		trigger_config.p_in_channel = &ch;
    265a:	9503      	str	r5, [sp, #12]
    265c:	e7bb      	b.n	25d6 <gpio_nrfx_pin_interrupt_configure+0x3a>
		return -EIO;
    265e:	f06f 0004 	mvn.w	r0, #4
    2662:	e7f6      	b.n	2652 <gpio_nrfx_pin_interrupt_configure+0xb6>
    2664:	0bad0000 	.word	0x0bad0000
    2668:	50000300 	.word	0x50000300
    266c:	0bad0004 	.word	0x0bad0004

00002670 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2670:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2672:	f001 fbd3 	bl	3e1c <nrfx_gpiote_is_init>
    2676:	4604      	mov	r4, r0
    2678:	b968      	cbnz	r0, 2696 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    267a:	f001 fba7 	bl	3dcc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    267e:	4b08      	ldr	r3, [pc, #32]	; (26a0 <gpio_nrfx_init+0x30>)
    2680:	4298      	cmp	r0, r3
    2682:	d10a      	bne.n	269a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2684:	4807      	ldr	r0, [pc, #28]	; (26a4 <gpio_nrfx_init+0x34>)
    2686:	4621      	mov	r1, r4
    2688:	f001 fb84 	bl	3d94 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    268c:	4622      	mov	r2, r4
    268e:	2105      	movs	r1, #5
    2690:	2006      	movs	r0, #6
    2692:	f7ff fa09 	bl	1aa8 <z_arm_irq_priority_set>
		return 0;
    2696:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2698:	bd10      	pop	{r4, pc}
		return -EIO;
    269a:	f06f 0004 	mvn.w	r0, #4
    269e:	e7fb      	b.n	2698 <gpio_nrfx_init+0x28>
    26a0:	0bad0000 	.word	0x0bad0000
    26a4:	000026a9 	.word	0x000026a9

000026a8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    26a8:	0942      	lsrs	r2, r0, #5
{
    26aa:	b570      	push	{r4, r5, r6, lr}
    26ac:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    26ae:	d002      	beq.n	26b6 <nrfx_gpio_handler+0xe>
    26b0:	2a01      	cmp	r2, #1
    26b2:	d017      	beq.n	26e4 <nrfx_gpio_handler+0x3c>
}
    26b4:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    26b6:	4e0d      	ldr	r6, [pc, #52]	; (26ec <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    26b8:	6932      	ldr	r2, [r6, #16]
    26ba:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    26bc:	2900      	cmp	r1, #0
    26be:	d0f9      	beq.n	26b4 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    26c0:	f003 031f 	and.w	r3, r3, #31
    26c4:	2501      	movs	r5, #1
    26c6:	680c      	ldr	r4, [r1, #0]
    26c8:	409d      	lsls	r5, r3
    26ca:	2900      	cmp	r1, #0
    26cc:	d0f2      	beq.n	26b4 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    26ce:	688a      	ldr	r2, [r1, #8]
    26d0:	402a      	ands	r2, r5
    26d2:	d002      	beq.n	26da <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    26d4:	684b      	ldr	r3, [r1, #4]
    26d6:	4630      	mov	r0, r6
    26d8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    26da:	b12c      	cbz	r4, 26e8 <nrfx_gpio_handler+0x40>
    26dc:	6823      	ldr	r3, [r4, #0]
    26de:	4621      	mov	r1, r4
    26e0:	461c      	mov	r4, r3
    26e2:	e7f2      	b.n	26ca <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    26e4:	4e02      	ldr	r6, [pc, #8]	; (26f0 <nrfx_gpio_handler+0x48>)
    26e6:	e7e7      	b.n	26b8 <nrfx_gpio_handler+0x10>
    26e8:	4623      	mov	r3, r4
    26ea:	e7f8      	b.n	26de <nrfx_gpio_handler+0x36>
    26ec:	00006f0c 	.word	0x00006f0c
    26f0:	00006ef4 	.word	0x00006ef4

000026f4 <gpio_nrfx_pin_configure>:
{
    26f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    26f8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    26fa:	7b3b      	ldrb	r3, [r7, #12]
    26fc:	f001 051f 	and.w	r5, r1, #31
{
    2700:	b085      	sub	sp, #20
    2702:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2704:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2708:	4614      	mov	r4, r2
    270a:	b9d2      	cbnz	r2, 2742 <gpio_nrfx_pin_configure+0x4e>
	err = nrfx_gpiote_channel_get(pin, &ch);
    270c:	a902      	add	r1, sp, #8
    270e:	4628      	mov	r0, r5
    2710:	f001 fb46 	bl	3da0 <nrfx_gpiote_channel_get>
    2714:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2716:	4628      	mov	r0, r5
    2718:	f001 fc06 	bl	3f28 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    271c:	4b46      	ldr	r3, [pc, #280]	; (2838 <gpio_nrfx_pin_configure+0x144>)
    271e:	4298      	cmp	r0, r3
    2720:	d004      	beq.n	272c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2722:	f06f 0004 	mvn.w	r0, #4
}
    2726:	b005      	add	sp, #20
    2728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    272c:	4284      	cmp	r4, r0
    272e:	d001      	beq.n	2734 <gpio_nrfx_pin_configure+0x40>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2730:	2000      	movs	r0, #0
    2732:	e7f8      	b.n	2726 <gpio_nrfx_pin_configure+0x32>
		err = nrfx_gpiote_channel_free(ch);
    2734:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2738:	f001 fb7a 	bl	3e30 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    273c:	42a0      	cmp	r0, r4
    273e:	d0f7      	beq.n	2730 <gpio_nrfx_pin_configure+0x3c>
    2740:	e7ef      	b.n	2722 <gpio_nrfx_pin_configure+0x2e>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2742:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2746:	f10d 0103 	add.w	r1, sp, #3
    274a:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    274c:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2750:	f001 fb26 	bl	3da0 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2754:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2756:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2758:	aa02      	add	r2, sp, #8
    275a:	4649      	mov	r1, r9
    275c:	4628      	mov	r0, r5
    275e:	f001 f9fb 	bl	3b58 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2762:	4b35      	ldr	r3, [pc, #212]	; (2838 <gpio_nrfx_pin_configure+0x144>)
    2764:	4298      	cmp	r0, r3
    2766:	d002      	beq.n	276e <gpio_nrfx_pin_configure+0x7a>
		return NRF_GPIO_PIN_PULLUP;
    2768:	f06f 0015 	mvn.w	r0, #21
    276c:	e7db      	b.n	2726 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    276e:	4580      	cmp	r8, r0
    2770:	d103      	bne.n	277a <gpio_nrfx_pin_configure+0x86>
		err = nrfx_gpiote_channel_free(ch);
    2772:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2776:	f001 fb5b 	bl	3e30 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    277a:	03a3      	lsls	r3, r4, #14
    277c:	d54c      	bpl.n	2818 <gpio_nrfx_pin_configure+0x124>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    277e:	f240 6306 	movw	r3, #1542	; 0x606
    2782:	4023      	ands	r3, r4
    2784:	f240 2206 	movw	r2, #518	; 0x206
    2788:	4293      	cmp	r3, r2
    278a:	d019      	beq.n	27c0 <gpio_nrfx_pin_configure+0xcc>
    278c:	d80c      	bhi.n	27a8 <gpio_nrfx_pin_configure+0xb4>
    278e:	2b06      	cmp	r3, #6
    2790:	d017      	beq.n	27c2 <gpio_nrfx_pin_configure+0xce>
    2792:	d804      	bhi.n	279e <gpio_nrfx_pin_configure+0xaa>
    2794:	b1ab      	cbz	r3, 27c2 <gpio_nrfx_pin_configure+0xce>
    2796:	2b02      	cmp	r3, #2
    2798:	d1e6      	bne.n	2768 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0S1;
    279a:	2304      	movs	r3, #4
    279c:	e011      	b.n	27c2 <gpio_nrfx_pin_configure+0xce>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    279e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    27a2:	d1e1      	bne.n	2768 <gpio_nrfx_pin_configure+0x74>
    27a4:	2301      	movs	r3, #1
    27a6:	e00c      	b.n	27c2 <gpio_nrfx_pin_configure+0xce>
    27a8:	f240 4202 	movw	r2, #1026	; 0x402
    27ac:	4293      	cmp	r3, r2
    27ae:	d027      	beq.n	2800 <gpio_nrfx_pin_configure+0x10c>
    27b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    27b4:	d026      	beq.n	2804 <gpio_nrfx_pin_configure+0x110>
    27b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    27ba:	d1d5      	bne.n	2768 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_S0H1;
    27bc:	2302      	movs	r3, #2
    27be:	e000      	b.n	27c2 <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0D1;
    27c0:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    27c2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    27c6:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    27ca:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    27ce:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    27d0:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    27d4:	bf54      	ite	pl
    27d6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    27da:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    27dc:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    27de:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    27e2:	d511      	bpl.n	2808 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    27e4:	687a      	ldr	r2, [r7, #4]
    27e6:	2301      	movs	r3, #1
    27e8:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    27ea:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    27ee:	2200      	movs	r2, #0
    27f0:	a901      	add	r1, sp, #4
    27f2:	4628      	mov	r0, r5
    27f4:	f001 fa5e 	bl	3cb4 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    27f8:	4b0f      	ldr	r3, [pc, #60]	; (2838 <gpio_nrfx_pin_configure+0x144>)
    27fa:	4298      	cmp	r0, r3
    27fc:	d098      	beq.n	2730 <gpio_nrfx_pin_configure+0x3c>
    27fe:	e7b3      	b.n	2768 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0H1;
    2800:	2305      	movs	r3, #5
    2802:	e7de      	b.n	27c2 <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0H1;
    2804:	2303      	movs	r3, #3
    2806:	e7dc      	b.n	27c2 <gpio_nrfx_pin_configure+0xce>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2808:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    280a:	bf41      	itttt	mi
    280c:	2301      	movmi	r3, #1
    280e:	687a      	ldrmi	r2, [r7, #4]
    2810:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    2812:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    2816:	e7ea      	b.n	27ee <gpio_nrfx_pin_configure+0xfa>
	if (flags & GPIO_PULL_UP) {
    2818:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    281a:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    281e:	bf54      	ite	pl
    2820:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2824:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2826:	461a      	mov	r2, r3
    2828:	a901      	add	r1, sp, #4
    282a:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    282c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2830:	f001 f992 	bl	3b58 <nrfx_gpiote_input_configure>
    2834:	e7e0      	b.n	27f8 <gpio_nrfx_pin_configure+0x104>
    2836:	bf00      	nop
    2838:	0bad0000 	.word	0x0bad0000

0000283c <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    283c:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
    283e:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    2840:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    2844:	f001 fede 	bl	4604 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twi_bus_recover(config->config.scl,
					      config->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    2848:	4b03      	ldr	r3, [pc, #12]	; (2858 <i2c_nrfx_twi_recover_bus+0x1c>)
    284a:	4298      	cmp	r0, r3
}
    284c:	bf14      	ite	ne
    284e:	f06f 000f 	mvnne.w	r0, #15
    2852:	2000      	moveq	r0, #0
    2854:	bd08      	pop	{r3, pc}
    2856:	bf00      	nop
    2858:	0bad0000 	.word	0x0bad0000

0000285c <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    285c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    285e:	4604      	mov	r4, r0
    2860:	2200      	movs	r2, #0
    2862:	2101      	movs	r1, #1
    2864:	2003      	movs	r0, #3
    2866:	f7ff f91f 	bl	1aa8 <z_arm_irq_priority_set>
    286a:	6863      	ldr	r3, [r4, #4]
    286c:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    286e:	aa01      	add	r2, sp, #4
    2870:	2100      	movs	r1, #0
    2872:	4628      	mov	r0, r5
    2874:	f003 ff16 	bl	66a4 <pinctrl_lookup_state>
	if (ret < 0) {
    2878:	2800      	cmp	r0, #0
    287a:	db14      	blt.n	28a6 <twi_0_init+0x4a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    287c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    287e:	682a      	ldr	r2, [r5, #0]
    2880:	7919      	ldrb	r1, [r3, #4]
    2882:	6818      	ldr	r0, [r3, #0]
    2884:	f003 ff2b 	bl	66de <pinctrl_configure_pins>
    2888:	2800      	cmp	r0, #0
    288a:	db0c      	blt.n	28a6 <twi_0_init+0x4a>
	const struct i2c_nrfx_twi_config *config = dev->config;
    288c:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    288e:	6923      	ldr	r3, [r4, #16]
    2890:	4a06      	ldr	r2, [pc, #24]	; (28ac <twi_0_init+0x50>)
    2892:	f100 0108 	add.w	r1, r0, #8
    2896:	f001 fd43 	bl	4320 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    289a:	4b05      	ldr	r3, [pc, #20]	; (28b0 <twi_0_init+0x54>)
	return 0;
    289c:	4298      	cmp	r0, r3
    289e:	bf14      	ite	ne
    28a0:	f06f 000f 	mvnne.w	r0, #15
    28a4:	2000      	moveq	r0, #0
I2C_NRFX_TWI_DEVICE(0);
    28a6:	b003      	add	sp, #12
    28a8:	bd30      	pop	{r4, r5, pc}
    28aa:	bf00      	nop
    28ac:	000028b5 	.word	0x000028b5
    28b0:	0bad0000 	.word	0x0bad0000

000028b4 <event_handler>:
	switch (p_event->type) {
    28b4:	7803      	ldrb	r3, [r0, #0]
    28b6:	2b01      	cmp	r3, #1
    28b8:	d008      	beq.n	28cc <event_handler+0x18>
    28ba:	2b02      	cmp	r3, #2
    28bc:	d008      	beq.n	28d0 <event_handler+0x1c>
    28be:	b94b      	cbnz	r3, 28d4 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    28c0:	4b05      	ldr	r3, [pc, #20]	; (28d8 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    28c2:	620b      	str	r3, [r1, #32]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    28c4:	f101 0010 	add.w	r0, r1, #16
    28c8:	f002 b9fe 	b.w	4cc8 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    28cc:	4b03      	ldr	r3, [pc, #12]	; (28dc <event_handler+0x28>)
    28ce:	e7f8      	b.n	28c2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    28d0:	4b03      	ldr	r3, [pc, #12]	; (28e0 <event_handler+0x2c>)
    28d2:	e7f6      	b.n	28c2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    28d4:	4b03      	ldr	r3, [pc, #12]	; (28e4 <event_handler+0x30>)
    28d6:	e7f4      	b.n	28c2 <event_handler+0xe>
    28d8:	0bad0000 	.word	0x0bad0000
    28dc:	0bae0001 	.word	0x0bae0001
    28e0:	0bae0002 	.word	0x0bae0002
    28e4:	0bad0001 	.word	0x0bad0001

000028e8 <i2c_nrfx_twi_transfer>:
{
    28e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28ec:	460c      	mov	r4, r1
    28ee:	b089      	sub	sp, #36	; 0x24
    28f0:	4617      	mov	r7, r2
    28f2:	4699      	mov	r9, r3
	const struct i2c_nrfx_twi_config *config = dev->config;
    28f4:	6845      	ldr	r5, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    28f6:	6906      	ldr	r6, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    28f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    28fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2900:	4630      	mov	r0, r6
    2902:	f002 fa01 	bl	4d08 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    2906:	f106 0a10 	add.w	sl, r6, #16
    290a:	2200      	movs	r2, #0
    290c:	2300      	movs	r3, #0
    290e:	4650      	mov	r0, sl
    2910:	f002 f9fa 	bl	4d08 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    2914:	4628      	mov	r0, r5
    2916:	f001 fd61 	bl	43dc <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
    291a:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 29dc <i2c_nrfx_twi_transfer+0xf4>
	for (size_t i = 0; i < num_msgs; i++) {
    291e:	f04f 0800 	mov.w	r8, #0
    2922:	45b8      	cmp	r8, r7
    2924:	d301      	bcc.n	292a <i2c_nrfx_twi_transfer+0x42>
    2926:	2400      	movs	r4, #0
    2928:	e02c      	b.n	2984 <i2c_nrfx_twi_transfer+0x9c>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    292a:	7a23      	ldrb	r3, [r4, #8]
    292c:	9301      	str	r3, [sp, #4]
    292e:	f013 0108 	ands.w	r1, r3, #8
    2932:	d14c      	bne.n	29ce <i2c_nrfx_twi_transfer+0xe6>
		nrfx_twi_xfer_desc_t cur_xfer = {
    2934:	2212      	movs	r2, #18
    2936:	f10d 000e 	add.w	r0, sp, #14
    293a:	9100      	str	r1, [sp, #0]
    293c:	f003 fb0b 	bl	5f56 <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    2940:	9b01      	ldr	r3, [sp, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
    2942:	6860      	ldr	r0, [r4, #4]
    2944:	9004      	str	r0, [sp, #16]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    2946:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    294a:	6820      	ldr	r0, [r4, #0]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    294c:	9900      	ldr	r1, [sp, #0]
		nrfx_twi_xfer_desc_t cur_xfer = {
    294e:	f88d 200c 	strb.w	r2, [sp, #12]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    2952:	f013 0f02 	tst.w	r3, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
    2956:	f88d 900d 	strb.w	r9, [sp, #13]
    295a:	9006      	str	r0, [sp, #24]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    295c:	d11c      	bne.n	2998 <i2c_nrfx_twi_transfer+0xb0>
			if ((i < (num_msgs - 1)) &&
    295e:	1e7b      	subs	r3, r7, #1
    2960:	4543      	cmp	r3, r8
    2962:	d902      	bls.n	296a <i2c_nrfx_twi_transfer+0x82>
    2964:	7d23      	ldrb	r3, [r4, #20]
    2966:	075b      	lsls	r3, r3, #29
    2968:	d518      	bpl.n	299c <i2c_nrfx_twi_transfer+0xb4>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    296a:	bb82      	cbnz	r2, 29ce <i2c_nrfx_twi_transfer+0xe6>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    296c:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    296e:	a903      	add	r1, sp, #12
    2970:	4628      	mov	r0, r5
    2972:	f001 fd5f 	bl	4434 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    2976:	4558      	cmp	r0, fp
    2978:	d012      	beq.n	29a0 <i2c_nrfx_twi_transfer+0xb8>
			if (res == NRFX_ERROR_BUSY) {
    297a:	4b19      	ldr	r3, [pc, #100]	; (29e0 <i2c_nrfx_twi_transfer+0xf8>)
    297c:	4298      	cmp	r0, r3
    297e:	d029      	beq.n	29d4 <i2c_nrfx_twi_transfer+0xec>
				ret = -EIO;
    2980:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
    2984:	4628      	mov	r0, r5
    2986:	f001 fd39 	bl	43fc <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    298a:	4630      	mov	r0, r6
    298c:	f002 f99c 	bl	4cc8 <z_impl_k_sem_give>
}
    2990:	4620      	mov	r0, r4
    2992:	b009      	add	sp, #36	; 0x24
    2994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    2998:	460a      	mov	r2, r1
    299a:	e7e8      	b.n	296e <i2c_nrfx_twi_transfer+0x86>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    299c:	2240      	movs	r2, #64	; 0x40
    299e:	e7e6      	b.n	296e <i2c_nrfx_twi_transfer+0x86>
	return z_impl_k_sem_take(sem, timeout);
    29a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    29a4:	2300      	movs	r3, #0
    29a6:	4650      	mov	r0, sl
    29a8:	f002 f9ae 	bl	4d08 <z_impl_k_sem_take>
		if (ret != 0) {
    29ac:	b138      	cbz	r0, 29be <i2c_nrfx_twi_transfer+0xd6>
			nrfx_twi_disable(&config->twi);
    29ae:	4628      	mov	r0, r5
    29b0:	f001 fd24 	bl	43fc <nrfx_twi_disable>
    29b4:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
    29b8:	f001 fe24 	bl	4604 <nrfx_twi_twim_bus_recover>
    29bc:	e7e0      	b.n	2980 <i2c_nrfx_twi_transfer+0x98>
		res = data->res;
    29be:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    29c0:	455b      	cmp	r3, fp
    29c2:	f104 040c 	add.w	r4, r4, #12
    29c6:	d1db      	bne.n	2980 <i2c_nrfx_twi_transfer+0x98>
	for (size_t i = 0; i < num_msgs; i++) {
    29c8:	f108 0801 	add.w	r8, r8, #1
    29cc:	e7a9      	b.n	2922 <i2c_nrfx_twi_transfer+0x3a>
			ret = -ENOTSUP;
    29ce:	f06f 0485 	mvn.w	r4, #133	; 0x85
    29d2:	e7d7      	b.n	2984 <i2c_nrfx_twi_transfer+0x9c>
				ret = -EBUSY;
    29d4:	f06f 040f 	mvn.w	r4, #15
    29d8:	e7d4      	b.n	2984 <i2c_nrfx_twi_transfer+0x9c>
    29da:	bf00      	nop
    29dc:	0bad0000 	.word	0x0bad0000
    29e0:	0bad000b 	.word	0x0bad000b

000029e4 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
    29e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    29e8:	461c      	mov	r4, r3
	return config->uarte_regs;
    29ea:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    29ec:	6907      	ldr	r7, [r0, #16]
{
    29ee:	460e      	mov	r6, r1
    29f0:	4605      	mov	r5, r0
	return config->uarte_regs;
    29f2:	6819      	ldr	r1, [r3, #0]
    29f4:	f04f 0320 	mov.w	r3, #32
    29f8:	f3ef 8811 	mrs	r8, BASEPRI
    29fc:	f383 8812 	msr	BASEPRI_MAX, r3
    2a00:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	int key = irq_lock();

	if (data->async->tx_size) {
    2a04:	68f8      	ldr	r0, [r7, #12]
    2a06:	68c3      	ldr	r3, [r0, #12]
    2a08:	b143      	cbz	r3, 2a1c <uarte_nrfx_tx+0x38>
	__asm__ volatile(
    2a0a:	f388 8811 	msr	BASEPRI, r8
    2a0e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
    2a12:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
    2a16:	b002      	add	sp, #8
    2a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    2a1c:	f44f 0c80 	mov.w	ip, #4194304	; 0x400000
	data->async->tx_size = len;
    2a20:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
    2a22:	6086      	str	r6, [r0, #8]
    2a24:	f8c1 c304 	str.w	ip, [r1, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    2a28:	f006 4160 	and.w	r1, r6, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    2a2c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    2a30:	d110      	bne.n	2a54 <uarte_nrfx_tx+0x70>
		data->async->xfer_len = len;
    2a32:	e9c0 6204 	strd	r6, r2, [r0, #16]
	start_tx_locked(dev, data);
    2a36:	4639      	mov	r1, r7
    2a38:	4628      	mov	r0, r5
    2a3a:	f003 fd0d 	bl	6458 <start_tx_locked>
    2a3e:	f388 8811 	msr	BASEPRI, r8
    2a42:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    2a46:	7afb      	ldrb	r3, [r7, #11]
    2a48:	2b01      	cmp	r3, #1
    2a4a:	d101      	bne.n	2a50 <uarte_nrfx_tx+0x6c>
	    && timeout != SYS_FOREVER_US) {
    2a4c:	1c63      	adds	r3, r4, #1
    2a4e:	d105      	bne.n	2a5c <uarte_nrfx_tx+0x78>
	return 0;
    2a50:	2000      	movs	r0, #0
    2a52:	e7e0      	b.n	2a16 <uarte_nrfx_tx+0x32>
		data->async->tx_cache_offset = 0;
    2a54:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
    2a56:	f003 fcb4 	bl	63c2 <setup_tx_cache.isra.0>
    2a5a:	e7ec      	b.n	2a36 <uarte_nrfx_tx+0x52>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2a5c:	480b      	ldr	r0, [pc, #44]	; (2a8c <uarte_nrfx_tx+0xa8>)
    2a5e:	4a0c      	ldr	r2, [pc, #48]	; (2a90 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    2a60:	68fd      	ldr	r5, [r7, #12]
    2a62:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    2a66:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    2a6a:	2100      	movs	r1, #0
    2a6c:	2300      	movs	r3, #0
    2a6e:	fbc4 0106 	smlal	r0, r1, r4, r6
    2a72:	f7fd fb45 	bl	100 <__aeabi_uldivmod>
    2a76:	3528      	adds	r5, #40	; 0x28
    2a78:	4602      	mov	r2, r0
    2a7a:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    2a7c:	2000      	movs	r0, #0
    2a7e:	2100      	movs	r1, #0
    2a80:	e9cd 0100 	strd	r0, r1, [sp]
    2a84:	4628      	mov	r0, r5
    2a86:	f002 fe43 	bl	5710 <z_impl_k_timer_start>
    2a8a:	e7e1      	b.n	2a50 <uarte_nrfx_tx+0x6c>
    2a8c:	000f423f 	.word	0x000f423f
    2a90:	000f4240 	.word	0x000f4240

00002a94 <uarte_nrfx_configure>:
{
    2a94:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    2a96:	794b      	ldrb	r3, [r1, #5]
    2a98:	2b01      	cmp	r3, #1
    2a9a:	d026      	beq.n	2aea <uarte_nrfx_configure+0x56>
    2a9c:	2b03      	cmp	r3, #3
    2a9e:	d121      	bne.n	2ae4 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2aa0:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2aa2:	798b      	ldrb	r3, [r1, #6]
    2aa4:	2b03      	cmp	r3, #3
    2aa6:	d11d      	bne.n	2ae4 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    2aa8:	79cc      	ldrb	r4, [r1, #7]
    2aaa:	b10c      	cbz	r4, 2ab0 <uarte_nrfx_configure+0x1c>
    2aac:	2c01      	cmp	r4, #1
    2aae:	d119      	bne.n	2ae4 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    2ab0:	790a      	ldrb	r2, [r1, #4]
    2ab2:	b112      	cbz	r2, 2aba <uarte_nrfx_configure+0x26>
    2ab4:	2a02      	cmp	r2, #2
    2ab6:	d115      	bne.n	2ae4 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2ab8:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2aba:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2abc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2abe:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2ac2:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2ac4:	d065      	beq.n	2b92 <uarte_nrfx_configure+0xfe>
    2ac6:	d82d      	bhi.n	2b24 <uarte_nrfx_configure+0x90>
    2ac8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2acc:	d064      	beq.n	2b98 <uarte_nrfx_configure+0x104>
    2ace:	d816      	bhi.n	2afe <uarte_nrfx_configure+0x6a>
    2ad0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2ad4:	d062      	beq.n	2b9c <uarte_nrfx_configure+0x108>
    2ad6:	d80a      	bhi.n	2aee <uarte_nrfx_configure+0x5a>
    2ad8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2adc:	d061      	beq.n	2ba2 <uarte_nrfx_configure+0x10e>
    2ade:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2ae2:	d061      	beq.n	2ba8 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    2ae4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2ae8:	e052      	b.n	2b90 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2aea:	2600      	movs	r6, #0
    2aec:	e7d9      	b.n	2aa2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2aee:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2af2:	d05c      	beq.n	2bae <uarte_nrfx_configure+0x11a>
    2af4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2af8:	d1f4      	bne.n	2ae4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2afa:	4b37      	ldr	r3, [pc, #220]	; (2bd8 <uarte_nrfx_configure+0x144>)
    2afc:	e03c      	b.n	2b78 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2afe:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2b02:	d057      	beq.n	2bb4 <uarte_nrfx_configure+0x120>
    2b04:	d807      	bhi.n	2b16 <uarte_nrfx_configure+0x82>
    2b06:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2b0a:	d055      	beq.n	2bb8 <uarte_nrfx_configure+0x124>
    2b0c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2b10:	d1e8      	bne.n	2ae4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2b12:	4b32      	ldr	r3, [pc, #200]	; (2bdc <uarte_nrfx_configure+0x148>)
    2b14:	e030      	b.n	2b78 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2b16:	f647 2712 	movw	r7, #31250	; 0x7a12
    2b1a:	42bb      	cmp	r3, r7
    2b1c:	d1e2      	bne.n	2ae4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2b1e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2b22:	e029      	b.n	2b78 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2b24:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2b28:	d048      	beq.n	2bbc <uarte_nrfx_configure+0x128>
    2b2a:	d813      	bhi.n	2b54 <uarte_nrfx_configure+0xc0>
    2b2c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2b30:	d047      	beq.n	2bc2 <uarte_nrfx_configure+0x12e>
    2b32:	d809      	bhi.n	2b48 <uarte_nrfx_configure+0xb4>
    2b34:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2b38:	42bb      	cmp	r3, r7
    2b3a:	d044      	beq.n	2bc6 <uarte_nrfx_configure+0x132>
    2b3c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2b40:	d1d0      	bne.n	2ae4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2b42:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2b46:	e017      	b.n	2b78 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2b48:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2b4c:	d1ca      	bne.n	2ae4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2b4e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2b52:	e011      	b.n	2b78 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2b54:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2b58:	d038      	beq.n	2bcc <uarte_nrfx_configure+0x138>
    2b5a:	d808      	bhi.n	2b6e <uarte_nrfx_configure+0xda>
    2b5c:	4f20      	ldr	r7, [pc, #128]	; (2be0 <uarte_nrfx_configure+0x14c>)
    2b5e:	42bb      	cmp	r3, r7
    2b60:	d037      	beq.n	2bd2 <uarte_nrfx_configure+0x13e>
    2b62:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2b66:	d1bd      	bne.n	2ae4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2b68:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2b6c:	e004      	b.n	2b78 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2b6e:	4f1d      	ldr	r7, [pc, #116]	; (2be4 <uarte_nrfx_configure+0x150>)
    2b70:	42bb      	cmp	r3, r7
    2b72:	d1b7      	bne.n	2ae4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2b74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2b78:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2b7a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
	data->uart_config = *cfg;
    2b7e:	1d03      	adds	r3, r0, #4
    2b80:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2b82:	4334      	orrs	r4, r6
    2b84:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2b86:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2b8a:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    2b8e:	2000      	movs	r0, #0
}
    2b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2b92:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2b96:	e7ef      	b.n	2b78 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2b98:	4b13      	ldr	r3, [pc, #76]	; (2be8 <uarte_nrfx_configure+0x154>)
    2b9a:	e7ed      	b.n	2b78 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2b9c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2ba0:	e7ea      	b.n	2b78 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2ba2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2ba6:	e7e7      	b.n	2b78 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2ba8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2bac:	e7e4      	b.n	2b78 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2bae:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2bb2:	e7e1      	b.n	2b78 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2bb4:	4b0d      	ldr	r3, [pc, #52]	; (2bec <uarte_nrfx_configure+0x158>)
    2bb6:	e7df      	b.n	2b78 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2bb8:	4b0d      	ldr	r3, [pc, #52]	; (2bf0 <uarte_nrfx_configure+0x15c>)
    2bba:	e7dd      	b.n	2b78 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2bbc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2bc0:	e7da      	b.n	2b78 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2bc2:	4b0c      	ldr	r3, [pc, #48]	; (2bf4 <uarte_nrfx_configure+0x160>)
    2bc4:	e7d8      	b.n	2b78 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2bc6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2bca:	e7d5      	b.n	2b78 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2bcc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2bd0:	e7d2      	b.n	2b78 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2bd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2bd6:	e7cf      	b.n	2b78 <uarte_nrfx_configure+0xe4>
    2bd8:	0013b000 	.word	0x0013b000
    2bdc:	004ea000 	.word	0x004ea000
    2be0:	0003d090 	.word	0x0003d090
    2be4:	000f4240 	.word	0x000f4240
    2be8:	00275000 	.word	0x00275000
    2bec:	0075c000 	.word	0x0075c000
    2bf0:	003af000 	.word	0x003af000
    2bf4:	013a9000 	.word	0x013a9000

00002bf8 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    2bfc:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    2c00:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    2c02:	f8d9 4000 	ldr.w	r4, [r9]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2c06:	f8d9 800c 	ldr.w	r8, [r9, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2c0a:	2100      	movs	r1, #0
    2c0c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    2c10:	4607      	mov	r7, r0
	data->dev = dev;
    2c12:	6030      	str	r0, [r6, #0]
	ret = pinctrl_lookup_state(config, id, &state);
    2c14:	aa01      	add	r2, sp, #4
    2c16:	4640      	mov	r0, r8
    2c18:	f003 fd44 	bl	66a4 <pinctrl_lookup_state>
	if (ret < 0) {
    2c1c:	1e05      	subs	r5, r0, #0
    2c1e:	f2c0 8087 	blt.w	2d30 <uarte_instance_init.constprop.0+0x138>
	return pinctrl_apply_state_direct(config, state);
    2c22:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2c24:	f8d8 2000 	ldr.w	r2, [r8]
    2c28:	7919      	ldrb	r1, [r3, #4]
    2c2a:	6818      	ldr	r0, [r3, #0]
    2c2c:	f003 fd57 	bl	66de <pinctrl_configure_pins>
	if (err < 0) {
    2c30:	1e05      	subs	r5, r0, #0
    2c32:	db7d      	blt.n	2d30 <uarte_instance_init.constprop.0+0x138>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    2c34:	1d31      	adds	r1, r6, #4
    2c36:	4638      	mov	r0, r7
    2c38:	f7ff ff2c 	bl	2a94 <uarte_nrfx_configure>
	if (err) {
    2c3c:	4605      	mov	r5, r0
    2c3e:	2800      	cmp	r0, #0
    2c40:	d176      	bne.n	2d30 <uarte_instance_init.constprop.0+0x138>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2c42:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2c46:	0799      	lsls	r1, r3, #30
    2c48:	d51a      	bpl.n	2c80 <uarte_instance_init.constprop.0+0x88>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2c4a:	f106 0016 	add.w	r0, r6, #22
    2c4e:	f001 fa6d 	bl	412c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2c52:	4b45      	ldr	r3, [pc, #276]	; (2d68 <uarte_instance_init.constprop.0+0x170>)
    2c54:	4298      	cmp	r0, r3
    2c56:	f040 8083 	bne.w	2d60 <uarte_instance_init.constprop.0+0x168>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2c5a:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2c5c:	00c3      	lsls	r3, r0, #3
    2c5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2c62:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2c66:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2c6a:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2c6e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2c72:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    2c76:	4a3d      	ldr	r2, [pc, #244]	; (2d6c <uarte_instance_init.constprop.0+0x174>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2c78:	2301      	movs	r3, #1
    2c7a:	4083      	lsls	r3, r0
    2c7c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		}
	}


#ifdef UARTE_ANY_ASYNC
	if (data->async) {
    2c80:	68f3      	ldr	r3, [r6, #12]
    2c82:	2b00      	cmp	r3, #0
    2c84:	d058      	beq.n	2d38 <uarte_instance_init.constprop.0+0x140>
	return config->uarte_regs;
    2c86:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    2c88:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
    2c8c:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    2c8e:	f8d8 000c 	ldr.w	r0, [r8, #12]
    p_reg->INTENSET = mask;
    2c92:	4937      	ldr	r1, [pc, #220]	; (2d70 <uarte_instance_init.constprop.0+0x178>)
    2c94:	2204      	movs	r2, #4
    2c96:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    2c9a:	2201      	movs	r2, #1
    2c9c:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
    2ca0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2ca4:	2108      	movs	r1, #8
    2ca6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2caa:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    2cae:	b1a1      	cbz	r1, 2cda <uarte_instance_init.constprop.0+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2cb0:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2cb2:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    2cb6:	b91a      	cbnz	r2, 2cc0 <uarte_instance_init.constprop.0+0xc8>
    2cb8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    2cbc:	2a00      	cmp	r2, #0
    2cbe:	d0f8      	beq.n	2cb2 <uarte_instance_init.constprop.0+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cc0:	2200      	movs	r2, #0
    2cc2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    2cc6:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    2cca:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    2cce:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    2cd2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    2cd6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    2cda:	4926      	ldr	r1, [pc, #152]	; (2d74 <uarte_instance_init.constprop.0+0x17c>)
    2cdc:	2200      	movs	r2, #0
    2cde:	3088      	adds	r0, #136	; 0x88
    2ce0:	f004 f898 	bl	6e14 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    2ce4:	f8d8 300c 	ldr.w	r3, [r8, #12]
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    2ce8:	f8d8 000c 	ldr.w	r0, [r8, #12]
	timer->user_data = user_data;
    2cec:	f8c3 80bc 	str.w	r8, [r3, #188]	; 0xbc
    2cf0:	4921      	ldr	r1, [pc, #132]	; (2d78 <uarte_instance_init.constprop.0+0x180>)
    2cf2:	2200      	movs	r2, #0
    2cf4:	3028      	adds	r0, #40	; 0x28
    2cf6:	f004 f88d 	bl	6e14 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    2cfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
    2cfe:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2d02:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2d06:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2d08:	bf5c      	itt	pl
    2d0a:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2d0e:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2d12:	06db      	lsls	r3, r3, #27
    2d14:	bf44      	itt	mi
    2d16:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2d1a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2d1e:	3614      	adds	r6, #20
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    2d20:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2d22:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2d26:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d2a:	2301      	movs	r3, #1
    2d2c:	60a3      	str	r3, [r4, #8]
    2d2e:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    2d30:	4628      	mov	r0, r5
    2d32:	b003      	add	sp, #12
    2d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2d38:	2308      	movs	r3, #8
    2d3a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    2d3e:	f899 3008 	ldrb.w	r3, [r9, #8]
    2d42:	2b00      	cmp	r3, #0
    2d44:	d1dd      	bne.n	2d02 <uarte_instance_init.constprop.0+0x10a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d46:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2d4a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2d4e:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2d52:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2d56:	2301      	movs	r3, #1
    2d58:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d5c:	6023      	str	r3, [r4, #0]
}
    2d5e:	e7d0      	b.n	2d02 <uarte_instance_init.constprop.0+0x10a>
		return -EIO;
    2d60:	f06f 0504 	mvn.w	r5, #4
    2d64:	e7e4      	b.n	2d30 <uarte_instance_init.constprop.0+0x138>
    2d66:	bf00      	nop
    2d68:	0bad0000 	.word	0x0bad0000
    2d6c:	4001f000 	.word	0x4001f000
    2d70:	000a0210 	.word	0x000a0210
    2d74:	000065d7 	.word	0x000065d7
    2d78:	0000669b 	.word	0x0000669b

00002d7c <uarte_nrfx_poll_out>:
{
    2d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    2d7e:	6906      	ldr	r6, [r0, #16]
{
    2d80:	4605      	mov	r5, r0
    2d82:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2d84:	f003 ff19 	bl	6bba <k_is_in_isr>
    2d88:	b9b0      	cbnz	r0, 2db8 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    2d8a:	4b28      	ldr	r3, [pc, #160]	; (2e2c <uarte_nrfx_poll_out+0xb0>)
    2d8c:	781b      	ldrb	r3, [r3, #0]
    2d8e:	b19b      	cbz	r3, 2db8 <uarte_nrfx_poll_out+0x3c>
{
    2d90:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2d92:	6868      	ldr	r0, [r5, #4]
    2d94:	f003 fb50 	bl	6438 <is_tx_ready.isra.0>
    2d98:	2800      	cmp	r0, #0
    2d9a:	d134      	bne.n	2e06 <uarte_nrfx_poll_out+0x8a>
    2d9c:	2001      	movs	r0, #1
    2d9e:	f003 fd4d 	bl	683c <nrfx_busy_wait>
    2da2:	3c01      	subs	r4, #1
    2da4:	d1f5      	bne.n	2d92 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    2da6:	2100      	movs	r1, #0
    2da8:	2021      	movs	r0, #33	; 0x21
    2daa:	f002 faa1 	bl	52f0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2dae:	e7ef      	b.n	2d90 <uarte_nrfx_poll_out+0x14>
    2db0:	f384 8811 	msr	BASEPRI, r4
    2db4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    2db8:	f04f 0320 	mov.w	r3, #32
    2dbc:	f3ef 8411 	mrs	r4, BASEPRI
    2dc0:	f383 8812 	msr	BASEPRI_MAX, r3
    2dc4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2dc8:	6869      	ldr	r1, [r5, #4]
    2dca:	4608      	mov	r0, r1
    2dcc:	f003 fb34 	bl	6438 <is_tx_ready.isra.0>
    2dd0:	2800      	cmp	r0, #0
    2dd2:	d0ed      	beq.n	2db0 <uarte_nrfx_poll_out+0x34>
				if (data->async && data->async->tx_size &&
    2dd4:	68f3      	ldr	r3, [r6, #12]
    2dd6:	b153      	cbz	r3, 2dee <uarte_nrfx_poll_out+0x72>
    2dd8:	68da      	ldr	r2, [r3, #12]
    2dda:	b142      	cbz	r2, 2dee <uarte_nrfx_poll_out+0x72>
					data->async->tx_amount < 0) {
    2ddc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    2de0:	2a00      	cmp	r2, #0
    2de2:	da04      	bge.n	2dee <uarte_nrfx_poll_out+0x72>
	return config->uarte_regs;
    2de4:	680a      	ldr	r2, [r1, #0]
    return p_reg->TXD.AMOUNT;
    2de6:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    2dea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
    2dee:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    2df0:	2201      	movs	r2, #1
	data->char_out = c;
    2df2:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    2df6:	4628      	mov	r0, r5
    2df8:	f003 f9d5 	bl	61a6 <tx_start>
	__asm__ volatile(
    2dfc:	f384 8811 	msr	BASEPRI, r4
    2e00:	f3bf 8f6f 	isb	sy
}
    2e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    2e06:	f04f 0320 	mov.w	r3, #32
    2e0a:	f3ef 8411 	mrs	r4, BASEPRI
    2e0e:	f383 8812 	msr	BASEPRI_MAX, r3
    2e12:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2e16:	6868      	ldr	r0, [r5, #4]
    2e18:	f003 fb0e 	bl	6438 <is_tx_ready.isra.0>
    2e1c:	2800      	cmp	r0, #0
    2e1e:	d1e6      	bne.n	2dee <uarte_nrfx_poll_out+0x72>
	__asm__ volatile(
    2e20:	f384 8811 	msr	BASEPRI, r4
    2e24:	f3bf 8f6f 	isb	sy
}
    2e28:	e7bd      	b.n	2da6 <uarte_nrfx_poll_out+0x2a>
    2e2a:	bf00      	nop
    2e2c:	2000142d 	.word	0x2000142d

00002e30 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
    2e30:	6843      	ldr	r3, [r0, #4]
{
    2e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    2e36:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    2e38:	6903      	ldr	r3, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2e3a:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
    2e3e:	b088      	sub	sp, #32
    2e40:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
    2e42:	b169      	cbz	r1, 2e60 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e44:	2200      	movs	r2, #0
    2e46:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    2e4a:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    2e4e:	68da      	ldr	r2, [r3, #12]
    2e50:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    2e54:	3301      	adds	r3, #1
    2e56:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    2e5a:	b008      	add	sp, #32
    2e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2e60:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    2e64:	b313      	cbz	r3, 2eac <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e66:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    2e6a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    2e6e:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    2e72:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
    2e76:	2214      	movs	r2, #20
    2e78:	a803      	add	r0, sp, #12
    2e7a:	f003 f86c 	bl	5f56 <memset>
    2e7e:	2306      	movs	r3, #6
    2e80:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    2e84:	07f3      	lsls	r3, r6, #31
    2e86:	f100 8102 	bmi.w	308e <uarte_nrfx_isr_async+0x25e>
    2e8a:	07b7      	lsls	r7, r6, #30
    2e8c:	f100 8101 	bmi.w	3092 <uarte_nrfx_isr_async+0x262>
    2e90:	0770      	lsls	r0, r6, #29
    2e92:	f100 8100 	bmi.w	3096 <uarte_nrfx_isr_async+0x266>
    2e96:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
    2e9a:	4620      	mov	r0, r4
    2e9c:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    2e9e:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
    2ea2:	f003 f9a6 	bl	61f2 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    2ea6:	4620      	mov	r0, r4
    2ea8:	f003 fa36 	bl	6318 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2eac:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    2eb0:	b37b      	cbz	r3, 2f12 <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
    2eb2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    2eb6:	06d9      	lsls	r1, r3, #27
    2eb8:	d52b      	bpl.n	2f12 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2eba:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = dev->data;
    2ebe:	6927      	ldr	r7, [r4, #16]
    2ec0:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    2ec4:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
    2ec8:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
    2eca:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
    2ecc:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    2ece:	2301      	movs	r3, #1
    2ed0:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
    2ed4:	3088      	adds	r0, #136	; 0x88
    2ed6:	f003 ffa9 	bl	6e2c <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
    2eda:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    2edc:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
    2ee0:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    2ee4:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
    2ee6:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    2eea:	1a1b      	subs	r3, r3, r0
    2eec:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
    2eee:	6f90      	ldr	r0, [r2, #120]	; 0x78
	if (rx_len < 0) {
    2ef0:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
    2ef4:	4408      	add	r0, r1
	if (rx_len > 0) {
    2ef6:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
    2ef8:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
    2efa:	dd02      	ble.n	2f02 <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
    2efc:	4620      	mov	r0, r4
    2efe:	f003 f97f 	bl	6200 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
    2f02:	68f9      	ldr	r1, [r7, #12]
    2f04:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    2f08:	2b00      	cmp	r3, #0
    2f0a:	f040 80c6 	bne.w	309a <uarte_nrfx_isr_async+0x26a>
		data->async->is_in_irq = false;
    2f0e:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f12:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    2f16:	b38b      	cbz	r3, 2f7c <uarte_nrfx_isr_async+0x14c>
    2f18:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    2f1c:	bb76      	cbnz	r6, 2f7c <uarte_nrfx_isr_async+0x14c>
	struct uart_event evt = {
    2f1e:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
    2f20:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f22:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
    2f26:	4631      	mov	r1, r6
    2f28:	a803      	add	r0, sp, #12
    2f2a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    2f2e:	f003 f812 	bl	5f56 <memset>
    2f32:	2303      	movs	r3, #3
	user_callback(dev, &evt);
    2f34:	a903      	add	r1, sp, #12
    2f36:	4620      	mov	r0, r4
	struct uart_event evt = {
    2f38:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    2f3c:	f003 f959 	bl	61f2 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    2f40:	68ff      	ldr	r7, [r7, #12]
    2f42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2f44:	1c5a      	adds	r2, r3, #1
    2f46:	d019      	beq.n	2f7c <uarte_nrfx_isr_async+0x14c>
			      K_USEC(data->async->rx_timeout_slab),
    2f48:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    2f4c:	498b      	ldr	r1, [pc, #556]	; (317c <uarte_nrfx_isr_async+0x34c>)
		data->async->rx_timeout_left = data->async->rx_timeout;
    2f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
    2f52:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
    2f56:	468e      	mov	lr, r1
    2f58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2f5c:	4631      	mov	r1, r6
    2f5e:	fbcc e100 	smlal	lr, r1, ip, r0
    2f62:	4a87      	ldr	r2, [pc, #540]	; (3180 <uarte_nrfx_isr_async+0x350>)
    2f64:	2300      	movs	r3, #0
    2f66:	4670      	mov	r0, lr
    2f68:	f7fd f8ca 	bl	100 <__aeabi_uldivmod>
    2f6c:	4602      	mov	r2, r0
    2f6e:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    2f70:	e9cd 0100 	strd	r0, r1, [sp]
    2f74:	f107 0088 	add.w	r0, r7, #136	; 0x88
    2f78:	f002 fbca 	bl	5710 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f7c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    2f80:	b333      	cbz	r3, 2fd0 <uarte_nrfx_isr_async+0x1a0>
    2f82:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    2f86:	bb1e      	cbnz	r6, 2fd0 <uarte_nrfx_isr_async+0x1a0>
	struct uarte_nrfx_data *data = dev->data;
    2f88:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f8a:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
    2f8e:	68f9      	ldr	r1, [r7, #12]
    2f90:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	const struct uarte_nrfx_config *config = dev->config;
    2f94:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
    2f98:	3160      	adds	r1, #96	; 0x60
    2f9a:	4620      	mov	r0, r4
    2f9c:	f003 f949 	bl	6232 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    2fa0:	68f9      	ldr	r1, [r7, #12]
    2fa2:	4620      	mov	r0, r4
    2fa4:	316c      	adds	r1, #108	; 0x6c
    2fa6:	f003 f944 	bl	6232 <rx_buf_release>
	if (data->async->rx_enabled) {
    2faa:	68fb      	ldr	r3, [r7, #12]
    2fac:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    2fb0:	2a00      	cmp	r2, #0
    2fb2:	f000 809f 	beq.w	30f4 <uarte_nrfx_isr_async+0x2c4>
		data->async->rx_enabled = false;
    2fb6:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2fba:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2fbe:	06d8      	lsls	r0, r3, #27
    2fc0:	d503      	bpl.n	2fca <uarte_nrfx_isr_async+0x19a>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    2fc2:	2102      	movs	r1, #2
    2fc4:	4620      	mov	r0, r4
    2fc6:	f003 fa10 	bl	63ea <async_uart_release>
	notify_rx_disable(dev);
    2fca:	4620      	mov	r0, r4
    2fcc:	f003 f949 	bl	6262 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2fd0:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    2fd4:	b1db      	cbz	r3, 300e <uarte_nrfx_isr_async+0x1de>
    return p_reg->INTENSET & mask;
    2fd6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    2fda:	05d9      	lsls	r1, r3, #23
    2fdc:	d517      	bpl.n	300e <uarte_nrfx_isr_async+0x1de>
	return config->uarte_regs;
    2fde:	6863      	ldr	r3, [r4, #4]
    2fe0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    2fe2:	f04f 0120 	mov.w	r1, #32
    2fe6:	f3ef 8211 	mrs	r2, BASEPRI
    2fea:	f381 8812 	msr	BASEPRI_MAX, r1
    2fee:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2ff2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    2ff6:	b131      	cbz	r1, 3006 <uarte_nrfx_isr_async+0x1d6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ff8:	2100      	movs	r1, #0
    2ffa:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    2ffe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3002:	2101      	movs	r1, #1
    3004:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    3006:	f382 8811 	msr	BASEPRI, r2
    300a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    300e:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    3012:	2b00      	cmp	r3, #0
    3014:	f43f af21 	beq.w	2e5a <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
    3018:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    301c:	025a      	lsls	r2, r3, #9
    301e:	f57f af1c 	bpl.w	2e5a <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
    3022:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
    3024:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3026:	e9d3 7300 	ldrd	r7, r3, [r3]
    302a:	06db      	lsls	r3, r3, #27
    302c:	d467      	bmi.n	30fe <uarte_nrfx_isr_async+0x2ce>
	if (!data->async->tx_buf) {
    302e:	68eb      	ldr	r3, [r5, #12]
    3030:	689b      	ldr	r3, [r3, #8]
    3032:	2b00      	cmp	r3, #0
    3034:	f43f af11 	beq.w	2e5a <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
    3038:	f04f 0320 	mov.w	r3, #32
    303c:	f3ef 8211 	mrs	r2, BASEPRI
    3040:	f383 8812 	msr	BASEPRI_MAX, r3
    3044:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    3048:	68eb      	ldr	r3, [r5, #12]
    304a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    304e:	2900      	cmp	r1, #0
    3050:	bfac      	ite	ge
    3052:	f8d3 60c4 	ldrge.w	r6, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
    3056:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
    305a:	f382 8811 	msr	BASEPRI, r2
    305e:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    3062:	68e8      	ldr	r0, [r5, #12]
    3064:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
    3068:	2b00      	cmp	r3, #0
    306a:	d055      	beq.n	3118 <uarte_nrfx_isr_async+0x2e8>
	__asm__ volatile(
    306c:	f04f 0320 	mov.w	r3, #32
    3070:	f3ef 8611 	mrs	r6, BASEPRI
    3074:	f383 8812 	msr	BASEPRI_MAX, r3
    3078:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    307c:	4629      	mov	r1, r5
    307e:	4620      	mov	r0, r4
    3080:	f003 f9ea 	bl	6458 <start_tx_locked>
	__asm__ volatile(
    3084:	f386 8811 	msr	BASEPRI, r6
    3088:	f3bf 8f6f 	isb	sy
				return;
    308c:	e6e5      	b.n	2e5a <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    308e:	2601      	movs	r6, #1
    3090:	e703      	b.n	2e9a <uarte_nrfx_isr_async+0x6a>
    3092:	2602      	movs	r6, #2
    3094:	e701      	b.n	2e9a <uarte_nrfx_isr_async+0x6a>
    3096:	2604      	movs	r6, #4
    3098:	e6ff      	b.n	2e9a <uarte_nrfx_isr_async+0x6a>
	rx_buf_release(dev, &data->async->rx_buf);
    309a:	3160      	adds	r1, #96	; 0x60
    309c:	4620      	mov	r0, r4
    309e:	f003 f8c8 	bl	6232 <rx_buf_release>
	__asm__ volatile(
    30a2:	f04f 0320 	mov.w	r3, #32
    30a6:	f3ef 8111 	mrs	r1, BASEPRI
    30aa:	f383 8812 	msr	BASEPRI_MAX, r3
    30ae:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    30b2:	68fb      	ldr	r3, [r7, #12]
    30b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    30b6:	b1d2      	cbz	r2, 30ee <uarte_nrfx_isr_async+0x2be>
		data->async->rx_buf = data->async->rx_next_buf;
    30b8:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    30ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    30bc:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    30be:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
    30c0:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
    30c4:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    30c6:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    30ca:	b90b      	cbnz	r3, 30d0 <uarte_nrfx_isr_async+0x2a0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30cc:	2301      	movs	r3, #1
    30ce:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    30d0:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    30d4:	f023 0320 	bic.w	r3, r3, #32
    30d8:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    30dc:	f381 8811 	msr	BASEPRI, r1
    30e0:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    30e4:	68fb      	ldr	r3, [r7, #12]
    30e6:	2200      	movs	r2, #0
    30e8:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    30ec:	e711      	b.n	2f12 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30ee:	2301      	movs	r3, #1
    30f0:	6073      	str	r3, [r6, #4]
}
    30f2:	e7f3      	b.n	30dc <uarte_nrfx_isr_async+0x2ac>
		(void)rx_flush(dev, NULL, 0);
    30f4:	6860      	ldr	r0, [r4, #4]
    30f6:	4611      	mov	r1, r2
    30f8:	f003 f92f 	bl	635a <rx_flush.isra.0>
    30fc:	e75d      	b.n	2fba <uarte_nrfx_isr_async+0x18a>
    p_reg->INTENCLR = mask;
    30fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    3102:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    3106:	2101      	movs	r1, #1
    3108:	4620      	mov	r0, r4
    310a:	f003 f96e 	bl	63ea <async_uart_release>
		if (!data->async->tx_size) {
    310e:	68eb      	ldr	r3, [r5, #12]
    3110:	68db      	ldr	r3, [r3, #12]
    3112:	2b00      	cmp	r3, #0
    3114:	d18b      	bne.n	302e <uarte_nrfx_isr_async+0x1fe>
    3116:	e6a0      	b.n	2e5a <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
    3118:	6882      	ldr	r2, [r0, #8]
    311a:	6903      	ldr	r3, [r0, #16]
    311c:	429a      	cmp	r2, r3
    311e:	d00b      	beq.n	3138 <uarte_nrfx_isr_async+0x308>
		if (amount == data->async->xfer_len) {
    3120:	6942      	ldr	r2, [r0, #20]
			data->async->tx_cache_offset += amount;
    3122:	6a03      	ldr	r3, [r0, #32]
		if (amount == data->async->xfer_len) {
    3124:	42b2      	cmp	r2, r6
			data->async->tx_cache_offset += amount;
    3126:	4433      	add	r3, r6
		if (amount == data->async->xfer_len) {
    3128:	d125      	bne.n	3176 <uarte_nrfx_isr_async+0x346>
			data->async->tx_cache_offset += amount;
    312a:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
    312c:	f003 f949 	bl	63c2 <setup_tx_cache.isra.0>
    3130:	2800      	cmp	r0, #0
    3132:	d19b      	bne.n	306c <uarte_nrfx_isr_async+0x23c>
			amount = data->async->tx_cache_offset;
    3134:	68eb      	ldr	r3, [r5, #12]
    3136:	6a1e      	ldr	r6, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
    3138:	68e8      	ldr	r0, [r5, #12]
    313a:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
    313c:	f003 fe76 	bl	6e2c <z_impl_k_timer_stop>
	struct uart_event evt = {
    3140:	2214      	movs	r2, #20
    3142:	2100      	movs	r1, #0
    3144:	a803      	add	r0, sp, #12
    3146:	f002 ff06 	bl	5f56 <memset>
		.data.tx.buf = data->async->tx_buf,
    314a:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
    314c:	689a      	ldr	r2, [r3, #8]
    314e:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
    3152:	68da      	ldr	r2, [r3, #12]
    3154:	4296      	cmp	r6, r2
		evt.type = UART_TX_ABORTED;
    3156:	bf1c      	itt	ne
    3158:	2201      	movne	r2, #1
    315a:	f88d 200c 	strbne.w	r2, [sp, #12]
    315e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    3162:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    3166:	2200      	movs	r2, #0
    3168:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
    316a:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
    316c:	a903      	add	r1, sp, #12
    316e:	4620      	mov	r0, r4
    3170:	f003 f83f 	bl	61f2 <user_callback>
    3174:	e671      	b.n	2e5a <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
    3176:	461e      	mov	r6, r3
    3178:	e7de      	b.n	3138 <uarte_nrfx_isr_async+0x308>
    317a:	bf00      	nop
    317c:	000f423f 	.word	0x000f423f
    3180:	000f4240 	.word	0x000f4240

00003184 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3184:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3186:	2301      	movs	r3, #1
    3188:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    318a:	4a0e      	ldr	r2, [pc, #56]	; (31c4 <compare_int_lock+0x40>)
    318c:	f3bf 8f5b 	dmb	ish
    3190:	43dc      	mvns	r4, r3
    3192:	e852 1f00 	ldrex	r1, [r2]
    3196:	ea01 0504 	and.w	r5, r1, r4
    319a:	e842 5600 	strex	r6, r5, [r2]
    319e:	2e00      	cmp	r6, #0
    31a0:	d1f7      	bne.n	3192 <compare_int_lock+0xe>
    31a2:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    31a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    31aa:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    31ac:	4806      	ldr	r0, [pc, #24]	; (31c8 <compare_int_lock+0x44>)
    31ae:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    31b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31b6:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    31ba:	420b      	tst	r3, r1
}
    31bc:	bf14      	ite	ne
    31be:	2001      	movne	r0, #1
    31c0:	2000      	moveq	r0, #0
    31c2:	bd70      	pop	{r4, r5, r6, pc}
    31c4:	20000d00 	.word	0x20000d00
    31c8:	40011000 	.word	0x40011000

000031cc <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    31cc:	491b      	ldr	r1, [pc, #108]	; (323c <sys_clock_timeout_handler+0x70>)
{
    31ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31d0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    31d2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    31d6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    31d8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    31dc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    31e0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    31e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    31e6:	d30f      	bcc.n	3208 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    31e8:	f002 f9d8 	bl	559c <sys_clock_announce>
    return p_reg->CC[ch];
    31ec:	00a3      	lsls	r3, r4, #2
    31ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    31f2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    31f6:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    31fa:	4295      	cmp	r5, r2
    31fc:	d11d      	bne.n	323a <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    31fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3202:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    3206:	e012      	b.n	322e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3208:	4b0d      	ldr	r3, [pc, #52]	; (3240 <sys_clock_timeout_handler+0x74>)
    320a:	681b      	ldr	r3, [r3, #0]
    320c:	0a1a      	lsrs	r2, r3, #8
    320e:	061b      	lsls	r3, r3, #24
    3210:	195e      	adds	r6, r3, r5
    3212:	4b0c      	ldr	r3, [pc, #48]	; (3244 <sys_clock_timeout_handler+0x78>)
    3214:	f142 0700 	adc.w	r7, r2, #0
    3218:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    321c:	f002 f9be 	bl	559c <sys_clock_announce>
    return p_reg->CC[ch];
    3220:	4a09      	ldr	r2, [pc, #36]	; (3248 <sys_clock_timeout_handler+0x7c>)
    3222:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    3226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    322a:	429d      	cmp	r5, r3
    322c:	d105      	bne.n	323a <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    322e:	4a06      	ldr	r2, [pc, #24]	; (3248 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3234:	40a3      	lsls	r3, r4
    3236:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    323a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    323c:	200005c0 	.word	0x200005c0
    3240:	20000d04 	.word	0x20000d04
    3244:	200005c8 	.word	0x200005c8
    3248:	40011000 	.word	0x40011000

0000324c <compare_int_unlock>:
	if (key) {
    324c:	b311      	cbz	r1, 3294 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    324e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    3252:	2301      	movs	r3, #1
    3254:	4a10      	ldr	r2, [pc, #64]	; (3298 <compare_int_unlock+0x4c>)
    3256:	4083      	lsls	r3, r0
    3258:	e852 cf00 	ldrex	ip, [r2]
    325c:	ea4c 0c03 	orr.w	ip, ip, r3
    3260:	e842 c100 	strex	r1, ip, [r2]
    3264:	2900      	cmp	r1, #0
    3266:	d1f7      	bne.n	3258 <compare_int_unlock+0xc>
    3268:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    326c:	4a0b      	ldr	r2, [pc, #44]	; (329c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    326e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3272:	4083      	lsls	r3, r0
    3274:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3278:	4b09      	ldr	r3, [pc, #36]	; (32a0 <compare_int_unlock+0x54>)
    327a:	f3bf 8f5b 	dmb	ish
    327e:	681b      	ldr	r3, [r3, #0]
    3280:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3284:	40c3      	lsrs	r3, r0
    3286:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3288:	bf42      	ittt	mi
    328a:	4b06      	ldrmi	r3, [pc, #24]	; (32a4 <compare_int_unlock+0x58>)
    328c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3290:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3294:	4770      	bx	lr
    3296:	bf00      	nop
    3298:	20000d00 	.word	0x20000d00
    329c:	40011000 	.word	0x40011000
    32a0:	20000cfc 	.word	0x20000cfc
    32a4:	e000e100 	.word	0xe000e100

000032a8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    32a8:	4b0d      	ldr	r3, [pc, #52]	; (32e0 <z_nrf_rtc_timer_read+0x38>)
    32aa:	6818      	ldr	r0, [r3, #0]
    32ac:	0a01      	lsrs	r1, r0, #8
    32ae:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    32b0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    32b4:	4b0b      	ldr	r3, [pc, #44]	; (32e4 <z_nrf_rtc_timer_read+0x3c>)
    32b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    32ba:	1818      	adds	r0, r3, r0
    32bc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    32c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    32c4:	d20a      	bcs.n	32dc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    32c6:	4b08      	ldr	r3, [pc, #32]	; (32e8 <z_nrf_rtc_timer_read+0x40>)
    32c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    32cc:	4290      	cmp	r0, r2
    32ce:	eb71 0303 	sbcs.w	r3, r1, r3
    32d2:	d203      	bcs.n	32dc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    32d4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    32d8:	f141 0100 	adc.w	r1, r1, #0
}
    32dc:	4770      	bx	lr
    32de:	bf00      	nop
    32e0:	20000d04 	.word	0x20000d04
    32e4:	40011000 	.word	0x40011000
    32e8:	200005c8 	.word	0x200005c8

000032ec <compare_set>:
{
    32ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32f0:	4614      	mov	r4, r2
    32f2:	461d      	mov	r5, r3
    32f4:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    32f6:	f7ff ff45 	bl	3184 <compare_int_lock>
    32fa:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    32fc:	f7ff ffd4 	bl	32a8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3300:	42a0      	cmp	r0, r4
    3302:	eb71 0305 	sbcs.w	r3, r1, r5
    3306:	d27a      	bcs.n	33fe <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    3308:	4b46      	ldr	r3, [pc, #280]	; (3424 <compare_set+0x138>)
    330a:	1a20      	subs	r0, r4, r0
    330c:	eb65 0101 	sbc.w	r1, r5, r1
    3310:	4298      	cmp	r0, r3
    3312:	f171 0100 	sbcs.w	r1, r1, #0
    3316:	f080 8081 	bcs.w	341c <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    331a:	4b43      	ldr	r3, [pc, #268]	; (3428 <compare_set+0x13c>)
    331c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    3320:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3324:	429d      	cmp	r5, r3
    3326:	bf08      	it	eq
    3328:	4294      	cmpeq	r4, r2
    332a:	d053      	beq.n	33d4 <compare_set+0xe8>
    332c:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    3330:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3334:	f107 0950 	add.w	r9, r7, #80	; 0x50
    3338:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    333c:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3340:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    3344:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    3348:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    334c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    3350:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    3354:	4a35      	ldr	r2, [pc, #212]	; (342c <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3356:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    335a:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    335c:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    335e:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3362:	eba0 000b 	sub.w	r0, r0, fp
    3366:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    336a:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    336e:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3370:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    3374:	d105      	bne.n	3382 <compare_set+0x96>
    3376:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    3378:	2013      	movs	r0, #19
    337a:	f003 fd47 	bl	6e0c <z_impl_k_busy_wait>
    337e:	4a2b      	ldr	r2, [pc, #172]	; (342c <compare_set+0x140>)
    3380:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3382:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    3386:	eba6 000c 	sub.w	r0, r6, ip
    338a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    338e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3392:	bf88      	it	hi
    3394:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3396:	2000      	movs	r0, #0
    3398:	f8c9 0000 	str.w	r0, [r9]
    339c:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    33a0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    33a4:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    33a8:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    33ac:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    33b0:	4583      	cmp	fp, r0
    33b2:	d006      	beq.n	33c2 <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    33b4:	1a30      	subs	r0, r6, r0
    33b6:	3802      	subs	r0, #2
    33b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    33bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    33c0:	d81b      	bhi.n	33fa <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    33c2:	eba6 0608 	sub.w	r6, r6, r8
    33c6:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    33ca:	1936      	adds	r6, r6, r4
    33cc:	f145 0300 	adc.w	r3, r5, #0
    33d0:	4634      	mov	r4, r6
    33d2:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    33d4:	4914      	ldr	r1, [pc, #80]	; (3428 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    33d6:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    33d8:	013b      	lsls	r3, r7, #4
    33da:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    33de:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    33e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    33e2:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    33e4:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    33e8:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    33ea:	4638      	mov	r0, r7
    33ec:	9900      	ldr	r1, [sp, #0]
    33ee:	f7ff ff2d 	bl	324c <compare_int_unlock>
}
    33f2:	4620      	mov	r0, r4
    33f4:	b003      	add	sp, #12
    33f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33fa:	4630      	mov	r0, r6
    33fc:	e7af      	b.n	335e <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    33fe:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3400:	4a0b      	ldr	r2, [pc, #44]	; (3430 <compare_set+0x144>)
    3402:	f3bf 8f5b 	dmb	ish
    3406:	40bb      	lsls	r3, r7
    3408:	e852 0f00 	ldrex	r0, [r2]
    340c:	4318      	orrs	r0, r3
    340e:	e842 0100 	strex	r1, r0, [r2]
    3412:	2900      	cmp	r1, #0
    3414:	d1f8      	bne.n	3408 <compare_set+0x11c>
    3416:	f3bf 8f5b 	dmb	ish
    341a:	e7db      	b.n	33d4 <compare_set+0xe8>
			return -EINVAL;
    341c:	f06f 0415 	mvn.w	r4, #21
    3420:	e7e3      	b.n	33ea <compare_set+0xfe>
    3422:	bf00      	nop
    3424:	01000001 	.word	0x01000001
    3428:	200005b0 	.word	0x200005b0
    342c:	40011000 	.word	0x40011000
    3430:	20000cfc 	.word	0x20000cfc

00003434 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3434:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3436:	4b19      	ldr	r3, [pc, #100]	; (349c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3438:	4d19      	ldr	r5, [pc, #100]	; (34a0 <sys_clock_driver_init+0x6c>)
    343a:	2400      	movs	r4, #0
    343c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3440:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3444:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3448:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    344c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3450:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3454:	4b13      	ldr	r3, [pc, #76]	; (34a4 <sys_clock_driver_init+0x70>)
    3456:	2602      	movs	r6, #2
    3458:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    345c:	2101      	movs	r1, #1
    345e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3462:	2011      	movs	r0, #17
    3464:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3468:	4622      	mov	r2, r4
    346a:	f7fe fb1d 	bl	1aa8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    346e:	2011      	movs	r0, #17
    3470:	f7fe fafe 	bl	1a70 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3474:	4a0c      	ldr	r2, [pc, #48]	; (34a8 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3476:	2301      	movs	r3, #1
    3478:	60ab      	str	r3, [r5, #8]
    347a:	602b      	str	r3, [r5, #0]
    347c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    347e:	4b0b      	ldr	r3, [pc, #44]	; (34ac <sys_clock_driver_init+0x78>)
    3480:	4a0b      	ldr	r2, [pc, #44]	; (34b0 <sys_clock_driver_init+0x7c>)
    3482:	9300      	str	r3, [sp, #0]
    3484:	9401      	str	r4, [sp, #4]
    3486:	2300      	movs	r3, #0
    3488:	4620      	mov	r0, r4
    348a:	f7ff ff2f 	bl	32ec <compare_set>

	z_nrf_clock_control_lf_on(mode);
    348e:	4630      	mov	r0, r6
    3490:	f7fe ffda 	bl	2448 <z_nrf_clock_control_lf_on>

	return 0;
}
    3494:	4620      	mov	r0, r4
    3496:	b002      	add	sp, #8
    3498:	bd70      	pop	{r4, r5, r6, pc}
    349a:	bf00      	nop
    349c:	200005b0 	.word	0x200005b0
    34a0:	40011000 	.word	0x40011000
    34a4:	e000e100 	.word	0xe000e100
    34a8:	20000d00 	.word	0x20000d00
    34ac:	000031cd 	.word	0x000031cd
    34b0:	007fffff 	.word	0x007fffff

000034b4 <rtc_nrf_isr>:
{
    34b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    34b8:	4c33      	ldr	r4, [pc, #204]	; (3588 <rtc_nrf_isr+0xd4>)
    34ba:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    34be:	079a      	lsls	r2, r3, #30
    34c0:	d50b      	bpl.n	34da <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    34c2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    34c6:	b143      	cbz	r3, 34da <rtc_nrf_isr+0x26>
		overflow_cnt++;
    34c8:	4a30      	ldr	r2, [pc, #192]	; (358c <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    34ca:	2300      	movs	r3, #0
    34cc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    34d0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    34d4:	6813      	ldr	r3, [r2, #0]
    34d6:	3301      	adds	r3, #1
    34d8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    34da:	f04f 0320 	mov.w	r3, #32
    34de:	f3ef 8211 	mrs	r2, BASEPRI
    34e2:	f383 8812 	msr	BASEPRI_MAX, r3
    34e6:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    34ea:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    34ee:	03db      	lsls	r3, r3, #15
    34f0:	d529      	bpl.n	3546 <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    34f2:	f3bf 8f5b 	dmb	ish
    34f6:	4b26      	ldr	r3, [pc, #152]	; (3590 <rtc_nrf_isr+0xdc>)
    34f8:	e853 1f00 	ldrex	r1, [r3]
    34fc:	f021 0001 	bic.w	r0, r1, #1
    3500:	e843 0500 	strex	r5, r0, [r3]
    3504:	2d00      	cmp	r5, #0
    3506:	d1f7      	bne.n	34f8 <rtc_nrf_isr+0x44>
    3508:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    350c:	b911      	cbnz	r1, 3514 <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    350e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3512:	b1c3      	cbz	r3, 3546 <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3514:	2500      	movs	r5, #0
    3516:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    351a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    351e:	f382 8811 	msr	BASEPRI, r2
    3522:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    3526:	f7ff febf 	bl	32a8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    352a:	f04f 0320 	mov.w	r3, #32
    352e:	f3ef 8211 	mrs	r2, BASEPRI
    3532:	f383 8812 	msr	BASEPRI_MAX, r3
    3536:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    353a:	4b16      	ldr	r3, [pc, #88]	; (3594 <rtc_nrf_isr+0xe0>)
    353c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3540:	42b0      	cmp	r0, r6
    3542:	41b9      	sbcs	r1, r7
    3544:	d206      	bcs.n	3554 <rtc_nrf_isr+0xa0>
	__asm__ volatile(
    3546:	f382 8811 	msr	BASEPRI, r2
    354a:	f3bf 8f6f 	isb	sy
}
    354e:	b003      	add	sp, #12
    3550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3554:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3558:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    355c:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3560:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3564:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    356a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    356e:	f382 8811 	msr	BASEPRI, r2
    3572:	f3bf 8f6f 	isb	sy
		if (handler) {
    3576:	2900      	cmp	r1, #0
    3578:	d0e9      	beq.n	354e <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
    357a:	9000      	str	r0, [sp, #0]
    357c:	4632      	mov	r2, r6
    357e:	463b      	mov	r3, r7
    3580:	4628      	mov	r0, r5
    3582:	4788      	blx	r1
}
    3584:	e7e3      	b.n	354e <rtc_nrf_isr+0x9a>
    3586:	bf00      	nop
    3588:	40011000 	.word	0x40011000
    358c:	20000d04 	.word	0x20000d04
    3590:	20000cfc 	.word	0x20000cfc
    3594:	200005b0 	.word	0x200005b0

00003598 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3598:	1c43      	adds	r3, r0, #1
{
    359a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    359c:	d021      	beq.n	35e2 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    359e:	2801      	cmp	r0, #1
    35a0:	dd21      	ble.n	35e6 <sys_clock_set_timeout+0x4e>
    35a2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    35a6:	da20      	bge.n	35ea <sys_clock_set_timeout+0x52>
    35a8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    35aa:	f7ff fe7d 	bl	32a8 <z_nrf_rtc_timer_read>
    35ae:	4b10      	ldr	r3, [pc, #64]	; (35f0 <sys_clock_set_timeout+0x58>)
    35b0:	e9d3 1300 	ldrd	r1, r3, [r3]
    35b4:	1a42      	subs	r2, r0, r1
		ticks = 0;
    35b6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    35ba:	480e      	ldr	r0, [pc, #56]	; (35f4 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    35bc:	bf28      	it	cs
    35be:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    35c0:	3201      	adds	r2, #1
    35c2:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    35c4:	4282      	cmp	r2, r0
    35c6:	bf28      	it	cs
    35c8:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    35ca:	1852      	adds	r2, r2, r1
    35cc:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    35d0:	4909      	ldr	r1, [pc, #36]	; (35f8 <sys_clock_set_timeout+0x60>)
    35d2:	9001      	str	r0, [sp, #4]
    35d4:	9100      	str	r1, [sp, #0]
    35d6:	f143 0300 	adc.w	r3, r3, #0
    35da:	f7ff fe87 	bl	32ec <compare_set>
}
    35de:	b002      	add	sp, #8
    35e0:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    35e2:	4804      	ldr	r0, [pc, #16]	; (35f4 <sys_clock_set_timeout+0x5c>)
    35e4:	e7e0      	b.n	35a8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    35e6:	2400      	movs	r4, #0
    35e8:	e7df      	b.n	35aa <sys_clock_set_timeout+0x12>
    35ea:	4c02      	ldr	r4, [pc, #8]	; (35f4 <sys_clock_set_timeout+0x5c>)
    35ec:	e7dd      	b.n	35aa <sys_clock_set_timeout+0x12>
    35ee:	bf00      	nop
    35f0:	200005c0 	.word	0x200005c0
    35f4:	007fffff 	.word	0x007fffff
    35f8:	000031cd 	.word	0x000031cd

000035fc <sys_clock_elapsed>:
{
    35fc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    35fe:	f7ff fe53 	bl	32a8 <z_nrf_rtc_timer_read>
    3602:	4b02      	ldr	r3, [pc, #8]	; (360c <sys_clock_elapsed+0x10>)
    3604:	681b      	ldr	r3, [r3, #0]
}
    3606:	1ac0      	subs	r0, r0, r3
    3608:	bd08      	pop	{r3, pc}
    360a:	bf00      	nop
    360c:	200005c0 	.word	0x200005c0

00003610 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    3610:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3614:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    3616:	2801      	cmp	r0, #1
    3618:	4b04      	ldr	r3, [pc, #16]	; (362c <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    361a:	f04f 0201 	mov.w	r2, #1
        case 0: return NRF_P0;
    361e:	bf18      	it	ne
    3620:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3624:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    3626:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    362a:	4770      	bx	lr
    362c:	50000300 	.word	0x50000300

00003630 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    3630:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3634:	2b00      	cmp	r3, #0
{
    3636:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3638:	bf16      	itet	ne
    363a:	2100      	movne	r1, #0
    363c:	4614      	moveq	r4, r2
    363e:	2401      	movne	r4, #1
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    3640:	f3c0 1581 	ubfx	r5, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    3644:	f000 021f 	and.w	r2, r0, #31
        case 0: return NRF_P0;
    3648:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    364c:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3650:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
        case 0: return NRF_P0;
    3654:	4b06      	ldr	r3, [pc, #24]	; (3670 <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3656:	ea40 0001 	orr.w	r0, r0, r1
        case 0: return NRF_P0;
    365a:	bf08      	it	eq
    365c:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3660:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3664:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    3668:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    366c:	bd30      	pop	{r4, r5, pc}
    366e:	bf00      	nop
    3670:	50000300 	.word	0x50000300

00003674 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    3674:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3678:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    367a:	2801      	cmp	r0, #1
    367c:	4b04      	ldr	r3, [pc, #16]	; (3690 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    367e:	f04f 0201 	mov.w	r2, #1
        case 0: return NRF_P0;
    3682:	bf18      	it	ne
    3684:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3688:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    368a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    368e:	4770      	bx	lr
    3690:	50000300 	.word	0x50000300

00003694 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3694:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3698:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    369c:	2a08      	cmp	r2, #8
    369e:	d106      	bne.n	36ae <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    36a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    36a4:	2b05      	cmp	r3, #5
    36a6:	d802      	bhi.n	36ae <nrf52_errata_103+0x1a>
    36a8:	4a02      	ldr	r2, [pc, #8]	; (36b4 <nrf52_errata_103+0x20>)
    36aa:	5cd0      	ldrb	r0, [r2, r3]
    36ac:	4770      	bx	lr
                        return false;
    36ae:	2000      	movs	r0, #0
}
    36b0:	4770      	bx	lr
    36b2:	bf00      	nop
    36b4:	000078fe 	.word	0x000078fe

000036b8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    36b8:	4a02      	ldr	r2, [pc, #8]	; (36c4 <nvmc_wait+0xc>)
    36ba:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    36be:	2b00      	cmp	r3, #0
    36c0:	d0fb      	beq.n	36ba <nvmc_wait+0x2>
}
    36c2:	4770      	bx	lr
    36c4:	4001e000 	.word	0x4001e000

000036c8 <SystemInit>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    36c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    36cc:	b510      	push	{r4, lr}
            if (var1 == 0x08)
    36ce:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    36d2:	2a08      	cmp	r2, #8
    36d4:	d14e      	bne.n	3774 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    36d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    36da:	2100      	movs	r1, #0
    36dc:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    36e0:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    36e4:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    36e8:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    36ec:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    36f0:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    36f4:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    36f8:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    36fc:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    3700:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3704:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    3708:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    370c:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    3710:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3714:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    3718:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    371c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    3720:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3724:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    3728:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    372c:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    3730:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3734:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    3738:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    373c:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    3740:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3744:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    3748:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    374c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    3750:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3754:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    3758:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    375c:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    3760:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3764:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    3768:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    376c:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    3770:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    3774:	f7ff ff8e 	bl	3694 <nrf52_errata_103>
    3778:	b118      	cbz	r0, 3782 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    377a:	4b3b      	ldr	r3, [pc, #236]	; (3868 <SystemInit+0x1a0>)
    377c:	4a3b      	ldr	r2, [pc, #236]	; (386c <SystemInit+0x1a4>)
    377e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    3782:	f7ff ff87 	bl	3694 <nrf52_errata_103>
    3786:	b118      	cbz	r0, 3790 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    3788:	4b39      	ldr	r3, [pc, #228]	; (3870 <SystemInit+0x1a8>)
    378a:	22fb      	movs	r2, #251	; 0xfb
    378c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    3790:	f7ff ff80 	bl	3694 <nrf52_errata_103>
    3794:	b170      	cbz	r0, 37b4 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    3796:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    379a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    379e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    37a2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    37a6:	f022 020f 	bic.w	r2, r2, #15
    37aa:	f003 030f 	and.w	r3, r3, #15
    37ae:	4313      	orrs	r3, r2
    37b0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    37b4:	f7ff ff6e 	bl	3694 <nrf52_errata_103>
    37b8:	b120      	cbz	r0, 37c4 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    37ba:	4b2e      	ldr	r3, [pc, #184]	; (3874 <SystemInit+0x1ac>)
    37bc:	f44f 7200 	mov.w	r2, #512	; 0x200
    37c0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    37c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    37c8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    37cc:	2b08      	cmp	r3, #8
    37ce:	d11a      	bne.n	3806 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    37d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37d4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    37d8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    37da:	bf44      	itt	mi
    37dc:	f06f 0201 	mvnmi.w	r2, #1
    37e0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    37e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    37e8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    37ec:	2b05      	cmp	r3, #5
    37ee:	d802      	bhi.n	37f6 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    37f0:	4a21      	ldr	r2, [pc, #132]	; (3878 <SystemInit+0x1b0>)
    37f2:	5cd3      	ldrb	r3, [r2, r3]
    37f4:	b13b      	cbz	r3, 3806 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    37f6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    37fa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    37fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3802:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3806:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    380a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    380e:	2a00      	cmp	r2, #0
    3810:	db03      	blt.n	381a <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    3812:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3816:	2b00      	cmp	r3, #0
    3818:	da22      	bge.n	3860 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    381a:	4918      	ldr	r1, [pc, #96]	; (387c <SystemInit+0x1b4>)
    381c:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    381e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3822:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3826:	2412      	movs	r4, #18
    nvmc_wait();
    3828:	f7ff ff46 	bl	36b8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    382c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    3830:	f7ff ff42 	bl	36b8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3834:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    3838:	f7ff ff3e 	bl	36b8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    383c:	2300      	movs	r3, #0
    383e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    3842:	f7ff ff39 	bl	36b8 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    3846:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    384a:	490d      	ldr	r1, [pc, #52]	; (3880 <SystemInit+0x1b8>)
    384c:	4b0d      	ldr	r3, [pc, #52]	; (3884 <SystemInit+0x1bc>)
    384e:	68ca      	ldr	r2, [r1, #12]
    3850:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3854:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3856:	60cb      	str	r3, [r1, #12]
    3858:	f3bf 8f4f 	dsb	sy
    __NOP();
    385c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    385e:	e7fd      	b.n	385c <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3860:	4b09      	ldr	r3, [pc, #36]	; (3888 <SystemInit+0x1c0>)
    3862:	4a0a      	ldr	r2, [pc, #40]	; (388c <SystemInit+0x1c4>)
    3864:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    3866:	bd10      	pop	{r4, pc}
    3868:	40005000 	.word	0x40005000
    386c:	00038148 	.word	0x00038148
    3870:	4000f000 	.word	0x4000f000
    3874:	40029000 	.word	0x40029000
    3878:	000078f8 	.word	0x000078f8
    387c:	4001e000 	.word	0x4001e000
    3880:	e000ed00 	.word	0xe000ed00
    3884:	05fa0004 	.word	0x05fa0004
    3888:	20000094 	.word	0x20000094
    388c:	03d09000 	.word	0x03d09000

00003890 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3890:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3892:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3894:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3896:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    389a:	fab2 f382 	clz	r3, r2
    389e:	f1c3 031f 	rsb	r3, r3, #31
    38a2:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    38a4:	fa05 f403 	lsl.w	r4, r5, r3
    38a8:	ea22 0404 	bic.w	r4, r2, r4
    38ac:	e850 6f00 	ldrex	r6, [r0]
    38b0:	4296      	cmp	r6, r2
    38b2:	d104      	bne.n	38be <nrfx_flag32_alloc+0x2e>
    38b4:	e840 4c00 	strex	ip, r4, [r0]
    38b8:	f1bc 0f00 	cmp.w	ip, #0
    38bc:	d1f6      	bne.n	38ac <nrfx_flag32_alloc+0x1c>
    38be:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    38c2:	d1e7      	bne.n	3894 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    38c4:	4801      	ldr	r0, [pc, #4]	; (38cc <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    38c6:	700b      	strb	r3, [r1, #0]
}
    38c8:	bd70      	pop	{r4, r5, r6, pc}
    38ca:	bf00      	nop
    38cc:	0bad0000 	.word	0x0bad0000

000038d0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    38d0:	6803      	ldr	r3, [r0, #0]
    38d2:	40cb      	lsrs	r3, r1
    38d4:	07db      	lsls	r3, r3, #31
{
    38d6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    38d8:	d414      	bmi.n	3904 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    38da:	2301      	movs	r3, #1
    38dc:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    38de:	6802      	ldr	r2, [r0, #0]
    38e0:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    38e4:	ea43 0102 	orr.w	r1, r3, r2
    38e8:	e850 4f00 	ldrex	r4, [r0]
    38ec:	4294      	cmp	r4, r2
    38ee:	d104      	bne.n	38fa <nrfx_flag32_free+0x2a>
    38f0:	e840 1c00 	strex	ip, r1, [r0]
    38f4:	f1bc 0f00 	cmp.w	ip, #0
    38f8:	d1f6      	bne.n	38e8 <nrfx_flag32_free+0x18>
    38fa:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    38fe:	d1ee      	bne.n	38de <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    3900:	4801      	ldr	r0, [pc, #4]	; (3908 <nrfx_flag32_free+0x38>)
}
    3902:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3904:	4801      	ldr	r0, [pc, #4]	; (390c <nrfx_flag32_free+0x3c>)
    3906:	e7fc      	b.n	3902 <nrfx_flag32_free+0x32>
    3908:	0bad0000 	.word	0x0bad0000
    390c:	0bad0004 	.word	0x0bad0004

00003910 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    3910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    3912:	4604      	mov	r4, r0
    3914:	b118      	cbz	r0, 391e <clock_stop+0xe>
    3916:	2801      	cmp	r0, #1
    3918:	d022      	beq.n	3960 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    391a:	b003      	add	sp, #12
    391c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    391e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3922:	2202      	movs	r2, #2
    3924:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3928:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    392c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3930:	2201      	movs	r2, #1
    3932:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3934:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3936:	2301      	movs	r3, #1
    3938:	f88d 3007 	strb.w	r3, [sp, #7]
    393c:	f242 7510 	movw	r5, #10000	; 0x2710
    3940:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    3944:	b1cc      	cbz	r4, 397a <clock_stop+0x6a>
    3946:	2c01      	cmp	r4, #1
    3948:	d1e7      	bne.n	391a <clock_stop+0xa>
            if (p_clk_src != NULL)
    394a:	b3c7      	cbz	r7, 39be <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    394c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3950:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3954:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3956:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    395a:	03da      	lsls	r2, r3, #15
    395c:	d521      	bpl.n	39a2 <clock_stop+0x92>
    395e:	e016      	b.n	398e <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    3960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3964:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3966:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    396a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    396e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3972:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    3974:	f10d 0707 	add.w	r7, sp, #7
    3978:	e7dd      	b.n	3936 <clock_stop+0x26>
            if (p_clk_src != NULL)
    397a:	b1b7      	cbz	r7, 39aa <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    397c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3980:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3984:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3986:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    398a:	03d8      	lsls	r0, r3, #15
    398c:	d5c5      	bpl.n	391a <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    398e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3992:	2801      	cmp	r0, #1
    3994:	d103      	bne.n	399e <clock_stop+0x8e>
    3996:	f002 ff51 	bl	683c <nrfx_busy_wait>
    399a:	3d01      	subs	r5, #1
    399c:	d1d2      	bne.n	3944 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    399e:	2c01      	cmp	r4, #1
    39a0:	d1bb      	bne.n	391a <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    39a2:	4b0c      	ldr	r3, [pc, #48]	; (39d4 <clock_stop+0xc4>)
    39a4:	2200      	movs	r2, #0
    39a6:	715a      	strb	r2, [r3, #5]
    39a8:	e7b7      	b.n	391a <clock_stop+0xa>
    39aa:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    39ae:	03d9      	lsls	r1, r3, #15
    39b0:	d5b3      	bpl.n	391a <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    39b2:	2001      	movs	r0, #1
    39b4:	f002 ff42 	bl	683c <nrfx_busy_wait>
    39b8:	3d01      	subs	r5, #1
    39ba:	d1f6      	bne.n	39aa <clock_stop+0x9a>
    39bc:	e7ad      	b.n	391a <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    39be:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    39c2:	03db      	lsls	r3, r3, #15
    39c4:	d5ed      	bpl.n	39a2 <clock_stop+0x92>
    39c6:	2001      	movs	r0, #1
    39c8:	f002 ff38 	bl	683c <nrfx_busy_wait>
    39cc:	3d01      	subs	r5, #1
    39ce:	d1f6      	bne.n	39be <clock_stop+0xae>
    39d0:	e7e7      	b.n	39a2 <clock_stop+0x92>
    39d2:	bf00      	nop
    39d4:	20000d08 	.word	0x20000d08

000039d8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    39d8:	4b04      	ldr	r3, [pc, #16]	; (39ec <nrfx_clock_init+0x14>)
    39da:	791a      	ldrb	r2, [r3, #4]
    39dc:	b922      	cbnz	r2, 39e8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    39de:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    39e0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    39e2:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    39e4:	4802      	ldr	r0, [pc, #8]	; (39f0 <nrfx_clock_init+0x18>)
    39e6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    39e8:	4802      	ldr	r0, [pc, #8]	; (39f4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    39ea:	4770      	bx	lr
    39ec:	20000d08 	.word	0x20000d08
    39f0:	0bad0000 	.word	0x0bad0000
    39f4:	0bad000c 	.word	0x0bad000c

000039f8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    39f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    39fc:	b510      	push	{r4, lr}
    39fe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3a02:	b16a      	cbz	r2, 3a20 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a04:	2200      	movs	r2, #0
    3a06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3a0a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    3a0e:	2201      	movs	r2, #1
    3a10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3a14:	4b11      	ldr	r3, [pc, #68]	; (3a5c <nrfx_power_clock_irq_handler+0x64>)
    3a16:	7958      	ldrb	r0, [r3, #5]
    3a18:	b910      	cbnz	r0, 3a20 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    3a1a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3a1c:	681b      	ldr	r3, [r3, #0]
    3a1e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3a20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a24:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3a28:	b172      	cbz	r2, 3a48 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a2a:	2200      	movs	r2, #0
    3a2c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3a30:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3a34:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3a38:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3a3c:	0792      	lsls	r2, r2, #30
    3a3e:	d104      	bne.n	3a4a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3a40:	2201      	movs	r2, #1
    3a42:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a46:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3a48:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3a4a:	2202      	movs	r2, #2
    3a4c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3a50:	4b02      	ldr	r3, [pc, #8]	; (3a5c <nrfx_power_clock_irq_handler+0x64>)
}
    3a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3a56:	681b      	ldr	r3, [r3, #0]
    3a58:	2001      	movs	r0, #1
    3a5a:	4718      	bx	r3
    3a5c:	20000d08 	.word	0x20000d08

00003a60 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    3a60:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    3a62:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    3a66:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    3a68:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    3a6a:	6002      	str	r2, [r0, #0]
}
    3a6c:	4802      	ldr	r0, [pc, #8]	; (3a78 <nrf_gpio_pin_port_decode+0x18>)
    3a6e:	bf18      	it	ne
    3a70:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    3a74:	4770      	bx	lr
    3a76:	bf00      	nop
    3a78:	50000300 	.word	0x50000300

00003a7c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3a7c:	4b03      	ldr	r3, [pc, #12]	; (3a8c <pin_in_use_by_te+0x10>)
    3a7e:	3008      	adds	r0, #8
    3a80:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3a84:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3a88:	4770      	bx	lr
    3a8a:	bf00      	nop
    3a8c:	20000098 	.word	0x20000098

00003a90 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3a90:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3a92:	f100 0308 	add.w	r3, r0, #8
    3a96:	4c0c      	ldr	r4, [pc, #48]	; (3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>)
    3a98:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3a9c:	05da      	lsls	r2, r3, #23
{
    3a9e:	4605      	mov	r5, r0
    3aa0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3aa2:	d507      	bpl.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    3aa4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3aa8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3aac:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3ab0:	6852      	ldr	r2, [r2, #4]
    3ab2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3ab4:	68a3      	ldr	r3, [r4, #8]
    3ab6:	b12b      	cbz	r3, 3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3ab8:	68e2      	ldr	r2, [r4, #12]
    3aba:	4631      	mov	r1, r6
    3abc:	4628      	mov	r0, r5
    }
}
    3abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3ac2:	4718      	bx	r3
}
    3ac4:	bd70      	pop	{r4, r5, r6, pc}
    3ac6:	bf00      	nop
    3ac8:	20000098 	.word	0x20000098

00003acc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3acc:	4a12      	ldr	r2, [pc, #72]	; (3b18 <release_handler+0x4c>)
    3ace:	3008      	adds	r0, #8
{
    3ad0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3ad2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    3ad6:	05d9      	lsls	r1, r3, #23
    3ad8:	d51b      	bpl.n	3b12 <release_handler+0x46>
    3ada:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3ade:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3ae2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3ae6:	f102 040e 	add.w	r4, r2, #14
    3aea:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3aec:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    3af0:	f413 7f80 	tst.w	r3, #256	; 0x100
    3af4:	d003      	beq.n	3afe <release_handler+0x32>
    3af6:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3afa:	4299      	cmp	r1, r3
    3afc:	d009      	beq.n	3b12 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3afe:	3001      	adds	r0, #1
    3b00:	2830      	cmp	r0, #48	; 0x30
    3b02:	d1f3      	bne.n	3aec <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3b04:	2300      	movs	r3, #0
    3b06:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3b0a:	4804      	ldr	r0, [pc, #16]	; (3b1c <release_handler+0x50>)
}
    3b0c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3b0e:	f7ff bedf 	b.w	38d0 <nrfx_flag32_free>
}
    3b12:	bc10      	pop	{r4}
    3b14:	4770      	bx	lr
    3b16:	bf00      	nop
    3b18:	20000098 	.word	0x20000098
    3b1c:	2000010c 	.word	0x2000010c

00003b20 <pin_handler_trigger_uninit>:
{
    3b20:	b538      	push	{r3, r4, r5, lr}
    3b22:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3b24:	f7ff ffaa 	bl	3a7c <pin_in_use_by_te>
    3b28:	4c09      	ldr	r4, [pc, #36]	; (3b50 <pin_handler_trigger_uninit+0x30>)
    3b2a:	f102 0508 	add.w	r5, r2, #8
    3b2e:	b140      	cbz	r0, 3b42 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3b30:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3b34:	4907      	ldr	r1, [pc, #28]	; (3b54 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3b36:	0b5b      	lsrs	r3, r3, #13
    3b38:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3b3c:	2000      	movs	r0, #0
    3b3e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    3b42:	4610      	mov	r0, r2
    3b44:	f7ff ffc2 	bl	3acc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3b48:	2300      	movs	r3, #0
    3b4a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3b4e:	bd38      	pop	{r3, r4, r5, pc}
    3b50:	20000098 	.word	0x20000098
    3b54:	40006000 	.word	0x40006000

00003b58 <nrfx_gpiote_input_configure>:
{
    3b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3b5c:	4604      	mov	r4, r0
    3b5e:	b085      	sub	sp, #20
    3b60:	4690      	mov	r8, r2
    3b62:	461d      	mov	r5, r3
    if (p_input_config)
    3b64:	b1f1      	cbz	r1, 3ba4 <nrfx_gpiote_input_configure+0x4c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b66:	4f4e      	ldr	r7, [pc, #312]	; (3ca0 <nrfx_gpiote_input_configure+0x148>)
    3b68:	f100 0908 	add.w	r9, r0, #8
    3b6c:	f837 6019 	ldrh.w	r6, [r7, r9, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3b70:	07b3      	lsls	r3, r6, #30
    3b72:	d502      	bpl.n	3b7a <nrfx_gpiote_input_configure+0x22>
    3b74:	f7ff ff82 	bl	3a7c <pin_in_use_by_te>
    3b78:	bb18      	cbnz	r0, 3bc2 <nrfx_gpiote_input_configure+0x6a>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3b7a:	2300      	movs	r3, #0
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3b7c:	f026 0602 	bic.w	r6, r6, #2
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3b80:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3b84:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3b88:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3b8c:	f10d 020f 	add.w	r2, sp, #15
    3b90:	460b      	mov	r3, r1
    3b92:	4620      	mov	r0, r4
    3b94:	f10d 010e 	add.w	r1, sp, #14
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3b98:	f046 0601 	orr.w	r6, r6, #1
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3b9c:	f002 fe9b 	bl	68d6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3ba0:	f827 6019 	strh.w	r6, [r7, r9, lsl #1]
    if (p_trigger_config)
    3ba4:	f1b8 0f00 	cmp.w	r8, #0
    3ba8:	d026      	beq.n	3bf8 <nrfx_gpiote_input_configure+0xa0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3baa:	4b3d      	ldr	r3, [pc, #244]	; (3ca0 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3bac:	f898 7000 	ldrb.w	r7, [r8]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3bb0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3bb4:	f104 0608 	add.w	r6, r4, #8
    3bb8:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    3bbc:	0788      	lsls	r0, r1, #30
    3bbe:	d502      	bpl.n	3bc6 <nrfx_gpiote_input_configure+0x6e>
            if (use_evt)
    3bc0:	b192      	cbz	r2, 3be8 <nrfx_gpiote_input_configure+0x90>
            return NRFX_ERROR_INVALID_PARAM;
    3bc2:	4838      	ldr	r0, [pc, #224]	; (3ca4 <nrfx_gpiote_input_configure+0x14c>)
    3bc4:	e01a      	b.n	3bfc <nrfx_gpiote_input_configure+0xa4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3bc6:	f021 0120 	bic.w	r1, r1, #32
    3bca:	04c9      	lsls	r1, r1, #19
    3bcc:	0cc9      	lsrs	r1, r1, #19
    3bce:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    3bd2:	b14a      	cbz	r2, 3be8 <nrfx_gpiote_input_configure+0x90>
                if (!edge)
    3bd4:	2f03      	cmp	r7, #3
    3bd6:	d8f4      	bhi.n	3bc2 <nrfx_gpiote_input_configure+0x6a>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3bd8:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3bdc:	b98f      	cbnz	r7, 3c02 <nrfx_gpiote_input_configure+0xaa>
    3bde:	4a32      	ldr	r2, [pc, #200]	; (3ca8 <nrfx_gpiote_input_configure+0x150>)
    3be0:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    3be4:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3be8:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    3bec:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3bf0:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    3bf4:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    3bf8:	bb4d      	cbnz	r5, 3c4e <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    3bfa:	482c      	ldr	r0, [pc, #176]	; (3cac <nrfx_gpiote_input_configure+0x154>)
}
    3bfc:	b005      	add	sp, #20
    3bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3c02:	ea4f 028c 	mov.w	r2, ip, lsl #2
    3c06:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3c0a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3c0e:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    3c12:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3c16:	f020 0003 	bic.w	r0, r0, #3
    3c1a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3c1e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3c22:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    3c26:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    3c2a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c2e:	0220      	lsls	r0, r4, #8
    3c30:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3c34:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    3c38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    3c3c:	ea40 000e 	orr.w	r0, r0, lr
    3c40:	f041 0120 	orr.w	r1, r1, #32
    3c44:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    3c48:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    3c4c:	e7cc      	b.n	3be8 <nrfx_gpiote_input_configure+0x90>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3c4e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3c52:	4620      	mov	r0, r4
    3c54:	f7ff ff3a 	bl	3acc <release_handler>
    if (!handler)
    3c58:	2e00      	cmp	r6, #0
    3c5a:	d0ce      	beq.n	3bfa <nrfx_gpiote_input_configure+0xa2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3c5c:	4d10      	ldr	r5, [pc, #64]	; (3ca0 <nrfx_gpiote_input_configure+0x148>)
    3c5e:	e9d5 2300 	ldrd	r2, r3, [r5]
    3c62:	4296      	cmp	r6, r2
    3c64:	d101      	bne.n	3c6a <nrfx_gpiote_input_configure+0x112>
    3c66:	429f      	cmp	r7, r3
    3c68:	d018      	beq.n	3c9c <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3c6a:	4811      	ldr	r0, [pc, #68]	; (3cb0 <nrfx_gpiote_input_configure+0x158>)
    3c6c:	f10d 010f 	add.w	r1, sp, #15
    3c70:	f7ff fe0e 	bl	3890 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3c74:	4b0d      	ldr	r3, [pc, #52]	; (3cac <nrfx_gpiote_input_configure+0x154>)
    3c76:	4298      	cmp	r0, r3
    3c78:	d1c0      	bne.n	3bfc <nrfx_gpiote_input_configure+0xa4>
        handler_id = (int32_t)id;
    3c7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    3c7e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3c82:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3c86:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3c88:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3c8a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3c8e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3c96:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    3c9a:	e7ae      	b.n	3bfa <nrfx_gpiote_input_configure+0xa2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3c9c:	2200      	movs	r2, #0
    3c9e:	e7ee      	b.n	3c7e <nrfx_gpiote_input_configure+0x126>
    3ca0:	20000098 	.word	0x20000098
    3ca4:	0bad0004 	.word	0x0bad0004
    3ca8:	40006000 	.word	0x40006000
    3cac:	0bad0000 	.word	0x0bad0000
    3cb0:	2000010c 	.word	0x2000010c

00003cb4 <nrfx_gpiote_output_configure>:
{
    3cb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3cb8:	4604      	mov	r4, r0
    3cba:	4615      	mov	r5, r2
    if (p_config)
    3cbc:	b309      	cbz	r1, 3d02 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3cbe:	4f32      	ldr	r7, [pc, #200]	; (3d88 <nrfx_gpiote_output_configure+0xd4>)
    3cc0:	f100 0808 	add.w	r8, r0, #8
    3cc4:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3cc8:	07b2      	lsls	r2, r6, #30
    3cca:	d403      	bmi.n	3cd4 <nrfx_gpiote_output_configure+0x20>
    3ccc:	f7ff fed6 	bl	3a7c <pin_in_use_by_te>
    3cd0:	2800      	cmp	r0, #0
    3cd2:	d157      	bne.n	3d84 <nrfx_gpiote_output_configure+0xd0>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3cd4:	f016 0f1c 	tst.w	r6, #28
    3cd8:	d002      	beq.n	3ce0 <nrfx_gpiote_output_configure+0x2c>
    3cda:	784b      	ldrb	r3, [r1, #1]
    3cdc:	2b01      	cmp	r3, #1
    3cde:	d051      	beq.n	3d84 <nrfx_gpiote_output_configure+0xd0>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3ce0:	2301      	movs	r3, #1
    3ce2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3ce6:	2300      	movs	r3, #0
    3ce8:	e9cd 1300 	strd	r1, r3, [sp]
    3cec:	1c4a      	adds	r2, r1, #1
    3cee:	1c8b      	adds	r3, r1, #2
    3cf0:	4620      	mov	r0, r4
    3cf2:	f10d 010f 	add.w	r1, sp, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3cf6:	f046 0603 	orr.w	r6, r6, #3
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3cfa:	f002 fdec 	bl	68d6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3cfe:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_task_config)
    3d02:	b91d      	cbnz	r5, 3d0c <nrfx_gpiote_output_configure+0x58>
    return NRFX_SUCCESS;
    3d04:	4821      	ldr	r0, [pc, #132]	; (3d8c <nrfx_gpiote_output_configure+0xd8>)
}
    3d06:	b004      	add	sp, #16
    3d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3d0c:	4e1e      	ldr	r6, [pc, #120]	; (3d88 <nrfx_gpiote_output_configure+0xd4>)
    3d0e:	f104 0708 	add.w	r7, r4, #8
    3d12:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3d16:	0783      	lsls	r3, r0, #30
    3d18:	d534      	bpl.n	3d84 <nrfx_gpiote_output_configure+0xd0>
        uint32_t ch = p_task_config->task_ch;
    3d1a:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3d1e:	4661      	mov	r1, ip
    3d20:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3d22:	f020 0020 	bic.w	r0, r0, #32
    3d26:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3d2a:	04c0      	lsls	r0, r0, #19
    3d2c:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3d30:	0cc0      	lsrs	r0, r0, #19
    3d32:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3d36:	2300      	movs	r3, #0
    3d38:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3d3c:	786a      	ldrb	r2, [r5, #1]
    3d3e:	2a00      	cmp	r2, #0
    3d40:	d0e0      	beq.n	3d04 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3d42:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    3d46:	78ad      	ldrb	r5, [r5, #2]
    3d48:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3d4c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3d50:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d54:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3d58:	0223      	lsls	r3, r4, #8
    3d5a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3d5e:	0412      	lsls	r2, r2, #16
    3d60:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d64:	ea43 030e 	orr.w	r3, r3, lr
    3d68:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3d6a:	052a      	lsls	r2, r5, #20
    3d6c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3d70:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d74:	4313      	orrs	r3, r2
    3d76:	f040 0020 	orr.w	r0, r0, #32
    3d7a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3d7e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3d82:	e7bf      	b.n	3d04 <nrfx_gpiote_output_configure+0x50>
{
    3d84:	4802      	ldr	r0, [pc, #8]	; (3d90 <nrfx_gpiote_output_configure+0xdc>)
    3d86:	e7be      	b.n	3d06 <nrfx_gpiote_output_configure+0x52>
    3d88:	20000098 	.word	0x20000098
    3d8c:	0bad0000 	.word	0x0bad0000
    3d90:	0bad0004 	.word	0x0bad0004

00003d94 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3d94:	4b01      	ldr	r3, [pc, #4]	; (3d9c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3d96:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3d9a:	4770      	bx	lr
    3d9c:	20000098 	.word	0x20000098

00003da0 <nrfx_gpiote_channel_get>:
{
    3da0:	b508      	push	{r3, lr}
    3da2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3da4:	f7ff fe6a 	bl	3a7c <pin_in_use_by_te>
    3da8:	b138      	cbz	r0, 3dba <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3daa:	4b05      	ldr	r3, [pc, #20]	; (3dc0 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    3dac:	4805      	ldr	r0, [pc, #20]	; (3dc4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3dae:	3208      	adds	r2, #8
    3db0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    3db4:	0b5b      	lsrs	r3, r3, #13
    3db6:	700b      	strb	r3, [r1, #0]
}
    3db8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3dba:	4803      	ldr	r0, [pc, #12]	; (3dc8 <nrfx_gpiote_channel_get+0x28>)
    3dbc:	e7fc      	b.n	3db8 <nrfx_gpiote_channel_get+0x18>
    3dbe:	bf00      	nop
    3dc0:	20000098 	.word	0x20000098
    3dc4:	0bad0000 	.word	0x0bad0000
    3dc8:	0bad0004 	.word	0x0bad0004

00003dcc <nrfx_gpiote_init>:
{
    3dcc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3dce:	4c0f      	ldr	r4, [pc, #60]	; (3e0c <nrfx_gpiote_init+0x40>)
    3dd0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3dd4:	b9bd      	cbnz	r5, 3e06 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3dd6:	2260      	movs	r2, #96	; 0x60
    3dd8:	4629      	mov	r1, r5
    3dda:	f104 0010 	add.w	r0, r4, #16
    3dde:	f002 f8ba 	bl	5f56 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3de2:	2006      	movs	r0, #6
    3de4:	f7fd fe44 	bl	1a70 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3de8:	4b09      	ldr	r3, [pc, #36]	; (3e10 <nrfx_gpiote_init+0x44>)
    return err_code;
    3dea:	480a      	ldr	r0, [pc, #40]	; (3e14 <nrfx_gpiote_init+0x48>)
    3dec:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3df0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3df4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3df8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3dfc:	2301      	movs	r3, #1
    3dfe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3e02:	6763      	str	r3, [r4, #116]	; 0x74
}
    3e04:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3e06:	4804      	ldr	r0, [pc, #16]	; (3e18 <nrfx_gpiote_init+0x4c>)
    3e08:	e7fc      	b.n	3e04 <nrfx_gpiote_init+0x38>
    3e0a:	bf00      	nop
    3e0c:	20000098 	.word	0x20000098
    3e10:	40006000 	.word	0x40006000
    3e14:	0bad0000 	.word	0x0bad0000
    3e18:	0bad0005 	.word	0x0bad0005

00003e1c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3e1c:	4b03      	ldr	r3, [pc, #12]	; (3e2c <nrfx_gpiote_is_init+0x10>)
    3e1e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3e22:	3800      	subs	r0, #0
    3e24:	bf18      	it	ne
    3e26:	2001      	movne	r0, #1
    3e28:	4770      	bx	lr
    3e2a:	bf00      	nop
    3e2c:	20000098 	.word	0x20000098

00003e30 <nrfx_gpiote_channel_free>:
{
    3e30:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3e32:	4801      	ldr	r0, [pc, #4]	; (3e38 <nrfx_gpiote_channel_free+0x8>)
    3e34:	f7ff bd4c 	b.w	38d0 <nrfx_flag32_free>
    3e38:	20000108 	.word	0x20000108

00003e3c <nrfx_gpiote_channel_alloc>:
{
    3e3c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3e3e:	4801      	ldr	r0, [pc, #4]	; (3e44 <nrfx_gpiote_channel_alloc+0x8>)
    3e40:	f7ff bd26 	b.w	3890 <nrfx_flag32_alloc>
    3e44:	20000108 	.word	0x20000108

00003e48 <nrfx_gpiote_trigger_enable>:
{
    3e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3e4a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3e4c:	f7ff fe16 	bl	3a7c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3e50:	f104 0208 	add.w	r2, r4, #8
    3e54:	4b1e      	ldr	r3, [pc, #120]	; (3ed0 <nrfx_gpiote_trigger_enable+0x88>)
    3e56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3e5a:	b1e8      	cbz	r0, 3e98 <nrfx_gpiote_trigger_enable+0x50>
    3e5c:	f013 0502 	ands.w	r5, r3, #2
    3e60:	d11a      	bne.n	3e98 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3e62:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3e64:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3e66:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    3e6a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    3e6e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3e72:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e76:	6005      	str	r5, [r0, #0]
    3e78:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3e7a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3e7e:	f040 0001 	orr.w	r0, r0, #1
    3e82:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    3e86:	b129      	cbz	r1, 3e94 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3e88:	2201      	movs	r2, #1
    3e8a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3e8e:	4a11      	ldr	r2, [pc, #68]	; (3ed4 <nrfx_gpiote_trigger_enable+0x8c>)
    3e90:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3e94:	b003      	add	sp, #12
    3e96:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3e98:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3e9c:	2b04      	cmp	r3, #4
    3e9e:	d012      	beq.n	3ec6 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3ea0:	2b05      	cmp	r3, #5
    3ea2:	d012      	beq.n	3eca <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3ea4:	a801      	add	r0, sp, #4
    3ea6:	9401      	str	r4, [sp, #4]
    3ea8:	f7ff fdda 	bl	3a60 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3eac:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    3eae:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3eb2:	40d9      	lsrs	r1, r3
    3eb4:	f001 0101 	and.w	r1, r1, #1
    3eb8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3eba:	4620      	mov	r0, r4
}
    3ebc:	b003      	add	sp, #12
    3ebe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3ec2:	f002 bd51 	b.w	6968 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3ec6:	2103      	movs	r1, #3
    3ec8:	e7f7      	b.n	3eba <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3eca:	2102      	movs	r1, #2
    3ecc:	e7f5      	b.n	3eba <nrfx_gpiote_trigger_enable+0x72>
    3ece:	bf00      	nop
    3ed0:	20000098 	.word	0x20000098
    3ed4:	40006000 	.word	0x40006000

00003ed8 <nrfx_gpiote_trigger_disable>:
{
    3ed8:	b508      	push	{r3, lr}
    3eda:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3edc:	f7ff fdce 	bl	3a7c <pin_in_use_by_te>
    3ee0:	b1c0      	cbz	r0, 3f14 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3ee2:	f102 0108 	add.w	r1, r2, #8
    3ee6:	4b0e      	ldr	r3, [pc, #56]	; (3f20 <nrfx_gpiote_trigger_disable+0x48>)
    3ee8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3eec:	0799      	lsls	r1, r3, #30
    3eee:	d411      	bmi.n	3f14 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3ef0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3ef2:	2201      	movs	r2, #1
    3ef4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3ef6:	009b      	lsls	r3, r3, #2
    3ef8:	490a      	ldr	r1, [pc, #40]	; (3f24 <nrfx_gpiote_trigger_disable+0x4c>)
    3efa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3efe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3f02:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3f06:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3f0a:	f022 0203 	bic.w	r2, r2, #3
    3f0e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3f12:	bd08      	pop	{r3, pc}
    3f14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3f18:	2100      	movs	r1, #0
    3f1a:	4610      	mov	r0, r2
    3f1c:	f002 bd24 	b.w	6968 <nrf_gpio_cfg_sense_set>
    3f20:	20000098 	.word	0x20000098
    3f24:	40006000 	.word	0x40006000

00003f28 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3f28:	4b0e      	ldr	r3, [pc, #56]	; (3f64 <nrfx_gpiote_pin_uninit+0x3c>)
    3f2a:	f100 0208 	add.w	r2, r0, #8
{
    3f2e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3f30:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    3f34:	07db      	lsls	r3, r3, #31
{
    3f36:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3f38:	d511      	bpl.n	3f5e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    3f3a:	f7ff ffcd 	bl	3ed8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3f3e:	4620      	mov	r0, r4
    3f40:	f7ff fdee 	bl	3b20 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3f44:	a801      	add	r0, sp, #4
    3f46:	9401      	str	r4, [sp, #4]
    3f48:	f7ff fd8a 	bl	3a60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3f4c:	9b01      	ldr	r3, [sp, #4]
    3f4e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3f52:	2202      	movs	r2, #2
    3f54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    3f58:	4803      	ldr	r0, [pc, #12]	; (3f68 <nrfx_gpiote_pin_uninit+0x40>)
}
    3f5a:	b002      	add	sp, #8
    3f5c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3f5e:	4803      	ldr	r0, [pc, #12]	; (3f6c <nrfx_gpiote_pin_uninit+0x44>)
    3f60:	e7fb      	b.n	3f5a <nrfx_gpiote_pin_uninit+0x32>
    3f62:	bf00      	nop
    3f64:	20000098 	.word	0x20000098
    3f68:	0bad0000 	.word	0x0bad0000
    3f6c:	0bad0004 	.word	0x0bad0004

00003f70 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f74:	4b68      	ldr	r3, [pc, #416]	; (4118 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    3f76:	4869      	ldr	r0, [pc, #420]	; (411c <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3f78:	4969      	ldr	r1, [pc, #420]	; (4120 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    3f7a:	2600      	movs	r6, #0
{
    3f7c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3f7e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3f80:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f82:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3f84:	b135      	cbz	r5, 3f94 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3f86:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    3f8a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3f8c:	bf1e      	ittt	ne
    3f8e:	601c      	strne	r4, [r3, #0]
    3f90:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3f92:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3f94:	3304      	adds	r3, #4
    3f96:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    3f98:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3f9c:	d1f1      	bne.n	3f82 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f9e:	f8df 917c 	ldr.w	r9, [pc, #380]	; 411c <nrfx_gpiote_irq_handler+0x1ac>
    3fa2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3fa6:	2b00      	cmp	r3, #0
    3fa8:	f000 8099 	beq.w	40de <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    3fac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3fb0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3fb4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3fb6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3fba:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    3fbe:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3fc0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3fc4:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    3fc8:	f10d 0a10 	add.w	sl, sp, #16
    3fcc:	ea4f 1348 	mov.w	r3, r8, lsl #5
    3fd0:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3fd2:	f04f 0b01 	mov.w	fp, #1
    3fd6:	e049      	b.n	406c <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    3fd8:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3fda:	4a52      	ldr	r2, [pc, #328]	; (4124 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    3fdc:	fa94 f4a4 	rbit	r4, r4
    3fe0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    3fe4:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3fe6:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3fe8:	f104 0308 	add.w	r3, r4, #8
    3fec:	9403      	str	r4, [sp, #12]
    3fee:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    3ff2:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    3ff6:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3ffa:	fa0b f202 	lsl.w	r2, fp, r2
    3ffe:	ea23 0302 	bic.w	r3, r3, r2
    4002:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4006:	a803      	add	r0, sp, #12
    4008:	f7ff fd2a 	bl	3a60 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    400c:	9b03      	ldr	r3, [sp, #12]
    400e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4012:	08b9      	lsrs	r1, r7, #2
    4014:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4018:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    401c:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    401e:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4020:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    4024:	d52c      	bpl.n	4080 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    4026:	4620      	mov	r0, r4
    4028:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    402a:	b2dd      	uxtb	r5, r3
    402c:	f7ff fd30 	bl	3a90 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4030:	a803      	add	r0, sp, #12
    4032:	9403      	str	r4, [sp, #12]
    4034:	f7ff fd14 	bl	3a60 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4038:	9b03      	ldr	r3, [sp, #12]
    403a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    403e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4042:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4046:	429d      	cmp	r5, r3
    4048:	d107      	bne.n	405a <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    404a:	2100      	movs	r1, #0
    404c:	4620      	mov	r0, r4
    404e:	f002 fc8b 	bl	6968 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4052:	4629      	mov	r1, r5
    4054:	4620      	mov	r0, r4
    4056:	f002 fc87 	bl	6968 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    405a:	a803      	add	r0, sp, #12
    405c:	9403      	str	r4, [sp, #12]
    405e:	f7ff fcff 	bl	3a60 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    4062:	9b03      	ldr	r3, [sp, #12]
    4064:	fa0b f303 	lsl.w	r3, fp, r3
    4068:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    406c:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    4070:	2c00      	cmp	r4, #0
    4072:	d1b1      	bne.n	3fd8 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4074:	f1b8 0f00 	cmp.w	r8, #0
    4078:	d11d      	bne.n	40b6 <nrfx_gpiote_irq_handler+0x146>
    407a:	f04f 0801 	mov.w	r8, #1
    407e:	e7a5      	b.n	3fcc <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4080:	2b02      	cmp	r3, #2
    4082:	d10c      	bne.n	409e <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4084:	2103      	movs	r1, #3
    4086:	4620      	mov	r0, r4
    4088:	f002 fc6e 	bl	6968 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    408c:	f005 0305 	and.w	r3, r5, #5
    4090:	2b01      	cmp	r3, #1
    4092:	d1e2      	bne.n	405a <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    4094:	4639      	mov	r1, r7
    4096:	4620      	mov	r0, r4
    4098:	f7ff fcfa 	bl	3a90 <call_handler>
    409c:	e7dd      	b.n	405a <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    409e:	2102      	movs	r1, #2
    40a0:	4620      	mov	r0, r4
    40a2:	9301      	str	r3, [sp, #4]
    40a4:	f002 fc60 	bl	6968 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    40a8:	2d03      	cmp	r5, #3
    40aa:	d0f3      	beq.n	4094 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    40ac:	9b01      	ldr	r3, [sp, #4]
    40ae:	2b03      	cmp	r3, #3
    40b0:	d1d3      	bne.n	405a <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    40b2:	2d02      	cmp	r5, #2
    40b4:	e7ed      	b.n	4092 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    40b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    40ba:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    40be:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    40c2:	4919      	ldr	r1, [pc, #100]	; (4128 <nrfx_gpiote_irq_handler+0x1b8>)
    40c4:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    40c8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    40ca:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    40ce:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    40d2:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    40d4:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    40d6:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    40da:	f47f af73 	bne.w	3fc4 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    40de:	2401      	movs	r4, #1
    while (mask)
    40e0:	b916      	cbnz	r6, 40e8 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    40e2:	b007      	add	sp, #28
    40e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    40e8:	fa96 f3a6 	rbit	r3, r6
    40ec:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    40f0:	fa04 f203 	lsl.w	r2, r4, r3
    40f4:	009b      	lsls	r3, r3, #2
    40f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    40fa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    40fe:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4102:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4106:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    410a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    410e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4112:	f7ff fcbd 	bl	3a90 <call_handler>
    4116:	e7e3      	b.n	40e0 <nrfx_gpiote_irq_handler+0x170>
    4118:	40006100 	.word	0x40006100
    411c:	40006000 	.word	0x40006000
    4120:	40006120 	.word	0x40006120
    4124:	20000098 	.word	0x20000098
    4128:	50000300 	.word	0x50000300

0000412c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    412c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    412e:	4801      	ldr	r0, [pc, #4]	; (4134 <nrfx_ppi_channel_alloc+0x8>)
    4130:	f7ff bbae 	b.w	3890 <nrfx_flag32_alloc>
    4134:	20000114 	.word	0x20000114

00004138 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    4138:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    413a:	4b3b      	ldr	r3, [pc, #236]	; (4228 <twi_tx_start_transfer+0xf0>)
    413c:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE void nrf_twi_event_clear(NRF_TWI_Type  * p_reg,
                                           nrf_twi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    413e:	2300      	movs	r3, #0
    4140:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    4144:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    4148:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    414c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    4150:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    4154:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    4158:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    415c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    4160:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    4164:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    4166:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    416a:	2301      	movs	r3, #1
    416c:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    416e:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    4172:	429a      	cmp	r2, r3
    4174:	bf18      	it	ne
    4176:	6083      	strne	r3, [r0, #8]
    if (p_cb->bytes_transferred < p_cb->curr_length)
    4178:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    417a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    417c:	4293      	cmp	r3, r2
{
    417e:	4604      	mov	r4, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    4180:	d20e      	bcs.n	41a0 <twi_tx_start_transfer+0x68>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    4182:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
    4184:	5cd3      	ldrb	r3, [r2, r3]
    4186:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);

    if (p_cb->handler)
    418a:	680b      	ldr	r3, [r1, #0]
    418c:	b303      	cbz	r3, 41d0 <twi_tx_start_transfer+0x98>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    418e:	f240 2386 	movw	r3, #646	; 0x286
    4192:	608b      	str	r3, [r1, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    4194:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    4196:	4825      	ldr	r0, [pc, #148]	; (422c <twi_tx_start_transfer+0xf4>)
    p_reg->INTENSET = mask;
    4198:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    419c:	b002      	add	sp, #8
    419e:	bd10      	pop	{r4, pc}
        if (p_cb->curr_tx_no_stop)
    41a0:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    41a4:	b113      	cbz	r3, 41ac <twi_tx_start_transfer+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41a6:	2301      	movs	r3, #1
    41a8:	61c3      	str	r3, [r0, #28]
            return false;
    41aa:	e7ee      	b.n	418a <twi_tx_start_transfer+0x52>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    41ac:	6a0b      	ldr	r3, [r1, #32]
    41ae:	f013 0f40 	tst.w	r3, #64	; 0x40
    41b2:	f04f 0301 	mov.w	r3, #1
    41b6:	bf16      	itet	ne
    41b8:	61c3      	strne	r3, [r0, #28]
    41ba:	6143      	streq	r3, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    41bc:	f881 302d 	strbne.w	r3, [r1, #45]	; 0x2d
}
    41c0:	e7e3      	b.n	418a <twi_tx_start_transfer+0x52>
               twi_transfer(p_twi, p_cb))
    41c2:	4620      	mov	r0, r4
    41c4:	f002 fbdf 	bl	6986 <twi_transfer>
        while ((hw_timeout > 0) &&
    41c8:	b128      	cbz	r0, 41d6 <twi_tx_start_transfer+0x9e>
            hw_timeout--;
    41ca:	9b01      	ldr	r3, [sp, #4]
    41cc:	3b01      	subs	r3, #1
    41ce:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    41d0:	9b01      	ldr	r3, [sp, #4]
    41d2:	2b00      	cmp	r3, #0
    41d4:	dcf5      	bgt.n	41c2 <twi_tx_start_transfer+0x8a>
        if (p_cb->error)
    41d6:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    41da:	b95b      	cbnz	r3, 41f4 <twi_tx_start_transfer+0xbc>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    41dc:	4813      	ldr	r0, [pc, #76]	; (422c <twi_tx_start_transfer+0xf4>)
        if (hw_timeout <= 0)
    41de:	9b01      	ldr	r3, [sp, #4]
    41e0:	2b00      	cmp	r3, #0
    41e2:	dcdb      	bgt.n	419c <twi_tx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    41e4:	2300      	movs	r3, #0
    41e6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    41ea:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    41ec:	4810      	ldr	r0, [pc, #64]	; (4230 <twi_tx_start_transfer+0xf8>)
    41ee:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    41f2:	e7d3      	b.n	419c <twi_tx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    41f4:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    41f8:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    41fc:	b18b      	cbz	r3, 4222 <twi_tx_start_transfer+0xea>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    41fe:	4a0d      	ldr	r2, [pc, #52]	; (4234 <twi_tx_start_transfer+0xfc>)
    4200:	480b      	ldr	r0, [pc, #44]	; (4230 <twi_tx_start_transfer+0xf8>)
    4202:	f013 0f01 	tst.w	r3, #1
    4206:	bf18      	it	ne
    4208:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    420a:	f013 0f02 	tst.w	r3, #2
    420e:	f102 0201 	add.w	r2, r2, #1
    4212:	bf18      	it	ne
    4214:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    4216:	f013 0f04 	tst.w	r3, #4
    421a:	4b07      	ldr	r3, [pc, #28]	; (4238 <twi_tx_start_transfer+0x100>)
    421c:	bf18      	it	ne
    421e:	4618      	movne	r0, r3
    4220:	e7dd      	b.n	41de <twi_tx_start_transfer+0xa6>
                ret_code = NRFX_ERROR_INTERNAL;
    4222:	4803      	ldr	r0, [pc, #12]	; (4230 <twi_tx_start_transfer+0xf8>)
    4224:	e7db      	b.n	41de <twi_tx_start_transfer+0xa6>
    4226:	bf00      	nop
    4228:	000186a0 	.word	0x000186a0
    422c:	0bad0000 	.word	0x0bad0000
    4230:	0bad0001 	.word	0x0bad0001
    4234:	0bae0000 	.word	0x0bae0000
    4238:	0bae0002 	.word	0x0bae0002

0000423c <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    423c:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    423e:	4b33      	ldr	r3, [pc, #204]	; (430c <twi_rx_start_transfer+0xd0>)
    4240:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4242:	2300      	movs	r3, #0
    4244:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    4248:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    424c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    4250:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    4254:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    4258:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    425c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    4260:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    4264:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    4266:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    426a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    426c:	2b01      	cmp	r3, #1
{
    426e:	4604      	mov	r4, r0
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    4270:	d117      	bne.n	42a2 <twi_rx_start_transfer+0x66>
    4272:	6a0b      	ldr	r3, [r1, #32]
    4274:	065b      	lsls	r3, r3, #25
    4276:	d414      	bmi.n	42a2 <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
    4278:	2302      	movs	r3, #2
    427a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    427e:	2301      	movs	r3, #1
    4280:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    4282:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    4286:	2a02      	cmp	r2, #2
    4288:	bf18      	it	ne
    428a:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    428c:	680b      	ldr	r3, [r1, #0]
    428e:	b18b      	cbz	r3, 42b4 <twi_rx_start_transfer+0x78>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    4290:	f240 2386 	movw	r3, #646	; 0x286
    4294:	608b      	str	r3, [r1, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    4296:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    4298:	481d      	ldr	r0, [pc, #116]	; (4310 <twi_rx_start_transfer+0xd4>)
    p_reg->INTENSET = mask;
    429a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    429e:	b002      	add	sp, #8
    42a0:	bd10      	pop	{r4, pc}
    p_reg->SHORTS = mask;
    42a2:	2301      	movs	r3, #1
    42a4:	e7e9      	b.n	427a <twi_rx_start_transfer+0x3e>
               twi_transfer(p_twi, p_cb))
    42a6:	4620      	mov	r0, r4
    42a8:	f002 fb6d 	bl	6986 <twi_transfer>
        while ((hw_timeout > 0) &&
    42ac:	b128      	cbz	r0, 42ba <twi_rx_start_transfer+0x7e>
               hw_timeout--;
    42ae:	9b01      	ldr	r3, [sp, #4]
    42b0:	3b01      	subs	r3, #1
    42b2:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    42b4:	9b01      	ldr	r3, [sp, #4]
    42b6:	2b00      	cmp	r3, #0
    42b8:	dcf5      	bgt.n	42a6 <twi_rx_start_transfer+0x6a>
        if (p_cb->error)
    42ba:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    42be:	b95b      	cbnz	r3, 42d8 <twi_rx_start_transfer+0x9c>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    42c0:	4813      	ldr	r0, [pc, #76]	; (4310 <twi_rx_start_transfer+0xd4>)
        if (hw_timeout <= 0)
    42c2:	9b01      	ldr	r3, [sp, #4]
    42c4:	2b00      	cmp	r3, #0
    42c6:	dcea      	bgt.n	429e <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    42c8:	2300      	movs	r3, #0
    42ca:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    42ce:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    42d0:	4810      	ldr	r0, [pc, #64]	; (4314 <twi_rx_start_transfer+0xd8>)
    42d2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    42d6:	e7e2      	b.n	429e <twi_rx_start_transfer+0x62>
    uint32_t error_source = p_reg->ERRORSRC;
    42d8:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    42dc:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    42e0:	b18b      	cbz	r3, 4306 <twi_rx_start_transfer+0xca>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    42e2:	4a0d      	ldr	r2, [pc, #52]	; (4318 <twi_rx_start_transfer+0xdc>)
    42e4:	480b      	ldr	r0, [pc, #44]	; (4314 <twi_rx_start_transfer+0xd8>)
    42e6:	f013 0f01 	tst.w	r3, #1
    42ea:	bf18      	it	ne
    42ec:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    42ee:	f013 0f02 	tst.w	r3, #2
    42f2:	f102 0201 	add.w	r2, r2, #1
    42f6:	bf18      	it	ne
    42f8:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    42fa:	f013 0f04 	tst.w	r3, #4
    42fe:	4b07      	ldr	r3, [pc, #28]	; (431c <twi_rx_start_transfer+0xe0>)
    4300:	bf18      	it	ne
    4302:	4618      	movne	r0, r3
    4304:	e7dd      	b.n	42c2 <twi_rx_start_transfer+0x86>
                ret_code = NRFX_ERROR_INTERNAL;
    4306:	4803      	ldr	r0, [pc, #12]	; (4314 <twi_rx_start_transfer+0xd8>)
    4308:	e7db      	b.n	42c2 <twi_rx_start_transfer+0x86>
    430a:	bf00      	nop
    430c:	000186a0 	.word	0x000186a0
    4310:	0bad0000 	.word	0x0bad0000
    4314:	0bad0001 	.word	0x0bad0001
    4318:	0bae0000 	.word	0x0bae0000
    431c:	0bae0002 	.word	0x0bae0002

00004320 <nrfx_twi_init>:
{
    4320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4322:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4324:	4d29      	ldr	r5, [pc, #164]	; (43cc <nrfx_twi_init+0xac>)
    4326:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    432a:	fb0c fc07 	mul.w	ip, ip, r7
    432e:	eb05 040c 	add.w	r4, r5, ip
    4332:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    4336:	2e00      	cmp	r6, #0
    4338:	d146      	bne.n	43c8 <nrfx_twi_init+0xa8>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    433a:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
    433c:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    433e:	7b4b      	ldrb	r3, [r1, #13]
    4340:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    4344:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
    4346:	60a6      	str	r6, [r4, #8]
    p_cb->handler         = event_handler;
    4348:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    434c:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
    4350:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
    4354:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    4358:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
    435c:	b9e3      	cbnz	r3, 4398 <nrfx_twi_init+0x78>
        TWI_PIN_INIT(p_config->scl);
    435e:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
    4360:	4b1b      	ldr	r3, [pc, #108]	; (43d0 <nrfx_twi_init+0xb0>)
    *p_pin = pin_number & 0x1F;
    4362:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    4366:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    4368:	2c01      	cmp	r4, #1
    436a:	bf08      	it	eq
    436c:	469e      	moveq	lr, r3
    reg->PIN_CNF[pin_number] = cnf;
    436e:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 0: return NRF_P0;
    4372:	bf18      	it	ne
    4374:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4378:	f240 6c0c 	movw	ip, #1548	; 0x60c
    437c:	f84e c024 	str.w	ip, [lr, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
    4380:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    4382:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    4386:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    4388:	2c01      	cmp	r4, #1
    438a:	bf18      	it	ne
    438c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4390:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
    4394:	f843 c024 	str.w	ip, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    4398:	7bcb      	ldrb	r3, [r1, #15]
    439a:	b92b      	cbnz	r3, 43a8 <nrfx_twi_init+0x88>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    439c:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    43a0:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    43a4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    43a8:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    43aa:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    43ae:	b11a      	cbz	r2, 43b8 <nrfx_twi_init+0x98>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    43b0:	f340 3007 	sbfx	r0, r0, #12, #8
    43b4:	f7fd fb5c 	bl	1a70 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    43b8:	233c      	movs	r3, #60	; 0x3c
    43ba:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    43be:	4805      	ldr	r0, [pc, #20]	; (43d4 <nrfx_twi_init+0xb4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    43c0:	2301      	movs	r3, #1
    43c2:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    43c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    43c8:	4803      	ldr	r0, [pc, #12]	; (43d8 <nrfx_twi_init+0xb8>)
    43ca:	e7fc      	b.n	43c6 <nrfx_twi_init+0xa6>
    43cc:	20000d10 	.word	0x20000d10
    43d0:	50000300 	.word	0x50000300
    43d4:	0bad0000 	.word	0x0bad0000
    43d8:	0bad0005 	.word	0x0bad0005

000043dc <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    43dc:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    43de:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    43e0:	2105      	movs	r1, #5
    43e2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    43e6:	4b04      	ldr	r3, [pc, #16]	; (43f8 <nrfx_twi_enable+0x1c>)
    43e8:	213c      	movs	r1, #60	; 0x3c
    43ea:	fb01 3302 	mla	r3, r1, r2, r3
    43ee:	2202      	movs	r2, #2
    43f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    43f4:	4770      	bx	lr
    43f6:	bf00      	nop
    43f8:	20000d10 	.word	0x20000d10

000043fc <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    43fc:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    43fe:	4a0b      	ldr	r2, [pc, #44]	; (442c <nrfx_twi_disable+0x30>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4400:	7901      	ldrb	r1, [r0, #4]
    4402:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    4406:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    440a:	f022 0203 	bic.w	r2, r2, #3
    440e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    4412:	2200      	movs	r2, #0
    4414:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4418:	4b05      	ldr	r3, [pc, #20]	; (4430 <nrfx_twi_disable+0x34>)
    441a:	203c      	movs	r0, #60	; 0x3c
    441c:	fb00 3301 	mla	r3, r0, r1, r3
    4420:	2101      	movs	r1, #1
    4422:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
    p_cb->busy = false;
    4426:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
    442a:	4770      	bx	lr
    442c:	00044286 	.word	0x00044286
    4430:	20000d10 	.word	0x20000d10

00004434 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    4434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4438:	4f31      	ldr	r7, [pc, #196]	; (4500 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    443a:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    443c:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4440:	233c      	movs	r3, #60	; 0x3c
    4442:	fb03 7304 	mla	r3, r3, r4, r7
{
    4446:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4448:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    444c:	2b01      	cmp	r3, #1
{
    444e:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4450:	d104      	bne.n	445c <nrfx_twi_xfer+0x28>
    4452:	780b      	ldrb	r3, [r1, #0]
    4454:	2b01      	cmp	r3, #1
    4456:	d106      	bne.n	4466 <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
    4458:	482a      	ldr	r0, [pc, #168]	; (4504 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    445a:	e011      	b.n	4480 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    445c:	2b02      	cmp	r3, #2
    445e:	d102      	bne.n	4466 <nrfx_twi_xfer+0x32>
    4460:	780b      	ldrb	r3, [r1, #0]
    4462:	2b01      	cmp	r3, #1
    4464:	d1f8      	bne.n	4458 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
    4466:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    4468:	4b27      	ldr	r3, [pc, #156]	; (4508 <nrfx_twi_xfer+0xd4>)
    446a:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    446e:	fb06 7604 	mla	r6, r6, r4, r7
    4472:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    4476:	b12b      	cbz	r3, 4484 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    4478:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    447a:	4824      	ldr	r0, [pc, #144]	; (450c <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
    447c:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    4480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    4484:	f08c 0304 	eor.w	r3, ip, #4
    4488:	f3c3 0380 	ubfx	r3, r3, #2, #1
    448c:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    4490:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    4494:	46a8      	mov	r8, r5
    4496:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    449a:	f106 0e0c 	add.w	lr, r6, #12
    449e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    44a2:	f8d8 3000 	ldr.w	r3, [r8]
    44a6:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    44aa:	686b      	ldr	r3, [r5, #4]
    44ac:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    44ae:	68eb      	ldr	r3, [r5, #12]
    44b0:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    44b2:	786b      	ldrb	r3, [r5, #1]
    44b4:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    44b8:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    44ba:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    44be:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    44c0:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    44c4:	d017      	beq.n	44f6 <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    44c6:	b99b      	cbnz	r3, 44f0 <nrfx_twi_xfer+0xbc>
    44c8:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    44cc:	233c      	movs	r3, #60	; 0x3c
    44ce:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    44d2:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    44d4:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    44d8:	4648      	mov	r0, r9
    44da:	f7ff fe2d 	bl	4138 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    44de:	233c      	movs	r3, #60	; 0x3c
    44e0:	435c      	muls	r4, r3
    44e2:	193a      	adds	r2, r7, r4
    44e4:	593b      	ldr	r3, [r7, r4]
    44e6:	2b00      	cmp	r3, #0
    44e8:	d1ca      	bne.n	4480 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
    44ea:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    44ee:	e7c7      	b.n	4480 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    44f0:	f04f 0c01 	mov.w	ip, #1
    44f4:	e7ea      	b.n	44cc <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    44f6:	4651      	mov	r1, sl
    44f8:	4648      	mov	r0, r9
    44fa:	f7ff fe9f 	bl	423c <twi_rx_start_transfer>
    44fe:	e7ee      	b.n	44de <nrfx_twi_xfer+0xaa>
    4500:	20000d10 	.word	0x20000d10
    4504:	0bad0005 	.word	0x0bad0005
    4508:	00044286 	.word	0x00044286
    450c:	0bad000b 	.word	0x0bad000b

00004510 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    4510:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    4512:	4c32      	ldr	r4, [pc, #200]	; (45dc <nrfx_twi_0_irq_handler+0xcc>)
    4514:	4832      	ldr	r0, [pc, #200]	; (45e0 <nrfx_twi_0_irq_handler+0xd0>)
{
    4516:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    4518:	4621      	mov	r1, r4
    451a:	f002 fa34 	bl	6986 <twi_transfer>
    451e:	2800      	cmp	r0, #0
    4520:	d159      	bne.n	45d6 <nrfx_twi_0_irq_handler+0xc6>
    if (!p_cb->error &&
    4522:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    4526:	b9ff      	cbnz	r7, 4568 <nrfx_twi_0_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    4528:	7b22      	ldrb	r2, [r4, #12]
    if (!p_cb->error &&
    452a:	1e93      	subs	r3, r2, #2
    452c:	2b01      	cmp	r3, #1
    452e:	d81b      	bhi.n	4568 <nrfx_twi_0_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    4530:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4532:	69a3      	ldr	r3, [r4, #24]
    4534:	4298      	cmp	r0, r3
    4536:	d117      	bne.n	4568 <nrfx_twi_0_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    4538:	69e3      	ldr	r3, [r4, #28]
    453a:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    453c:	6963      	ldr	r3, [r4, #20]
    453e:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    4540:	6a23      	ldr	r3, [r4, #32]
            (void)twi_tx_start_transfer(p_twi, p_cb);
    4542:	4827      	ldr	r0, [pc, #156]	; (45e0 <nrfx_twi_0_irq_handler+0xd0>)
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    4544:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    4548:	f3c3 1340 	ubfx	r3, r3, #5, #1
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    454c:	2a03      	cmp	r2, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    454e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    4552:	d104      	bne.n	455e <nrfx_twi_0_irq_handler+0x4e>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    4554:	b007      	add	sp, #28
    4556:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    455a:	f7ff bded 	b.w	4138 <twi_tx_start_transfer>
}
    455e:	b007      	add	sp, #28
    4560:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    4564:	f7ff be6a 	b.w	423c <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    4568:	4e1e      	ldr	r6, [pc, #120]	; (45e4 <nrfx_twi_0_irq_handler+0xd4>)
    456a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    456c:	ad01      	add	r5, sp, #4
    456e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4570:	6833      	ldr	r3, [r6, #0]
    4572:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    4574:	b347      	cbz	r7, 45c8 <nrfx_twi_0_irq_handler+0xb8>
    uint32_t error_source = p_reg->ERRORSRC;
    4576:	4a1a      	ldr	r2, [pc, #104]	; (45e0 <nrfx_twi_0_irq_handler+0xd0>)
    4578:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    457c:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    4580:	f013 0102 	ands.w	r1, r3, #2
    4584:	d006      	beq.n	4594 <nrfx_twi_0_irq_handler+0x84>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    4586:	2301      	movs	r3, #1
    4588:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    458c:	2300      	movs	r3, #0
    458e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    4592:	e007      	b.n	45a4 <nrfx_twi_0_irq_handler+0x94>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    4594:	f013 0204 	ands.w	r2, r3, #4
    4598:	d009      	beq.n	45ae <nrfx_twi_0_irq_handler+0x9e>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    459a:	2302      	movs	r3, #2
    459c:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    45a0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            p_cb->handler(&event, p_cb->p_context);
    45a4:	e9d4 3100 	ldrd	r3, r1, [r4]
    45a8:	4668      	mov	r0, sp
    45aa:	4798      	blx	r3
}
    45ac:	e013      	b.n	45d6 <nrfx_twi_0_irq_handler+0xc6>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    45ae:	f013 0301 	ands.w	r3, r3, #1
    45b2:	d005      	beq.n	45c0 <nrfx_twi_0_irq_handler+0xb0>
                event.type = NRFX_TWI_EVT_OVERRUN;
    45b4:	2303      	movs	r3, #3
    45b6:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    45ba:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    45be:	e7f1      	b.n	45a4 <nrfx_twi_0_irq_handler+0x94>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    45c0:	2204      	movs	r2, #4
    45c2:	f88d 2000 	strb.w	r2, [sp]
    45c6:	e7e2      	b.n	458e <nrfx_twi_0_irq_handler+0x7e>
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    45c8:	6a23      	ldr	r3, [r4, #32]
            event.type = NRFX_TWI_EVT_DONE;
    45ca:	f88d 7000 	strb.w	r7, [sp]
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    45ce:	075b      	lsls	r3, r3, #29
        p_cb->busy = false;
    45d0:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    45d4:	d5e6      	bpl.n	45a4 <nrfx_twi_0_irq_handler+0x94>
}
    45d6:	b007      	add	sp, #28
    45d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45da:	bf00      	nop
    45dc:	20000d10 	.word	0x20000d10
    45e0:	40003000 	.word	0x40003000
    45e4:	20000d1c 	.word	0x20000d1c

000045e8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    45e8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    45ea:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    45ee:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    45f0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    45f2:	6002      	str	r2, [r0, #0]
}
    45f4:	4802      	ldr	r0, [pc, #8]	; (4600 <nrf_gpio_pin_port_decode+0x18>)
    45f6:	bf18      	it	ne
    45f8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    45fc:	4770      	bx	lr
    45fe:	bf00      	nop
    4600:	50000300 	.word	0x50000300

00004604 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    4604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4606:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    4608:	f002 fa55 	bl	6ab6 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    460c:	4608      	mov	r0, r1
    460e:	f002 fa52 	bl	6ab6 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4612:	a801      	add	r0, sp, #4
    4614:	9601      	str	r6, [sp, #4]
    4616:	f7ff ffe7 	bl	45e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    461a:	9b01      	ldr	r3, [sp, #4]
    461c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    4620:	460c      	mov	r4, r1
    4622:	f240 610d 	movw	r1, #1549	; 0x60d
    4626:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    462a:	a801      	add	r0, sp, #4
    462c:	9401      	str	r4, [sp, #4]
    462e:	f7ff ffdb 	bl	45e8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4632:	9b01      	ldr	r3, [sp, #4]
    4634:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    4638:	2509      	movs	r5, #9
    463a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    463e:	2004      	movs	r0, #4
    4640:	f002 f8fc 	bl	683c <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4644:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4646:	a801      	add	r0, sp, #4
    4648:	9401      	str	r4, [sp, #4]
    464a:	f7ff ffcd 	bl	45e8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    464e:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    4650:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4654:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    4656:	07db      	lsls	r3, r3, #31
    4658:	d415      	bmi.n	4686 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    465a:	a801      	add	r0, sp, #4
    465c:	9601      	str	r6, [sp, #4]
    465e:	f7ff ffc3 	bl	45e8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4662:	9b01      	ldr	r3, [sp, #4]
    4664:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    4668:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    466c:	2004      	movs	r0, #4
    466e:	f002 f8e5 	bl	683c <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    4672:	4630      	mov	r0, r6
    4674:	f002 fa1f 	bl	6ab6 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    4678:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    467a:	2004      	movs	r0, #4
    467c:	f002 f8de 	bl	683c <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    4680:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    4684:	d1df      	bne.n	4646 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4686:	a801      	add	r0, sp, #4
    4688:	9401      	str	r4, [sp, #4]
    468a:	f7ff ffad 	bl	45e8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    468e:	9a01      	ldr	r2, [sp, #4]
    4690:	2301      	movs	r3, #1
    4692:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    4694:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    4698:	2004      	movs	r0, #4
    469a:	f002 f8cf 	bl	683c <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    469e:	4620      	mov	r0, r4
    46a0:	f002 fa09 	bl	6ab6 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    46a4:	2004      	movs	r0, #4
    46a6:	f002 f8c9 	bl	683c <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    46aa:	a801      	add	r0, sp, #4
    46ac:	9401      	str	r4, [sp, #4]
    46ae:	f7ff ff9b 	bl	45e8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    46b2:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    46b4:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    46b8:	4803      	ldr	r0, [pc, #12]	; (46c8 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    46ba:	40d3      	lsrs	r3, r2
    46bc:	f003 0301 	and.w	r3, r3, #1
    46c0:	1ac0      	subs	r0, r0, r3
    46c2:	b003      	add	sp, #12
    46c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46c6:	bf00      	nop
    46c8:	0bad0001 	.word	0x0bad0001

000046cc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    46cc:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    46ce:	4c14      	ldr	r4, [pc, #80]	; (4720 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    46d0:	4a14      	ldr	r2, [pc, #80]	; (4724 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    46d2:	4915      	ldr	r1, [pc, #84]	; (4728 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    46d4:	2303      	movs	r3, #3
    46d6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    46d8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    46da:	4b14      	ldr	r3, [pc, #80]	; (472c <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    46dc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    46de:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    46e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    46e4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    46e6:	2300      	movs	r3, #0
    46e8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    46ea:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    46ec:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    46ee:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    46f0:	4a0f      	ldr	r2, [pc, #60]	; (4730 <_DoInit+0x64>)
    46f2:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    46f4:	2210      	movs	r2, #16
    46f6:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
    46f8:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
    46fa:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    46fc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    46fe:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4700:	f001 fc04 	bl	5f0c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4704:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4708:	490a      	ldr	r1, [pc, #40]	; (4734 <_DoInit+0x68>)
    470a:	4620      	mov	r0, r4
    470c:	f001 fbfe 	bl	5f0c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4710:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4714:	2320      	movs	r3, #32
    4716:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4718:	f3bf 8f5f 	dmb	sy
}
    471c:	bd10      	pop	{r4, pc}
    471e:	bf00      	nop
    4720:	20000d4c 	.word	0x20000d4c
    4724:	00007904 	.word	0x00007904
    4728:	0000790d 	.word	0x0000790d
    472c:	2000102d 	.word	0x2000102d
    4730:	2000101d 	.word	0x2000101d
    4734:	00007911 	.word	0x00007911

00004738 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4738:	4b0e      	ldr	r3, [pc, #56]	; (4774 <z_sys_init_run_level+0x3c>)
{
    473a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    473c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4740:	3001      	adds	r0, #1
    4742:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4746:	42a6      	cmp	r6, r4
    4748:	d800      	bhi.n	474c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    474a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    474c:	e9d4 3500 	ldrd	r3, r5, [r4]
    4750:	4628      	mov	r0, r5
    4752:	4798      	blx	r3
		if (dev != NULL) {
    4754:	b165      	cbz	r5, 4770 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    4756:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4758:	b130      	cbz	r0, 4768 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    475a:	2800      	cmp	r0, #0
    475c:	bfb8      	it	lt
    475e:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    4760:	28ff      	cmp	r0, #255	; 0xff
    4762:	bfa8      	it	ge
    4764:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    4766:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4768:	785a      	ldrb	r2, [r3, #1]
    476a:	f042 0201 	orr.w	r2, r2, #1
    476e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4770:	3408      	adds	r4, #8
    4772:	e7e8      	b.n	4746 <z_sys_init_run_level+0xe>
    4774:	00007314 	.word	0x00007314

00004778 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4778:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    477a:	4b0a      	ldr	r3, [pc, #40]	; (47a4 <bg_thread_main+0x2c>)
    477c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    477e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4780:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4782:	f7ff ffd9 	bl	4738 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4786:	f001 f80f 	bl	57a8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    478a:	2003      	movs	r0, #3
    478c:	f7ff ffd4 	bl	4738 <z_sys_init_run_level>

	z_init_static_threads();
    4790:	f000 f968 	bl	4a64 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    4794:	f7fc f882 	bl	89c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4798:	4a03      	ldr	r2, [pc, #12]	; (47a8 <bg_thread_main+0x30>)
    479a:	7b13      	ldrb	r3, [r2, #12]
    479c:	f023 0301 	bic.w	r3, r3, #1
    47a0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    47a2:	bd08      	pop	{r3, pc}
    47a4:	2000142d 	.word	0x2000142d
    47a8:	20000650 	.word	0x20000650

000047ac <z_bss_zero>:
{
    47ac:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    47ae:	4803      	ldr	r0, [pc, #12]	; (47bc <z_bss_zero+0x10>)
    47b0:	4a03      	ldr	r2, [pc, #12]	; (47c0 <z_bss_zero+0x14>)
    47b2:	2100      	movs	r1, #0
    47b4:	1a12      	subs	r2, r2, r0
    47b6:	f002 f9b8 	bl	6b2a <z_early_memset>
}
    47ba:	bd08      	pop	{r3, pc}
    47bc:	200001e8 	.word	0x200001e8
    47c0:	20001430 	.word	0x20001430

000047c4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    47c4:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    47c6:	2300      	movs	r3, #0
{
    47c8:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    47ca:	2201      	movs	r2, #1
    47cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    47d0:	4e13      	ldr	r6, [pc, #76]	; (4820 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    47d2:	4d14      	ldr	r5, [pc, #80]	; (4824 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    47d4:	9301      	str	r3, [sp, #4]
    47d6:	220f      	movs	r2, #15
    47d8:	e9cd 3202 	strd	r3, r2, [sp, #8]
    47dc:	4912      	ldr	r1, [pc, #72]	; (4828 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    47de:	2318      	movs	r3, #24
    47e0:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    47e4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    47e8:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    47ea:	f44f 70b0 	mov.w	r0, #352	; 0x160
    47ee:	fb00 1104 	mla	r1, r0, r4, r1
    47f2:	4b0e      	ldr	r3, [pc, #56]	; (482c <z_init_cpu+0x68>)
    47f4:	9500      	str	r5, [sp, #0]
    47f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
    47fa:	4630      	mov	r0, r6
    47fc:	f000 f8d4 	bl	49a8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4800:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4802:	4a0b      	ldr	r2, [pc, #44]	; (4830 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4804:	60ee      	str	r6, [r5, #12]
    4806:	f023 0304 	bic.w	r3, r3, #4
    480a:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    480c:	f44f 6302 	mov.w	r3, #2080	; 0x820
    4810:	fb04 3303 	mla	r3, r4, r3, r3
    4814:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    4816:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    4818:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    481a:	b006      	add	sp, #24
    481c:	bd70      	pop	{r4, r5, r6, pc}
    481e:	bf00      	nop
    4820:	200005d0 	.word	0x200005d0
    4824:	20000df4 	.word	0x20000df4
    4828:	20002ce0 	.word	0x20002ce0
    482c:	00004b1d 	.word	0x00004b1d
    4830:	200024c0 	.word	0x200024c0

00004834 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4834:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4836:	4b2d      	ldr	r3, [pc, #180]	; (48ec <z_cstart+0xb8>)
    4838:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    483a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    483e:	4d2c      	ldr	r5, [pc, #176]	; (48f0 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    4840:	4e2c      	ldr	r6, [pc, #176]	; (48f4 <z_cstart+0xc0>)
    4842:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4844:	4f2c      	ldr	r7, [pc, #176]	; (48f8 <z_cstart+0xc4>)
    4846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    484a:	2400      	movs	r4, #0
    484c:	616b      	str	r3, [r5, #20]
    484e:	23e0      	movs	r3, #224	; 0xe0
    4850:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4854:	77ec      	strb	r4, [r5, #31]
    4856:	762c      	strb	r4, [r5, #24]
    4858:	766c      	strb	r4, [r5, #25]
    485a:	76ac      	strb	r4, [r5, #26]
    485c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4860:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4862:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4866:	626b      	str	r3, [r5, #36]	; 0x24
    4868:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    486c:	f7fd fb00 	bl	1e70 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4870:	f7fd f8e0 	bl	1a34 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4878:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    487a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    487c:	f7fd fc50 	bl	2120 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4880:	f7fd fbb6 	bl	1ff0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4884:	f240 1301 	movw	r3, #257	; 0x101
    4888:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    488c:	ab06      	add	r3, sp, #24
    488e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4890:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    4894:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4896:	f002 f922 	bl	6ade <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    489a:	4620      	mov	r0, r4
    489c:	f7ff ff4c 	bl	4738 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    48a0:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    48a2:	4d16      	ldr	r5, [pc, #88]	; (48fc <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    48a4:	f7ff ff48 	bl	4738 <z_sys_init_run_level>
	z_sched_init();
    48a8:	f000 fc94 	bl	51d4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    48ac:	4b14      	ldr	r3, [pc, #80]	; (4900 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    48ae:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    48b0:	9305      	str	r3, [sp, #20]
    48b2:	2301      	movs	r3, #1
    48b4:	4913      	ldr	r1, [pc, #76]	; (4904 <z_cstart+0xd0>)
    48b6:	9400      	str	r4, [sp, #0]
    48b8:	e9cd 4303 	strd	r4, r3, [sp, #12]
    48bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    48c0:	463b      	mov	r3, r7
    48c2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    48c6:	4628      	mov	r0, r5
    48c8:	f000 f86e 	bl	49a8 <z_setup_new_thread>
    48cc:	7b6a      	ldrb	r2, [r5, #13]
    48ce:	4606      	mov	r6, r0
    48d0:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    48d4:	4628      	mov	r0, r5
    48d6:	736a      	strb	r2, [r5, #13]
    48d8:	f002 f9e7 	bl	6caa <z_ready_thread>
	z_init_cpu(0);
    48dc:	4620      	mov	r0, r4
    48de:	f7ff ff71 	bl	47c4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    48e2:	463a      	mov	r2, r7
    48e4:	4631      	mov	r1, r6
    48e6:	4628      	mov	r0, r5
    48e8:	f7fd f99c 	bl	1c24 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    48ec:	20002ce0 	.word	0x20002ce0
    48f0:	e000ed00 	.word	0xe000ed00
    48f4:	20000df4 	.word	0x20000df4
    48f8:	00004779 	.word	0x00004779
    48fc:	20000650 	.word	0x20000650
    4900:	00007918 	.word	0x00007918
    4904:	20002e40 	.word	0x20002e40

00004908 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    4908:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    490a:	4b0e      	ldr	r3, [pc, #56]	; (4944 <init_mem_slab_module+0x3c>)
    490c:	4c0e      	ldr	r4, [pc, #56]	; (4948 <init_mem_slab_module+0x40>)
    490e:	42a3      	cmp	r3, r4
    4910:	d301      	bcc.n	4916 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4912:	2000      	movs	r0, #0
	return rc;
}
    4914:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4916:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    491a:	ea41 0200 	orr.w	r2, r1, r0
    491e:	f012 0203 	ands.w	r2, r2, #3
    4922:	d10b      	bne.n	493c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    4924:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    4926:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4928:	42aa      	cmp	r2, r5
    492a:	d101      	bne.n	4930 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    492c:	331c      	adds	r3, #28
    492e:	e7ee      	b.n	490e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    4930:	695e      	ldr	r6, [r3, #20]
    4932:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4934:	3201      	adds	r2, #1
		slab->free_list = p;
    4936:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    4938:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    493a:	e7f5      	b.n	4928 <init_mem_slab_module+0x20>
	return rc;
    493c:	f06f 0015 	mvn.w	r0, #21
    4940:	e7e8      	b.n	4914 <init_mem_slab_module+0xc>
    4942:	bf00      	nop
    4944:	20000198 	.word	0x20000198
    4948:	20000198 	.word	0x20000198

0000494c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    494c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    494e:	460c      	mov	r4, r1
	__asm__ volatile(
    4950:	f04f 0520 	mov.w	r5, #32
    4954:	f3ef 8111 	mrs	r1, BASEPRI
    4958:	f385 8812 	msr	BASEPRI_MAX, r5
    495c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4960:	6945      	ldr	r5, [r0, #20]
    4962:	b15d      	cbz	r5, 497c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    4964:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    4966:	682b      	ldr	r3, [r5, #0]
    4968:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    496a:	6983      	ldr	r3, [r0, #24]
    496c:	3301      	adds	r3, #1
    496e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4970:	2000      	movs	r0, #0
	__asm__ volatile(
    4972:	f381 8811 	msr	BASEPRI, r1
    4976:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    497a:	e011      	b.n	49a0 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    497c:	ea52 0603 	orrs.w	r6, r2, r3
    4980:	d103      	bne.n	498a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    4982:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    4984:	f06f 000b 	mvn.w	r0, #11
    4988:	e7f3      	b.n	4972 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    498a:	e9cd 2300 	strd	r2, r3, [sp]
    498e:	4602      	mov	r2, r0
    4990:	3008      	adds	r0, #8
    4992:	f000 fb33 	bl	4ffc <z_pend_curr>
		if (result == 0) {
    4996:	b918      	cbnz	r0, 49a0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    4998:	4b02      	ldr	r3, [pc, #8]	; (49a4 <k_mem_slab_alloc+0x58>)
    499a:	689b      	ldr	r3, [r3, #8]
    499c:	695b      	ldr	r3, [r3, #20]
    499e:	6023      	str	r3, [r4, #0]
}
    49a0:	b002      	add	sp, #8
    49a2:	bd70      	pop	{r4, r5, r6, pc}
    49a4:	20000df4 	.word	0x20000df4

000049a8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    49a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    49ac:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    49ae:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    49b0:	2604      	movs	r6, #4
    49b2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    49b4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    49b6:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    49b8:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    49bc:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    49be:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    49c0:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    49c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    49c6:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    49c8:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    49cc:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    49ce:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    49d2:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    49d6:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    49d8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    49da:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    49dc:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    49e0:	9202      	str	r2, [sp, #8]
    49e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    49e4:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    49e6:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    49e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    49ea:	9200      	str	r2, [sp, #0]
    49ec:	4642      	mov	r2, r8
{
    49ee:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    49f0:	f7fd f8e6 	bl	1bc0 <arch_new_thread>
	if (!_current) {
    49f4:	4b04      	ldr	r3, [pc, #16]	; (4a08 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    49f6:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    49f8:	689b      	ldr	r3, [r3, #8]
    49fa:	b103      	cbz	r3, 49fe <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    49fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    49fe:	6723      	str	r3, [r4, #112]	; 0x70
}
    4a00:	4640      	mov	r0, r8
    4a02:	b004      	add	sp, #16
    4a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a08:	20000df4 	.word	0x20000df4

00004a0c <z_impl_k_thread_create>:
{
    4a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a0e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4a10:	2500      	movs	r5, #0
    4a12:	9505      	str	r5, [sp, #20]
    4a14:	9d10      	ldr	r5, [sp, #64]	; 0x40
    4a16:	9504      	str	r5, [sp, #16]
    4a18:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    4a1a:	9503      	str	r5, [sp, #12]
    4a1c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4a1e:	9502      	str	r5, [sp, #8]
{
    4a20:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4a24:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4a26:	9501      	str	r5, [sp, #4]
    4a28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4a2a:	9500      	str	r5, [sp, #0]
{
    4a2c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4a2e:	f7ff ffbb 	bl	49a8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    4a32:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    4a36:	bf08      	it	eq
    4a38:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    4a3c:	d005      	beq.n	4a4a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4a3e:	ea56 0307 	orrs.w	r3, r6, r7
    4a42:	d105      	bne.n	4a50 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    4a44:	4620      	mov	r0, r4
    4a46:	f000 fb45 	bl	50d4 <z_sched_start>
}
    4a4a:	4620      	mov	r0, r4
    4a4c:	b007      	add	sp, #28
    4a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4a50:	4903      	ldr	r1, [pc, #12]	; (4a60 <z_impl_k_thread_create+0x54>)
    4a52:	463a      	mov	r2, r7
    4a54:	4633      	mov	r3, r6
    4a56:	f104 0018 	add.w	r0, r4, #24
    4a5a:	f000 fd21 	bl	54a0 <z_add_timeout>
    4a5e:	e7f4      	b.n	4a4a <z_impl_k_thread_create+0x3e>
    4a60:	00006c17 	.word	0x00006c17

00004a64 <z_init_static_threads>:
{
    4a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4a68:	4c29      	ldr	r4, [pc, #164]	; (4b10 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    4a6a:	4d2a      	ldr	r5, [pc, #168]	; (4b14 <z_init_static_threads+0xb0>)
{
    4a6c:	b087      	sub	sp, #28
    4a6e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    4a70:	42ae      	cmp	r6, r5
    4a72:	f104 0430 	add.w	r4, r4, #48	; 0x30
    4a76:	d30f      	bcc.n	4a98 <z_init_static_threads+0x34>
	k_sched_lock();
    4a78:	f000 fb7c 	bl	5174 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4a7c:	4c24      	ldr	r4, [pc, #144]	; (4b10 <z_init_static_threads+0xac>)
    4a7e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4b18 <z_init_static_threads+0xb4>
    4a82:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4a86:	f240 37e7 	movw	r7, #999	; 0x3e7
    4a8a:	42ac      	cmp	r4, r5
    4a8c:	d320      	bcc.n	4ad0 <z_init_static_threads+0x6c>
}
    4a8e:	b007      	add	sp, #28
    4a90:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    4a94:	f000 bb82 	b.w	519c <k_sched_unlock>
		z_setup_new_thread(
    4a98:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4a9c:	9305      	str	r3, [sp, #20]
    4a9e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4aa2:	9304      	str	r3, [sp, #16]
    4aa4:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4aa8:	9303      	str	r3, [sp, #12]
    4aaa:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4aae:	9302      	str	r3, [sp, #8]
    4ab0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4ab4:	9301      	str	r3, [sp, #4]
    4ab6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4aba:	9300      	str	r3, [sp, #0]
    4abc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4ac0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4ac4:	f7ff ff70 	bl	49a8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4ac8:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4acc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4ace:	e7ce      	b.n	4a6e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4ad2:	1c5a      	adds	r2, r3, #1
    4ad4:	d00d      	beq.n	4af2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    4ad6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4ada:	2100      	movs	r1, #0
    4adc:	4638      	mov	r0, r7
    4ade:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4ae2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    4ae6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4aea:	d104      	bne.n	4af6 <z_init_static_threads+0x92>
	z_sched_start(thread);
    4aec:	4640      	mov	r0, r8
    4aee:	f000 faf1 	bl	50d4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4af2:	3430      	adds	r4, #48	; 0x30
    4af4:	e7c9      	b.n	4a8a <z_init_static_threads+0x26>
    4af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4afa:	2300      	movs	r3, #0
    4afc:	f7fb fb00 	bl	100 <__aeabi_uldivmod>
    4b00:	4602      	mov	r2, r0
    4b02:	460b      	mov	r3, r1
    4b04:	f108 0018 	add.w	r0, r8, #24
    4b08:	4649      	mov	r1, r9
    4b0a:	f000 fcc9 	bl	54a0 <z_add_timeout>
    4b0e:	e7f0      	b.n	4af2 <z_init_static_threads+0x8e>
    4b10:	20000198 	.word	0x20000198
    4b14:	20000198 	.word	0x20000198
    4b18:	00006c17 	.word	0x00006c17

00004b1c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4b1c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4b1e:	4c0b      	ldr	r4, [pc, #44]	; (4b4c <idle+0x30>)
	return !z_sys_post_kernel;
    4b20:	4d0b      	ldr	r5, [pc, #44]	; (4b50 <idle+0x34>)
	__asm__ volatile(
    4b22:	f04f 0220 	mov.w	r2, #32
    4b26:	f3ef 8311 	mrs	r3, BASEPRI
    4b2a:	f382 8812 	msr	BASEPRI_MAX, r2
    4b2e:	f3bf 8f6f 	isb	sy
    4b32:	f002 f939 	bl	6da8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4b36:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    4b38:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4b3a:	b913      	cbnz	r3, 4b42 <idle+0x26>
	arch_cpu_idle();
    4b3c:	f7fc ff80 	bl	1a40 <arch_cpu_idle>
}
    4b40:	e7ef      	b.n	4b22 <idle+0x6>
    4b42:	f7fc fdd9 	bl	16f8 <pm_system_suspend>
    4b46:	2800      	cmp	r0, #0
    4b48:	d1eb      	bne.n	4b22 <idle+0x6>
    4b4a:	e7f7      	b.n	4b3c <idle+0x20>
    4b4c:	20000df4 	.word	0x20000df4
    4b50:	2000142d 	.word	0x2000142d

00004b54 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4b54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4b58:	4604      	mov	r4, r0
    4b5a:	4617      	mov	r7, r2
    4b5c:	461e      	mov	r6, r3
    4b5e:	f04f 0320 	mov.w	r3, #32
    4b62:	f3ef 8811 	mrs	r8, BASEPRI
    4b66:	f383 8812 	msr	BASEPRI_MAX, r3
    4b6a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4b6e:	68c3      	ldr	r3, [r0, #12]
    4b70:	4a32      	ldr	r2, [pc, #200]	; (4c3c <z_impl_k_mutex_lock+0xe8>)
    4b72:	b17b      	cbz	r3, 4b94 <z_impl_k_mutex_lock+0x40>
    4b74:	6880      	ldr	r0, [r0, #8]
    4b76:	6891      	ldr	r1, [r2, #8]
    4b78:	4288      	cmp	r0, r1
    4b7a:	d019      	beq.n	4bb0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4b7c:	ea57 0306 	orrs.w	r3, r7, r6
    4b80:	d118      	bne.n	4bb4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    4b82:	f388 8811 	msr	BASEPRI, r8
    4b86:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4b8a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4b8e:	b002      	add	sp, #8
    4b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4b94:	6891      	ldr	r1, [r2, #8]
    4b96:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4b9a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4b9c:	3301      	adds	r3, #1
    4b9e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4ba0:	6893      	ldr	r3, [r2, #8]
    4ba2:	60a3      	str	r3, [r4, #8]
    4ba4:	f388 8811 	msr	BASEPRI, r8
    4ba8:	f3bf 8f6f 	isb	sy
		return 0;
    4bac:	2000      	movs	r0, #0
    4bae:	e7ee      	b.n	4b8e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    4bb0:	6921      	ldr	r1, [r4, #16]
    4bb2:	e7f2      	b.n	4b9a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4bb4:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4bb8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    4bbc:	4299      	cmp	r1, r3
    4bbe:	bfa8      	it	ge
    4bc0:	4619      	movge	r1, r3
    4bc2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4bc6:	4291      	cmp	r1, r2
    4bc8:	bfb8      	it	lt
    4bca:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4bcc:	428b      	cmp	r3, r1
    4bce:	dd2e      	ble.n	4c2e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    4bd0:	f002 f800 	bl	6bd4 <adjust_owner_prio.isra.0>
    4bd4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4bd6:	e9cd 7600 	strd	r7, r6, [sp]
    4bda:	4819      	ldr	r0, [pc, #100]	; (4c40 <z_impl_k_mutex_lock+0xec>)
    4bdc:	4622      	mov	r2, r4
    4bde:	4641      	mov	r1, r8
    4be0:	f000 fa0c 	bl	4ffc <z_pend_curr>
	if (got_mutex == 0) {
    4be4:	2800      	cmp	r0, #0
    4be6:	d0e1      	beq.n	4bac <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    4be8:	f04f 0320 	mov.w	r3, #32
    4bec:	f3ef 8611 	mrs	r6, BASEPRI
    4bf0:	f383 8812 	msr	BASEPRI_MAX, r3
    4bf4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4bf8:	6823      	ldr	r3, [r4, #0]
    4bfa:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4bfc:	429c      	cmp	r4, r3
    4bfe:	d00a      	beq.n	4c16 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4c00:	b14b      	cbz	r3, 4c16 <z_impl_k_mutex_lock+0xc2>
    4c02:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4c06:	4299      	cmp	r1, r3
    4c08:	bfa8      	it	ge
    4c0a:	4619      	movge	r1, r3
    4c0c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    4c10:	4299      	cmp	r1, r3
    4c12:	bfb8      	it	lt
    4c14:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4c16:	68a0      	ldr	r0, [r4, #8]
    4c18:	f001 ffdc 	bl	6bd4 <adjust_owner_prio.isra.0>
    4c1c:	b948      	cbnz	r0, 4c32 <z_impl_k_mutex_lock+0xde>
    4c1e:	b945      	cbnz	r5, 4c32 <z_impl_k_mutex_lock+0xde>
	__asm__ volatile(
    4c20:	f386 8811 	msr	BASEPRI, r6
    4c24:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    4c28:	f06f 000a 	mvn.w	r0, #10
    4c2c:	e7af      	b.n	4b8e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    4c2e:	2500      	movs	r5, #0
    4c30:	e7d1      	b.n	4bd6 <z_impl_k_mutex_lock+0x82>
		z_reschedule(&lock, key);
    4c32:	4803      	ldr	r0, [pc, #12]	; (4c40 <z_impl_k_mutex_lock+0xec>)
    4c34:	4631      	mov	r1, r6
    4c36:	f000 fa3b 	bl	50b0 <z_reschedule>
    4c3a:	e7f5      	b.n	4c28 <z_impl_k_mutex_lock+0xd4>
    4c3c:	20000df4 	.word	0x20000df4
    4c40:	2000142e 	.word	0x2000142e

00004c44 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4c44:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4c46:	6883      	ldr	r3, [r0, #8]
{
    4c48:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d032      	beq.n	4cb4 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4c4e:	4a1c      	ldr	r2, [pc, #112]	; (4cc0 <z_impl_k_mutex_unlock+0x7c>)
    4c50:	6892      	ldr	r2, [r2, #8]
    4c52:	4293      	cmp	r3, r2
    4c54:	d131      	bne.n	4cba <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    4c56:	7bda      	ldrb	r2, [r3, #15]
    4c58:	3a01      	subs	r2, #1
    4c5a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4c5c:	68c3      	ldr	r3, [r0, #12]
    4c5e:	2b01      	cmp	r3, #1
    4c60:	d905      	bls.n	4c6e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    4c62:	3b01      	subs	r3, #1
    4c64:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    4c66:	f000 fa99 	bl	519c <k_sched_unlock>

	return 0;
    4c6a:	2000      	movs	r0, #0
}
    4c6c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4c6e:	f04f 0320 	mov.w	r3, #32
    4c72:	f3ef 8511 	mrs	r5, BASEPRI
    4c76:	f383 8812 	msr	BASEPRI_MAX, r3
    4c7a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4c7e:	6901      	ldr	r1, [r0, #16]
    4c80:	6880      	ldr	r0, [r0, #8]
    4c82:	f001 ffa7 	bl	6bd4 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4c86:	4620      	mov	r0, r4
    4c88:	f002 f846 	bl	6d18 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4c8c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4c8e:	b158      	cbz	r0, 4ca8 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    4c90:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4c94:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4c96:	2200      	movs	r2, #0
    4c98:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    4c9a:	f002 f806 	bl	6caa <z_ready_thread>
		z_reschedule(&lock, key);
    4c9e:	4809      	ldr	r0, [pc, #36]	; (4cc4 <z_impl_k_mutex_unlock+0x80>)
    4ca0:	4629      	mov	r1, r5
    4ca2:	f000 fa05 	bl	50b0 <z_reschedule>
    4ca6:	e7de      	b.n	4c66 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    4ca8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4caa:	f385 8811 	msr	BASEPRI, r5
    4cae:	f3bf 8f6f 	isb	sy
    4cb2:	e7d8      	b.n	4c66 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    4cb4:	f06f 0015 	mvn.w	r0, #21
    4cb8:	e7d8      	b.n	4c6c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    4cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4cbe:	e7d5      	b.n	4c6c <z_impl_k_mutex_unlock+0x28>
    4cc0:	20000df4 	.word	0x20000df4
    4cc4:	2000142e 	.word	0x2000142e

00004cc8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4cc8:	b538      	push	{r3, r4, r5, lr}
    4cca:	4604      	mov	r4, r0
	__asm__ volatile(
    4ccc:	f04f 0320 	mov.w	r3, #32
    4cd0:	f3ef 8511 	mrs	r5, BASEPRI
    4cd4:	f383 8812 	msr	BASEPRI_MAX, r3
    4cd8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4cdc:	f002 f81c 	bl	6d18 <z_unpend_first_thread>

	if (thread != NULL) {
    4ce0:	b148      	cbz	r0, 4cf6 <z_impl_k_sem_give+0x2e>
    4ce2:	2200      	movs	r2, #0
    4ce4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4ce6:	f001 ffe0 	bl	6caa <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4cea:	4629      	mov	r1, r5
    4cec:	4805      	ldr	r0, [pc, #20]	; (4d04 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4cf2:	f000 b9dd 	b.w	50b0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4cf6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4cfa:	429a      	cmp	r2, r3
    4cfc:	bf18      	it	ne
    4cfe:	3301      	addne	r3, #1
    4d00:	60a3      	str	r3, [r4, #8]
}
    4d02:	e7f2      	b.n	4cea <z_impl_k_sem_give+0x22>
    4d04:	2000142e 	.word	0x2000142e

00004d08 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4d08:	b513      	push	{r0, r1, r4, lr}
    4d0a:	f04f 0420 	mov.w	r4, #32
    4d0e:	f3ef 8111 	mrs	r1, BASEPRI
    4d12:	f384 8812 	msr	BASEPRI_MAX, r4
    4d16:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4d1a:	6884      	ldr	r4, [r0, #8]
    4d1c:	b144      	cbz	r4, 4d30 <z_impl_k_sem_take+0x28>
		sem->count--;
    4d1e:	3c01      	subs	r4, #1
    4d20:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4d22:	f381 8811 	msr	BASEPRI, r1
    4d26:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4d2a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4d2c:	b002      	add	sp, #8
    4d2e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4d30:	ea52 0403 	orrs.w	r4, r2, r3
    4d34:	d106      	bne.n	4d44 <z_impl_k_sem_take+0x3c>
    4d36:	f381 8811 	msr	BASEPRI, r1
    4d3a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4d3e:	f06f 000f 	mvn.w	r0, #15
    4d42:	e7f3      	b.n	4d2c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4d44:	e9cd 2300 	strd	r2, r3, [sp]
    4d48:	4602      	mov	r2, r0
    4d4a:	4802      	ldr	r0, [pc, #8]	; (4d54 <z_impl_k_sem_take+0x4c>)
    4d4c:	f000 f956 	bl	4ffc <z_pend_curr>
	return ret;
    4d50:	e7ec      	b.n	4d2c <z_impl_k_sem_take+0x24>
    4d52:	bf00      	nop
    4d54:	2000142e 	.word	0x2000142e

00004d58 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    4d58:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    4d5a:	4d07      	ldr	r5, [pc, #28]	; (4d78 <z_reset_time_slice+0x20>)
    4d5c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    4d5e:	b154      	cbz	r4, 4d76 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    4d60:	f7fe fc4c 	bl	35fc <sys_clock_elapsed>
    4d64:	4b05      	ldr	r3, [pc, #20]	; (4d7c <z_reset_time_slice+0x24>)
    4d66:	4404      	add	r4, r0
    4d68:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    4d6a:	6828      	ldr	r0, [r5, #0]
    4d6c:	2100      	movs	r1, #0
	}
}
    4d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    4d72:	f002 b829 	b.w	6dc8 <z_set_timeout_expiry>
}
    4d76:	bd38      	pop	{r3, r4, r5, pc}
    4d78:	20000e24 	.word	0x20000e24
    4d7c:	20000df4 	.word	0x20000df4

00004d80 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    4d80:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    4d82:	4d0d      	ldr	r5, [pc, #52]	; (4db8 <update_cache+0x38>)
    4d84:	462b      	mov	r3, r5
    4d86:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d8a:	429c      	cmp	r4, r3
    4d8c:	d000      	beq.n	4d90 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4d8e:	b904      	cbnz	r4, 4d92 <update_cache+0x12>
    4d90:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    4d92:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    4d94:	b938      	cbnz	r0, 4da6 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    4d96:	7b5a      	ldrb	r2, [r3, #13]
    4d98:	06d2      	lsls	r2, r2, #27
    4d9a:	d104      	bne.n	4da6 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4d9c:	69a2      	ldr	r2, [r4, #24]
    4d9e:	b912      	cbnz	r2, 4da6 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    4da0:	89da      	ldrh	r2, [r3, #14]
    4da2:	2a7f      	cmp	r2, #127	; 0x7f
    4da4:	d805      	bhi.n	4db2 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    4da6:	429c      	cmp	r4, r3
    4da8:	d002      	beq.n	4db0 <update_cache+0x30>
			z_reset_time_slice(thread);
    4daa:	4620      	mov	r0, r4
    4dac:	f7ff ffd4 	bl	4d58 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    4db0:	4623      	mov	r3, r4
    4db2:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    4db4:	bd38      	pop	{r3, r4, r5, pc}
    4db6:	bf00      	nop
    4db8:	20000df4 	.word	0x20000df4

00004dbc <move_thread_to_end_of_prio_q>:
{
    4dbc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    4dbe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    4dc2:	7b43      	ldrb	r3, [r0, #13]
    4dc4:	2a00      	cmp	r2, #0
{
    4dc6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4dc8:	da04      	bge.n	4dd4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4dce:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    4dd0:	f001 ff0f 	bl	6bf2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4dd4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    4dd6:	4a15      	ldr	r2, [pc, #84]	; (4e2c <move_thread_to_end_of_prio_q+0x70>)
    4dd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4ddc:	4610      	mov	r0, r2
    4dde:	734b      	strb	r3, [r1, #13]
    4de0:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    4de4:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4de6:	4283      	cmp	r3, r0
    4de8:	bf08      	it	eq
    4dea:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4dec:	b923      	cbnz	r3, 4df8 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    4dee:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    4df2:	6021      	str	r1, [r4, #0]
	list->tail = node;
    4df4:	6251      	str	r1, [r2, #36]	; 0x24
}
    4df6:	e00c      	b.n	4e12 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    4df8:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    4dfc:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    4e00:	42b5      	cmp	r5, r6
    4e02:	d00e      	beq.n	4e22 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4e04:	42ae      	cmp	r6, r5
    4e06:	dd0c      	ble.n	4e22 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4e08:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    4e0a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    4e0e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    4e10:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    4e12:	6890      	ldr	r0, [r2, #8]
    4e14:	1a43      	subs	r3, r0, r1
    4e16:	4258      	negs	r0, r3
}
    4e18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4e1c:	4158      	adcs	r0, r3
    4e1e:	f7ff bfaf 	b.w	4d80 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4e22:	429c      	cmp	r4, r3
    4e24:	d0e3      	beq.n	4dee <move_thread_to_end_of_prio_q+0x32>
    4e26:	681b      	ldr	r3, [r3, #0]
    4e28:	e7e0      	b.n	4dec <move_thread_to_end_of_prio_q+0x30>
    4e2a:	bf00      	nop
    4e2c:	20000df4 	.word	0x20000df4

00004e30 <ready_thread>:
{
    4e30:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4e32:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4e36:	7b42      	ldrb	r2, [r0, #13]
    4e38:	2b00      	cmp	r3, #0
    4e3a:	db29      	blt.n	4e90 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4e3c:	06d3      	lsls	r3, r2, #27
    4e3e:	d127      	bne.n	4e90 <ready_thread+0x60>
	return node->next != NULL;
    4e40:	6983      	ldr	r3, [r0, #24]
    4e42:	bb2b      	cbnz	r3, 4e90 <ready_thread+0x60>
	return list->head == list;
    4e44:	4913      	ldr	r1, [pc, #76]	; (4e94 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    4e46:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4e4a:	7342      	strb	r2, [r0, #13]
    4e4c:	460a      	mov	r2, r1
    4e4e:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e52:	4294      	cmp	r4, r2
    4e54:	bf18      	it	ne
    4e56:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    4e58:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4e5a:	b923      	cbnz	r3, 4e66 <ready_thread+0x36>
	node->prev = tail;
    4e5c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    4e60:	6020      	str	r0, [r4, #0]
	list->tail = node;
    4e62:	6248      	str	r0, [r1, #36]	; 0x24
}
    4e64:	e00c      	b.n	4e80 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    4e66:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    4e6a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    4e6e:	42b5      	cmp	r5, r6
    4e70:	d00a      	beq.n	4e88 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4e72:	42ae      	cmp	r6, r5
    4e74:	dd08      	ble.n	4e88 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    4e76:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4e78:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    4e7c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    4e7e:	6058      	str	r0, [r3, #4]
}
    4e80:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    4e82:	2000      	movs	r0, #0
    4e84:	f7ff bf7c 	b.w	4d80 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4e88:	42a3      	cmp	r3, r4
    4e8a:	d0e7      	beq.n	4e5c <ready_thread+0x2c>
    4e8c:	681b      	ldr	r3, [r3, #0]
    4e8e:	e7e4      	b.n	4e5a <ready_thread+0x2a>
}
    4e90:	bc70      	pop	{r4, r5, r6}
    4e92:	4770      	bx	lr
    4e94:	20000df4 	.word	0x20000df4

00004e98 <unready_thread>:
{
    4e98:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4e9a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    4e9e:	7b43      	ldrb	r3, [r0, #13]
    4ea0:	2a00      	cmp	r2, #0
{
    4ea2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4ea4:	da04      	bge.n	4eb0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4eaa:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4eac:	f001 fea1 	bl	6bf2 <sys_dlist_remove>
	update_cache(thread == _current);
    4eb0:	4b04      	ldr	r3, [pc, #16]	; (4ec4 <unready_thread+0x2c>)
    4eb2:	6898      	ldr	r0, [r3, #8]
    4eb4:	1a43      	subs	r3, r0, r1
    4eb6:	4258      	negs	r0, r3
    4eb8:	4158      	adcs	r0, r3
}
    4eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    4ebe:	f7ff bf5f 	b.w	4d80 <update_cache>
    4ec2:	bf00      	nop
    4ec4:	20000df4 	.word	0x20000df4

00004ec8 <pend>:
{
    4ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ecc:	4606      	mov	r6, r0
    4ece:	4615      	mov	r5, r2
    4ed0:	461c      	mov	r4, r3
	__asm__ volatile(
    4ed2:	f04f 0320 	mov.w	r3, #32
    4ed6:	f3ef 8711 	mrs	r7, BASEPRI
    4eda:	f383 8812 	msr	BASEPRI_MAX, r3
    4ede:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    4ee2:	f001 feba 	bl	6c5a <add_to_waitq_locked>
	__asm__ volatile(
    4ee6:	f387 8811 	msr	BASEPRI, r7
    4eea:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4eee:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    4ef2:	bf08      	it	eq
    4ef4:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    4ef8:	d008      	beq.n	4f0c <pend+0x44>
    4efa:	462a      	mov	r2, r5
    4efc:	4623      	mov	r3, r4
    4efe:	f106 0018 	add.w	r0, r6, #24
    4f02:	4903      	ldr	r1, [pc, #12]	; (4f10 <pend+0x48>)
}
    4f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4f08:	f000 baca 	b.w	54a0 <z_add_timeout>
    4f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f10:	00006c17 	.word	0x00006c17

00004f14 <k_sched_time_slice_set>:
{
    4f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f16:	4604      	mov	r4, r0
    4f18:	460d      	mov	r5, r1
	__asm__ volatile(
    4f1a:	f04f 0320 	mov.w	r3, #32
    4f1e:	f3ef 8711 	mrs	r7, BASEPRI
    4f22:	f383 8812 	msr	BASEPRI_MAX, r3
    4f26:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    4f2a:	2600      	movs	r6, #0
    4f2c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    4f30:	f240 30e7 	movw	r0, #999	; 0x3e7
    4f34:	4631      	mov	r1, r6
    4f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4f3a:	2300      	movs	r3, #0
    4f3c:	fbe4 010c 	umlal	r0, r1, r4, ip
    4f40:	f7fb f8de 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4f44:	42b4      	cmp	r4, r6
    4f46:	dd02      	ble.n	4f4e <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    4f48:	2802      	cmp	r0, #2
    4f4a:	bfb8      	it	lt
    4f4c:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    4f4e:	4a07      	ldr	r2, [pc, #28]	; (4f6c <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    4f50:	4b07      	ldr	r3, [pc, #28]	; (4f70 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    4f52:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    4f54:	4a07      	ldr	r2, [pc, #28]	; (4f74 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    4f56:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    4f58:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    4f5a:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    4f5c:	f7ff fefc 	bl	4d58 <z_reset_time_slice>
	__asm__ volatile(
    4f60:	f387 8811 	msr	BASEPRI, r7
    4f64:	f3bf 8f6f 	isb	sy
}
    4f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f6a:	bf00      	nop
    4f6c:	20000e24 	.word	0x20000e24
    4f70:	20000df4 	.word	0x20000df4
    4f74:	20000e20 	.word	0x20000e20

00004f78 <z_time_slice>:
{
    4f78:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4f7a:	f04f 0320 	mov.w	r3, #32
    4f7e:	f3ef 8511 	mrs	r5, BASEPRI
    4f82:	f383 8812 	msr	BASEPRI_MAX, r3
    4f86:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4f8a:	4b17      	ldr	r3, [pc, #92]	; (4fe8 <z_time_slice+0x70>)
    4f8c:	4a17      	ldr	r2, [pc, #92]	; (4fec <z_time_slice+0x74>)
    4f8e:	689c      	ldr	r4, [r3, #8]
    4f90:	6811      	ldr	r1, [r2, #0]
    4f92:	428c      	cmp	r4, r1
    4f94:	d107      	bne.n	4fa6 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    4f96:	4620      	mov	r0, r4
    4f98:	f7ff fede 	bl	4d58 <z_reset_time_slice>
	__asm__ volatile(
    4f9c:	f385 8811 	msr	BASEPRI, r5
    4fa0:	f3bf 8f6f 	isb	sy
}
    4fa4:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    4fa6:	2100      	movs	r1, #0
    4fa8:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    4faa:	4a11      	ldr	r2, [pc, #68]	; (4ff0 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    4fac:	6812      	ldr	r2, [r2, #0]
    4fae:	b1c2      	cbz	r2, 4fe2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    4fb0:	89e2      	ldrh	r2, [r4, #14]
    4fb2:	2a7f      	cmp	r2, #127	; 0x7f
    4fb4:	d815      	bhi.n	4fe2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    4fb6:	7b62      	ldrb	r2, [r4, #13]
    4fb8:	06d2      	lsls	r2, r2, #27
    4fba:	d112      	bne.n	4fe2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4fbc:	4a0d      	ldr	r2, [pc, #52]	; (4ff4 <z_time_slice+0x7c>)
    4fbe:	f994 100e 	ldrsb.w	r1, [r4, #14]
    4fc2:	6812      	ldr	r2, [r2, #0]
    4fc4:	4291      	cmp	r1, r2
    4fc6:	db0c      	blt.n	4fe2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    4fc8:	4a0b      	ldr	r2, [pc, #44]	; (4ff8 <z_time_slice+0x80>)
    4fca:	4294      	cmp	r4, r2
    4fcc:	d009      	beq.n	4fe2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    4fce:	691a      	ldr	r2, [r3, #16]
    4fd0:	4282      	cmp	r2, r0
    4fd2:	dc03      	bgt.n	4fdc <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    4fd4:	4620      	mov	r0, r4
    4fd6:	f7ff fef1 	bl	4dbc <move_thread_to_end_of_prio_q>
    4fda:	e7dc      	b.n	4f96 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    4fdc:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    4fde:	611a      	str	r2, [r3, #16]
    4fe0:	e7dc      	b.n	4f9c <z_time_slice+0x24>
    4fe2:	2200      	movs	r2, #0
    4fe4:	e7fb      	b.n	4fde <z_time_slice+0x66>
    4fe6:	bf00      	nop
    4fe8:	20000df4 	.word	0x20000df4
    4fec:	20000e1c 	.word	0x20000e1c
    4ff0:	20000e24 	.word	0x20000e24
    4ff4:	20000e20 	.word	0x20000e20
    4ff8:	200005d0 	.word	0x200005d0

00004ffc <z_pend_curr>:
{
    4ffc:	b510      	push	{r4, lr}
	pending_current = _current;
    4ffe:	4b07      	ldr	r3, [pc, #28]	; (501c <z_pend_curr+0x20>)
    5000:	6898      	ldr	r0, [r3, #8]
    5002:	4b07      	ldr	r3, [pc, #28]	; (5020 <z_pend_curr+0x24>)
{
    5004:	460c      	mov	r4, r1
	pending_current = _current;
    5006:	6018      	str	r0, [r3, #0]
{
    5008:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    500a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    500e:	f7ff ff5b 	bl	4ec8 <pend>
	ret = arch_swap(key);
    5012:	4620      	mov	r0, r4
}
    5014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5018:	f7fc bd7e 	b.w	1b18 <arch_swap>
    501c:	20000df4 	.word	0x20000df4
    5020:	20000e1c 	.word	0x20000e1c

00005024 <z_set_prio>:
{
    5024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5026:	4604      	mov	r4, r0
	__asm__ volatile(
    5028:	f04f 0320 	mov.w	r3, #32
    502c:	f3ef 8611 	mrs	r6, BASEPRI
    5030:	f383 8812 	msr	BASEPRI_MAX, r3
    5034:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    5038:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    503a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    503c:	b249      	sxtb	r1, r1
    503e:	d119      	bne.n	5074 <z_set_prio+0x50>
	return node->next != NULL;
    5040:	6985      	ldr	r5, [r0, #24]
    5042:	b9bd      	cbnz	r5, 5074 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5048:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    504a:	f001 fdd2 	bl	6bf2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    504e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    5050:	4a16      	ldr	r2, [pc, #88]	; (50ac <z_set_prio+0x88>)
				thread->base.prio = prio;
    5052:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5054:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5058:	7343      	strb	r3, [r0, #13]
    505a:	4613      	mov	r3, r2
    505c:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5060:	4298      	cmp	r0, r3
    5062:	bf18      	it	ne
    5064:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    5066:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5068:	b95d      	cbnz	r5, 5082 <z_set_prio+0x5e>
	node->prev = tail;
    506a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    506e:	6004      	str	r4, [r0, #0]
	list->tail = node;
    5070:	6254      	str	r4, [r2, #36]	; 0x24
}
    5072:	e011      	b.n	5098 <z_set_prio+0x74>
			thread->base.prio = prio;
    5074:	73a1      	strb	r1, [r4, #14]
    5076:	2000      	movs	r0, #0
	__asm__ volatile(
    5078:	f386 8811 	msr	BASEPRI, r6
    507c:	f3bf 8f6f 	isb	sy
}
    5080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    5082:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    5086:	42b9      	cmp	r1, r7
    5088:	d00b      	beq.n	50a2 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    508a:	428f      	cmp	r7, r1
    508c:	dd09      	ble.n	50a2 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    508e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    5090:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    5094:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5096:	606c      	str	r4, [r5, #4]
			update_cache(1);
    5098:	2001      	movs	r0, #1
    509a:	f7ff fe71 	bl	4d80 <update_cache>
    509e:	2001      	movs	r0, #1
    50a0:	e7ea      	b.n	5078 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    50a2:	42a8      	cmp	r0, r5
    50a4:	d0e1      	beq.n	506a <z_set_prio+0x46>
    50a6:	682d      	ldr	r5, [r5, #0]
    50a8:	e7de      	b.n	5068 <z_set_prio+0x44>
    50aa:	bf00      	nop
    50ac:	20000df4 	.word	0x20000df4

000050b0 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    50b0:	b949      	cbnz	r1, 50c6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    50b2:	f3ef 8005 	mrs	r0, IPSR
    50b6:	b930      	cbnz	r0, 50c6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    50b8:	4b05      	ldr	r3, [pc, #20]	; (50d0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    50ba:	69da      	ldr	r2, [r3, #28]
    50bc:	689b      	ldr	r3, [r3, #8]
    50be:	429a      	cmp	r2, r3
    50c0:	d001      	beq.n	50c6 <z_reschedule+0x16>
    50c2:	f7fc bd29 	b.w	1b18 <arch_swap>
    50c6:	f381 8811 	msr	BASEPRI, r1
    50ca:	f3bf 8f6f 	isb	sy
}
    50ce:	4770      	bx	lr
    50d0:	20000df4 	.word	0x20000df4

000050d4 <z_sched_start>:
{
    50d4:	b510      	push	{r4, lr}
	__asm__ volatile(
    50d6:	f04f 0220 	mov.w	r2, #32
    50da:	f3ef 8411 	mrs	r4, BASEPRI
    50de:	f382 8812 	msr	BASEPRI_MAX, r2
    50e2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    50e6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    50e8:	0751      	lsls	r1, r2, #29
    50ea:	d404      	bmi.n	50f6 <z_sched_start+0x22>
	__asm__ volatile(
    50ec:	f384 8811 	msr	BASEPRI, r4
    50f0:	f3bf 8f6f 	isb	sy
}
    50f4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    50f6:	f022 0204 	bic.w	r2, r2, #4
    50fa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    50fc:	f7ff fe98 	bl	4e30 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5100:	4621      	mov	r1, r4
    5102:	4802      	ldr	r0, [pc, #8]	; (510c <z_sched_start+0x38>)
}
    5104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    5108:	f7ff bfd2 	b.w	50b0 <z_reschedule>
    510c:	2000142e 	.word	0x2000142e

00005110 <z_impl_k_thread_suspend>:
{
    5110:	b570      	push	{r4, r5, r6, lr}
    5112:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5114:	3018      	adds	r0, #24
    5116:	f001 fe31 	bl	6d7c <z_abort_timeout>
	__asm__ volatile(
    511a:	f04f 0320 	mov.w	r3, #32
    511e:	f3ef 8611 	mrs	r6, BASEPRI
    5122:	f383 8812 	msr	BASEPRI_MAX, r3
    5126:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    512a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    512e:	7b63      	ldrb	r3, [r4, #13]
    5130:	2a00      	cmp	r2, #0
    5132:	da05      	bge.n	5140 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5138:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    513a:	4620      	mov	r0, r4
    513c:	f001 fd59 	bl	6bf2 <sys_dlist_remove>
		update_cache(thread == _current);
    5140:	4d0b      	ldr	r5, [pc, #44]	; (5170 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5142:	7b63      	ldrb	r3, [r4, #13]
    5144:	68a8      	ldr	r0, [r5, #8]
    5146:	f043 0310 	orr.w	r3, r3, #16
    514a:	7363      	strb	r3, [r4, #13]
    514c:	1b03      	subs	r3, r0, r4
    514e:	4258      	negs	r0, r3
    5150:	4158      	adcs	r0, r3
    5152:	f7ff fe15 	bl	4d80 <update_cache>
	__asm__ volatile(
    5156:	f386 8811 	msr	BASEPRI, r6
    515a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    515e:	68ab      	ldr	r3, [r5, #8]
    5160:	42a3      	cmp	r3, r4
    5162:	d103      	bne.n	516c <z_impl_k_thread_suspend+0x5c>
}
    5164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5168:	f001 bdfe 	b.w	6d68 <z_reschedule_unlocked>
}
    516c:	bd70      	pop	{r4, r5, r6, pc}
    516e:	bf00      	nop
    5170:	20000df4 	.word	0x20000df4

00005174 <k_sched_lock>:
	__asm__ volatile(
    5174:	f04f 0320 	mov.w	r3, #32
    5178:	f3ef 8111 	mrs	r1, BASEPRI
    517c:	f383 8812 	msr	BASEPRI_MAX, r3
    5180:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    5184:	4b04      	ldr	r3, [pc, #16]	; (5198 <k_sched_lock+0x24>)
    5186:	689a      	ldr	r2, [r3, #8]
    5188:	7bd3      	ldrb	r3, [r2, #15]
    518a:	3b01      	subs	r3, #1
    518c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    518e:	f381 8811 	msr	BASEPRI, r1
    5192:	f3bf 8f6f 	isb	sy
}
    5196:	4770      	bx	lr
    5198:	20000df4 	.word	0x20000df4

0000519c <k_sched_unlock>:
{
    519c:	b510      	push	{r4, lr}
	__asm__ volatile(
    519e:	f04f 0320 	mov.w	r3, #32
    51a2:	f3ef 8411 	mrs	r4, BASEPRI
    51a6:	f383 8812 	msr	BASEPRI_MAX, r3
    51aa:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    51ae:	4b08      	ldr	r3, [pc, #32]	; (51d0 <k_sched_unlock+0x34>)
    51b0:	689a      	ldr	r2, [r3, #8]
    51b2:	7bd3      	ldrb	r3, [r2, #15]
    51b4:	3301      	adds	r3, #1
    51b6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    51b8:	2000      	movs	r0, #0
    51ba:	f7ff fde1 	bl	4d80 <update_cache>
	__asm__ volatile(
    51be:	f384 8811 	msr	BASEPRI, r4
    51c2:	f3bf 8f6f 	isb	sy
}
    51c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    51ca:	f001 bdcd 	b.w	6d68 <z_reschedule_unlocked>
    51ce:	bf00      	nop
    51d0:	20000df4 	.word	0x20000df4

000051d4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    51d4:	4b04      	ldr	r3, [pc, #16]	; (51e8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    51d6:	2100      	movs	r1, #0
    51d8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    51dc:	e9c3 2208 	strd	r2, r2, [r3, #32]
    51e0:	4608      	mov	r0, r1
    51e2:	f7ff be97 	b.w	4f14 <k_sched_time_slice_set>
    51e6:	bf00      	nop
    51e8:	20000df4 	.word	0x20000df4

000051ec <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    51ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    51ee:	f04f 0320 	mov.w	r3, #32
    51f2:	f3ef 8511 	mrs	r5, BASEPRI
    51f6:	f383 8812 	msr	BASEPRI_MAX, r3
    51fa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    51fe:	4919      	ldr	r1, [pc, #100]	; (5264 <z_impl_k_yield+0x78>)
    5200:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5202:	7b43      	ldrb	r3, [r0, #13]
    5204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5208:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    520a:	f001 fcf2 	bl	6bf2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    520e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    5210:	460a      	mov	r2, r1
    5212:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5216:	7343      	strb	r3, [r0, #13]
    5218:	f852 3f20 	ldr.w	r3, [r2, #32]!
	return (node == list->tail) ? NULL : node->next;
    521c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    521e:	4293      	cmp	r3, r2
    5220:	bf08      	it	eq
    5222:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5224:	b923      	cbnz	r3, 5230 <z_impl_k_yield+0x44>
	node->prev = tail;
    5226:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    522a:	6020      	str	r0, [r4, #0]
	list->tail = node;
    522c:	6248      	str	r0, [r1, #36]	; 0x24
}
    522e:	e00c      	b.n	524a <z_impl_k_yield+0x5e>
	int32_t b1 = thread_1->base.prio;
    5230:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5234:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    5238:	42be      	cmp	r6, r7
    523a:	d00e      	beq.n	525a <z_impl_k_yield+0x6e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    523c:	42b7      	cmp	r7, r6
    523e:	dd0c      	ble.n	525a <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    5240:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5242:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5246:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5248:	6058      	str	r0, [r3, #4]
	}
	queue_thread(_current);
	update_cache(1);
    524a:	2001      	movs	r0, #1
    524c:	f7ff fd98 	bl	4d80 <update_cache>
    5250:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5256:	f7fc bc5f 	b.w	1b18 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    525a:	42a3      	cmp	r3, r4
    525c:	d0e3      	beq.n	5226 <z_impl_k_yield+0x3a>
    525e:	681b      	ldr	r3, [r3, #0]
    5260:	e7e0      	b.n	5224 <z_impl_k_yield+0x38>
    5262:	bf00      	nop
    5264:	20000df4 	.word	0x20000df4

00005268 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5268:	ea50 0301 	orrs.w	r3, r0, r1
{
    526c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5270:	4605      	mov	r5, r0
    5272:	460e      	mov	r6, r1
	if (ticks == 0) {
    5274:	d103      	bne.n	527e <z_tick_sleep+0x16>
	z_impl_k_yield();
    5276:	f7ff ffb9 	bl	51ec <z_impl_k_yield>
		k_yield();
		return 0;
    527a:	2000      	movs	r0, #0
    527c:	e02c      	b.n	52d8 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    527e:	1c83      	adds	r3, r0, #2
    5280:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    5284:	db2a      	blt.n	52dc <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5286:	f001 fdbb 	bl	6e00 <sys_clock_tick_get_32>
    528a:	1944      	adds	r4, r0, r5
    528c:	f04f 0320 	mov.w	r3, #32
    5290:	f3ef 8811 	mrs	r8, BASEPRI
    5294:	f383 8812 	msr	BASEPRI_MAX, r3
    5298:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    529c:	4f11      	ldr	r7, [pc, #68]	; (52e4 <z_tick_sleep+0x7c>)
    529e:	4b12      	ldr	r3, [pc, #72]	; (52e8 <z_tick_sleep+0x80>)
    52a0:	68b8      	ldr	r0, [r7, #8]
    52a2:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    52a4:	f7ff fdf8 	bl	4e98 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    52a8:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    52aa:	4910      	ldr	r1, [pc, #64]	; (52ec <z_tick_sleep+0x84>)
    52ac:	462a      	mov	r2, r5
    52ae:	4633      	mov	r3, r6
    52b0:	3018      	adds	r0, #24
    52b2:	f000 f8f5 	bl	54a0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    52b6:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    52b8:	7b53      	ldrb	r3, [r2, #13]
    52ba:	f043 0310 	orr.w	r3, r3, #16
    52be:	7353      	strb	r3, [r2, #13]
    52c0:	4640      	mov	r0, r8
    52c2:	f7fc fc29 	bl	1b18 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    52c6:	f001 fd9b 	bl	6e00 <sys_clock_tick_get_32>
    52ca:	1a20      	subs	r0, r4, r0
    52cc:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    52d0:	2801      	cmp	r0, #1
    52d2:	f173 0300 	sbcs.w	r3, r3, #0
    52d6:	dbd0      	blt.n	527a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    52d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    52dc:	f06f 0401 	mvn.w	r4, #1
    52e0:	1a24      	subs	r4, r4, r0
    52e2:	e7d3      	b.n	528c <z_tick_sleep+0x24>
    52e4:	20000df4 	.word	0x20000df4
    52e8:	20000e1c 	.word	0x20000e1c
    52ec:	00006c17 	.word	0x00006c17

000052f0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    52f0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    52f4:	bf08      	it	eq
    52f6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    52fa:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    52fc:	d106      	bne.n	530c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    52fe:	4b08      	ldr	r3, [pc, #32]	; (5320 <z_impl_k_sleep+0x30>)
    5300:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5302:	f7ff ff05 	bl	5110 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    530a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    530c:	f7ff ffac 	bl	5268 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    5310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5314:	fb80 0303 	smull	r0, r3, r0, r3
    5318:	0bc0      	lsrs	r0, r0, #15
    531a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    531e:	e7f4      	b.n	530a <z_impl_k_sleep+0x1a>
    5320:	20000df4 	.word	0x20000df4

00005324 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5324:	4b01      	ldr	r3, [pc, #4]	; (532c <z_impl_z_current_get+0x8>)
    5326:	6898      	ldr	r0, [r3, #8]
    5328:	4770      	bx	lr
    532a:	bf00      	nop
    532c:	20000df4 	.word	0x20000df4

00005330 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5334:	4604      	mov	r4, r0
    5336:	f04f 0320 	mov.w	r3, #32
    533a:	f3ef 8611 	mrs	r6, BASEPRI
    533e:	f383 8812 	msr	BASEPRI_MAX, r3
    5342:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5346:	7b43      	ldrb	r3, [r0, #13]
    5348:	071a      	lsls	r2, r3, #28
    534a:	d505      	bpl.n	5358 <z_thread_abort+0x28>
	__asm__ volatile(
    534c:	f386 8811 	msr	BASEPRI, r6
    5350:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5358:	f023 0220 	bic.w	r2, r3, #32
    535c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5360:	09d2      	lsrs	r2, r2, #7
    5362:	d120      	bne.n	53a6 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5364:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    5366:	68a3      	ldr	r3, [r4, #8]
    5368:	b113      	cbz	r3, 5370 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    536a:	4620      	mov	r0, r4
    536c:	f001 fc49 	bl	6c02 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5370:	f104 0018 	add.w	r0, r4, #24
    5374:	f001 fd02 	bl	6d7c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5378:	f104 0758 	add.w	r7, r4, #88	; 0x58
    537c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5380:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5382:	42bd      	cmp	r5, r7
    5384:	d000      	beq.n	5388 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5386:	b9b5      	cbnz	r5, 53b6 <z_thread_abort+0x86>
		update_cache(1);
    5388:	2001      	movs	r0, #1
    538a:	f7ff fcf9 	bl	4d80 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    538e:	4b10      	ldr	r3, [pc, #64]	; (53d0 <z_thread_abort+0xa0>)
    5390:	689b      	ldr	r3, [r3, #8]
    5392:	42a3      	cmp	r3, r4
    5394:	d1da      	bne.n	534c <z_thread_abort+0x1c>
    5396:	f3ef 8305 	mrs	r3, IPSR
    539a:	2b00      	cmp	r3, #0
    539c:	d1d6      	bne.n	534c <z_thread_abort+0x1c>
    539e:	4630      	mov	r0, r6
    53a0:	f7fc fbba 	bl	1b18 <arch_swap>
	return ret;
    53a4:	e7d2      	b.n	534c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    53a6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    53aa:	f043 0308 	orr.w	r3, r3, #8
    53ae:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    53b0:	f001 fc1f 	bl	6bf2 <sys_dlist_remove>
}
    53b4:	e7d7      	b.n	5366 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    53b6:	4628      	mov	r0, r5
    53b8:	f001 fc23 	bl	6c02 <unpend_thread_no_timeout>
    53bc:	f105 0018 	add.w	r0, r5, #24
    53c0:	f001 fcdc 	bl	6d7c <z_abort_timeout>
    53c4:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    53c8:	4628      	mov	r0, r5
    53ca:	f7ff fd31 	bl	4e30 <ready_thread>
    53ce:	e7d7      	b.n	5380 <z_thread_abort+0x50>
    53d0:	20000df4 	.word	0x20000df4

000053d4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    53d4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    53d6:	4806      	ldr	r0, [pc, #24]	; (53f0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    53d8:	4a06      	ldr	r2, [pc, #24]	; (53f4 <z_data_copy+0x20>)
    53da:	4907      	ldr	r1, [pc, #28]	; (53f8 <z_data_copy+0x24>)
    53dc:	1a12      	subs	r2, r2, r0
    53de:	f001 fba6 	bl	6b2e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    53e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    53e6:	4a05      	ldr	r2, [pc, #20]	; (53fc <z_data_copy+0x28>)
    53e8:	4905      	ldr	r1, [pc, #20]	; (5400 <z_data_copy+0x2c>)
    53ea:	4806      	ldr	r0, [pc, #24]	; (5404 <z_data_copy+0x30>)
    53ec:	f001 bb9f 	b.w	6b2e <z_early_memcpy>
    53f0:	20000000 	.word	0x20000000
    53f4:	200001e8 	.word	0x200001e8
    53f8:	00007954 	.word	0x00007954
    53fc:	00000000 	.word	0x00000000
    5400:	00007954 	.word	0x00007954
    5404:	20000000 	.word	0x20000000

00005408 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5408:	4b03      	ldr	r3, [pc, #12]	; (5418 <elapsed+0x10>)
    540a:	681b      	ldr	r3, [r3, #0]
    540c:	b90b      	cbnz	r3, 5412 <elapsed+0xa>
    540e:	f7fe b8f5 	b.w	35fc <sys_clock_elapsed>
}
    5412:	2000      	movs	r0, #0
    5414:	4770      	bx	lr
    5416:	bf00      	nop
    5418:	20000e28 	.word	0x20000e28

0000541c <next_timeout>:
	return list->head == list;
    541c:	4b11      	ldr	r3, [pc, #68]	; (5464 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    541e:	b510      	push	{r4, lr}
    5420:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5422:	429c      	cmp	r4, r3
    5424:	d10a      	bne.n	543c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5426:	f7ff ffef 	bl	5408 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    542a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    542e:	4b0e      	ldr	r3, [pc, #56]	; (5468 <next_timeout+0x4c>)
    5430:	691b      	ldr	r3, [r3, #16]
    5432:	b113      	cbz	r3, 543a <next_timeout+0x1e>
    5434:	4298      	cmp	r0, r3
    5436:	bfa8      	it	ge
    5438:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    543a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    543c:	f7ff ffe4 	bl	5408 <elapsed>
	if ((to == NULL) ||
    5440:	2c00      	cmp	r4, #0
    5442:	d0f2      	beq.n	542a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5444:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    5448:	1a1b      	subs	r3, r3, r0
    544a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    544e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5452:	f172 0100 	sbcs.w	r1, r2, #0
    5456:	dae8      	bge.n	542a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    5458:	2a00      	cmp	r2, #0
    545a:	bfac      	ite	ge
    545c:	4618      	movge	r0, r3
    545e:	2000      	movlt	r0, #0
    5460:	e7e5      	b.n	542e <next_timeout+0x12>
    5462:	bf00      	nop
    5464:	20000118 	.word	0x20000118
    5468:	20000df4 	.word	0x20000df4

0000546c <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    546c:	4a0b      	ldr	r2, [pc, #44]	; (549c <remove_timeout+0x30>)
    546e:	6803      	ldr	r3, [r0, #0]
    5470:	6852      	ldr	r2, [r2, #4]
    5472:	4290      	cmp	r0, r2
{
    5474:	b530      	push	{r4, r5, lr}
    5476:	d009      	beq.n	548c <remove_timeout+0x20>
	if (next(t) != NULL) {
    5478:	b143      	cbz	r3, 548c <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
    547a:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    547e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5482:	1912      	adds	r2, r2, r4
    5484:	eb41 0105 	adc.w	r1, r1, r5
    5488:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    548c:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    548e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5490:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5492:	2300      	movs	r3, #0
	node->prev = NULL;
    5494:	e9c0 3300 	strd	r3, r3, [r0]
}
    5498:	bd30      	pop	{r4, r5, pc}
    549a:	bf00      	nop
    549c:	20000118 	.word	0x20000118

000054a0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    54a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    54a4:	bf08      	it	eq
    54a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    54aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54ac:	4604      	mov	r4, r0
    54ae:	461d      	mov	r5, r3
    54b0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    54b2:	d061      	beq.n	5578 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    54b4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    54b6:	f04f 0320 	mov.w	r3, #32
    54ba:	f3ef 8711 	mrs	r7, BASEPRI
    54be:	f383 8812 	msr	BASEPRI_MAX, r3
    54c2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    54c6:	3201      	adds	r2, #1
    54c8:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    54cc:	da24      	bge.n	5518 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    54ce:	4930      	ldr	r1, [pc, #192]	; (5590 <z_add_timeout+0xf0>)
    54d0:	e9d1 2000 	ldrd	r2, r0, [r1]
    54d4:	f06f 0301 	mvn.w	r3, #1
    54d8:	1a9b      	subs	r3, r3, r2
    54da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    54de:	eb62 0000 	sbc.w	r0, r2, r0
    54e2:	1b9e      	subs	r6, r3, r6
    54e4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    54e8:	2e01      	cmp	r6, #1
    54ea:	f170 0300 	sbcs.w	r3, r0, #0
    54ee:	da01      	bge.n	54f4 <z_add_timeout+0x54>
    54f0:	2601      	movs	r6, #1
    54f2:	2000      	movs	r0, #0
    54f4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    54f8:	4e26      	ldr	r6, [pc, #152]	; (5594 <z_add_timeout+0xf4>)
    54fa:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    54fe:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5500:	45b4      	cmp	ip, r6
    5502:	bf08      	it	eq
    5504:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    5508:	f1bc 0f00 	cmp.w	ip, #0
    550c:	d10d      	bne.n	552a <z_add_timeout+0x8a>
	node->prev = tail;
    550e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    5512:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5514:	6074      	str	r4, [r6, #4]
}
    5516:	e01c      	b.n	5552 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    5518:	f7ff ff76 	bl	5408 <elapsed>
    551c:	3601      	adds	r6, #1
    551e:	f145 0500 	adc.w	r5, r5, #0
    5522:	1836      	adds	r6, r6, r0
    5524:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    5528:	e7e4      	b.n	54f4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    552a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    552e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    5532:	4293      	cmp	r3, r2
    5534:	eb71 0e00 	sbcs.w	lr, r1, r0
    5538:	da1f      	bge.n	557a <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    553a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    553c:	f8dc 3004 	ldr.w	r3, [ip, #4]
    5540:	eb60 0001 	sbc.w	r0, r0, r1
    5544:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    5548:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    554c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    554e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    5552:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5554:	42b3      	cmp	r3, r6
    5556:	d00b      	beq.n	5570 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5558:	429c      	cmp	r4, r3
    555a:	d109      	bne.n	5570 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    555c:	f7ff ff5e 	bl	541c <next_timeout>

			if (next_time == 0 ||
    5560:	b118      	cbz	r0, 556a <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    5562:	4b0d      	ldr	r3, [pc, #52]	; (5598 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    5564:	691b      	ldr	r3, [r3, #16]
    5566:	4283      	cmp	r3, r0
    5568:	d002      	beq.n	5570 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    556a:	2100      	movs	r1, #0
    556c:	f7fe f814 	bl	3598 <sys_clock_set_timeout>
	__asm__ volatile(
    5570:	f387 8811 	msr	BASEPRI, r7
    5574:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    557a:	1a9b      	subs	r3, r3, r2
    557c:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    5580:	45ac      	cmp	ip, r5
    5582:	e9c4 3104 	strd	r3, r1, [r4, #16]
    5586:	d0c2      	beq.n	550e <z_add_timeout+0x6e>
    5588:	f8dc c000 	ldr.w	ip, [ip]
    558c:	e7bc      	b.n	5508 <z_add_timeout+0x68>
    558e:	bf00      	nop
    5590:	200006d0 	.word	0x200006d0
    5594:	20000118 	.word	0x20000118
    5598:	20000df4 	.word	0x20000df4

0000559c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    559c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    55a0:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    55a2:	f7ff fce9 	bl	4f78 <z_time_slice>
	__asm__ volatile(
    55a6:	f04f 0320 	mov.w	r3, #32
    55aa:	f3ef 8411 	mrs	r4, BASEPRI
    55ae:	f383 8812 	msr	BASEPRI_MAX, r3
    55b2:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    55b6:	4e24      	ldr	r6, [pc, #144]	; (5648 <sys_clock_announce+0xac>)
	return list->head == list;
    55b8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 564c <sys_clock_announce+0xb0>
    55bc:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    55be:	4d24      	ldr	r5, [pc, #144]	; (5650 <sys_clock_announce+0xb4>)
    55c0:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    55c4:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    55c6:	4540      	cmp	r0, r8
		curr_tick += dt;
    55c8:	e9d5 1e00 	ldrd	r1, lr, [r5]
    55cc:	ea4f 77e2 	mov.w	r7, r2, asr #31
    55d0:	d00b      	beq.n	55ea <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    55d2:	b150      	cbz	r0, 55ea <sys_clock_announce+0x4e>
    55d4:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    55d8:	429a      	cmp	r2, r3
    55da:	eb77 090c 	sbcs.w	r9, r7, ip
    55de:	da16      	bge.n	560e <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    55e0:	1a9b      	subs	r3, r3, r2
    55e2:	eb6c 0c07 	sbc.w	ip, ip, r7
    55e6:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    55ea:	1851      	adds	r1, r2, r1
    55ec:	eb4e 0707 	adc.w	r7, lr, r7
    55f0:	e9c5 1700 	strd	r1, r7, [r5]
	announce_remaining = 0;
    55f4:	2500      	movs	r5, #0
    55f6:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    55f8:	f7ff ff10 	bl	541c <next_timeout>
    55fc:	4629      	mov	r1, r5
    55fe:	f7fd ffcb 	bl	3598 <sys_clock_set_timeout>
	__asm__ volatile(
    5602:	f384 8811 	msr	BASEPRI, r4
    5606:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    560a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    560e:	1859      	adds	r1, r3, r1
    5610:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    5614:	1ad3      	subs	r3, r2, r3
    5616:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    5618:	2200      	movs	r2, #0
    561a:	2300      	movs	r3, #0
    561c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    5620:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    5624:	f7ff ff22 	bl	546c <remove_timeout>
    5628:	f384 8811 	msr	BASEPRI, r4
    562c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5630:	6883      	ldr	r3, [r0, #8]
    5632:	4798      	blx	r3
	__asm__ volatile(
    5634:	f04f 0320 	mov.w	r3, #32
    5638:	f3ef 8411 	mrs	r4, BASEPRI
    563c:	f383 8812 	msr	BASEPRI_MAX, r3
    5640:	f3bf 8f6f 	isb	sy
	return k;
    5644:	e7bc      	b.n	55c0 <sys_clock_announce+0x24>
    5646:	bf00      	nop
    5648:	20000e28 	.word	0x20000e28
    564c:	20000118 	.word	0x20000118
    5650:	200006d0 	.word	0x200006d0

00005654 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5654:	b510      	push	{r4, lr}
    5656:	f04f 0320 	mov.w	r3, #32
    565a:	f3ef 8411 	mrs	r4, BASEPRI
    565e:	f383 8812 	msr	BASEPRI_MAX, r3
    5662:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    5666:	f7fd ffc9 	bl	35fc <sys_clock_elapsed>
    566a:	4a05      	ldr	r2, [pc, #20]	; (5680 <sys_clock_tick_get+0x2c>)
    566c:	e9d2 3100 	ldrd	r3, r1, [r2]
    5670:	18c0      	adds	r0, r0, r3
    5672:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    5676:	f384 8811 	msr	BASEPRI, r4
    567a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    567e:	bd10      	pop	{r4, pc}
    5680:	200006d0 	.word	0x200006d0

00005684 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    5684:	b570      	push	{r4, r5, r6, lr}
    5686:	4604      	mov	r4, r0
	__asm__ volatile(
    5688:	f04f 0320 	mov.w	r3, #32
    568c:	f3ef 8511 	mrs	r5, BASEPRI
    5690:	f383 8812 	msr	BASEPRI_MAX, r3
    5694:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5698:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    569c:	3301      	adds	r3, #1
    569e:	f142 0200 	adc.w	r2, r2, #0
    56a2:	2b02      	cmp	r3, #2
    56a4:	f172 0200 	sbcs.w	r2, r2, #0
    56a8:	d304      	bcc.n	56b4 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    56aa:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    56ae:	4917      	ldr	r1, [pc, #92]	; (570c <z_timer_expiration_handler+0x88>)
    56b0:	f7ff fef6 	bl	54a0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    56b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    56b6:	3301      	adds	r3, #1
    56b8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    56ba:	6a23      	ldr	r3, [r4, #32]
    56bc:	b173      	cbz	r3, 56dc <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    56be:	f385 8811 	msr	BASEPRI, r5
    56c2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    56c6:	6a23      	ldr	r3, [r4, #32]
    56c8:	4620      	mov	r0, r4
    56ca:	4798      	blx	r3
	__asm__ volatile(
    56cc:	f04f 0320 	mov.w	r3, #32
    56d0:	f3ef 8511 	mrs	r5, BASEPRI
    56d4:	f383 8812 	msr	BASEPRI_MAX, r3
    56d8:	f3bf 8f6f 	isb	sy
	return list->head == list;
    56dc:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    56e0:	42a6      	cmp	r6, r4
    56e2:	d000      	beq.n	56e6 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    56e4:	b926      	cbnz	r6, 56f0 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    56e6:	f385 8811 	msr	BASEPRI, r5
    56ea:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    56ee:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    56f0:	4630      	mov	r0, r6
    56f2:	f001 faea 	bl	6cca <z_unpend_thread_no_timeout>
    56f6:	2300      	movs	r3, #0
    56f8:	67b3      	str	r3, [r6, #120]	; 0x78
    56fa:	f385 8811 	msr	BASEPRI, r5
    56fe:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    5702:	4630      	mov	r0, r6
}
    5704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    5708:	f001 bacf 	b.w	6caa <z_ready_thread>
    570c:	00005685 	.word	0x00005685

00005710 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    5710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5718:	bf08      	it	eq
    571a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    571e:	4605      	mov	r5, r0
    5720:	4614      	mov	r4, r2
    5722:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    5726:	4619      	mov	r1, r3
    5728:	4691      	mov	r9, r2
    572a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    572c:	d037      	beq.n	579e <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    572e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    5732:	bf08      	it	eq
    5734:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    5738:	4637      	mov	r7, r6
    573a:	4682      	mov	sl, r0
    573c:	d011      	beq.n	5762 <z_impl_k_timer_start+0x52>
    573e:	ea50 0306 	orrs.w	r3, r0, r6
    5742:	d00e      	beq.n	5762 <z_impl_k_timer_start+0x52>
    5744:	1c72      	adds	r2, r6, #1
    5746:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
    574a:	db0a      	blt.n	5762 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    574c:	2e02      	cmp	r6, #2
    574e:	4684      	mov	ip, r0
    5750:	f170 0000 	sbcs.w	r0, r0, #0
    5754:	bfbc      	itt	lt
    5756:	2702      	movlt	r7, #2
    5758:	f04f 0c00 	movlt.w	ip, #0
    575c:	3f01      	subs	r7, #1
    575e:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    5762:	1c63      	adds	r3, r4, #1
    5764:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    5768:	db0a      	blt.n	5780 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    576a:	2c01      	cmp	r4, #1
    576c:	f171 0300 	sbcs.w	r3, r1, #0
    5770:	4622      	mov	r2, r4
    5772:	bfbc      	itt	lt
    5774:	2201      	movlt	r2, #1
    5776:	2100      	movlt	r1, #0
    5778:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    577c:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    5780:	4628      	mov	r0, r5
    5782:	f001 fafb 	bl	6d7c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    5786:	2300      	movs	r3, #0
    5788:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
    578a:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    578e:	464a      	mov	r2, r9
    5790:	4643      	mov	r3, r8
    5792:	4628      	mov	r0, r5
    5794:	4903      	ldr	r1, [pc, #12]	; (57a4 <z_impl_k_timer_start+0x94>)
		     duration);
}
    5796:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    579a:	f7ff be81 	b.w	54a0 <z_add_timeout>
}
    579e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57a2:	bf00      	nop
    57a4:	00005685 	.word	0x00005685

000057a8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    57a8:	4a02      	ldr	r2, [pc, #8]	; (57b4 <boot_banner+0xc>)
    57aa:	4903      	ldr	r1, [pc, #12]	; (57b8 <boot_banner+0x10>)
    57ac:	4803      	ldr	r0, [pc, #12]	; (57bc <boot_banner+0x14>)
    57ae:	f000 ba68 	b.w	5c82 <printk>
    57b2:	bf00      	nop
    57b4:	0000755b 	.word	0x0000755b
    57b8:	0000791d 	.word	0x0000791d
    57bc:	0000792a 	.word	0x0000792a

000057c0 <nrf_cc3xx_platform_init_no_rng>:
    57c0:	b510      	push	{r4, lr}
    57c2:	4c0a      	ldr	r4, [pc, #40]	; (57ec <nrf_cc3xx_platform_init_no_rng+0x2c>)
    57c4:	6823      	ldr	r3, [r4, #0]
    57c6:	b11b      	cbz	r3, 57d0 <nrf_cc3xx_platform_init_no_rng+0x10>
    57c8:	2301      	movs	r3, #1
    57ca:	6023      	str	r3, [r4, #0]
    57cc:	2000      	movs	r0, #0
    57ce:	bd10      	pop	{r4, pc}
    57d0:	f000 f8ce 	bl	5970 <CC_LibInitNoRng>
    57d4:	2800      	cmp	r0, #0
    57d6:	d0f7      	beq.n	57c8 <nrf_cc3xx_platform_init_no_rng+0x8>
    57d8:	3801      	subs	r0, #1
    57da:	2806      	cmp	r0, #6
    57dc:	d803      	bhi.n	57e6 <nrf_cc3xx_platform_init_no_rng+0x26>
    57de:	4b04      	ldr	r3, [pc, #16]	; (57f0 <nrf_cc3xx_platform_init_no_rng+0x30>)
    57e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    57e4:	bd10      	pop	{r4, pc}
    57e6:	4803      	ldr	r0, [pc, #12]	; (57f4 <nrf_cc3xx_platform_init_no_rng+0x34>)
    57e8:	bd10      	pop	{r4, pc}
    57ea:	bf00      	nop
    57ec:	20000e2c 	.word	0x20000e2c
    57f0:	0000732c 	.word	0x0000732c
    57f4:	ffff8ffe 	.word	0xffff8ffe

000057f8 <nrf_cc3xx_platform_abort>:
    57f8:	f3bf 8f4f 	dsb	sy
    57fc:	4905      	ldr	r1, [pc, #20]	; (5814 <nrf_cc3xx_platform_abort+0x1c>)
    57fe:	4b06      	ldr	r3, [pc, #24]	; (5818 <nrf_cc3xx_platform_abort+0x20>)
    5800:	68ca      	ldr	r2, [r1, #12]
    5802:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5806:	4313      	orrs	r3, r2
    5808:	60cb      	str	r3, [r1, #12]
    580a:	f3bf 8f4f 	dsb	sy
    580e:	bf00      	nop
    5810:	e7fd      	b.n	580e <nrf_cc3xx_platform_abort+0x16>
    5812:	bf00      	nop
    5814:	e000ed00 	.word	0xe000ed00
    5818:	05fa0004 	.word	0x05fa0004

0000581c <CC_PalAbort>:
    581c:	b410      	push	{r4}
    581e:	4b09      	ldr	r3, [pc, #36]	; (5844 <CC_PalAbort+0x28>)
    5820:	4909      	ldr	r1, [pc, #36]	; (5848 <CC_PalAbort+0x2c>)
    5822:	4c0a      	ldr	r4, [pc, #40]	; (584c <CC_PalAbort+0x30>)
    5824:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    5828:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    582c:	6849      	ldr	r1, [r1, #4]
    582e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    5832:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    5836:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    583a:	2300      	movs	r3, #0
    583c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    5840:	bc10      	pop	{r4}
    5842:	4708      	bx	r1
    5844:	5002b000 	.word	0x5002b000
    5848:	20000120 	.word	0x20000120
    584c:	5002a000 	.word	0x5002a000

00005850 <nrf_cc3xx_platform_set_abort>:
    5850:	e9d0 1200 	ldrd	r1, r2, [r0]
    5854:	4b01      	ldr	r3, [pc, #4]	; (585c <nrf_cc3xx_platform_set_abort+0xc>)
    5856:	e9c3 1200 	strd	r1, r2, [r3]
    585a:	4770      	bx	lr
    585c:	20000120 	.word	0x20000120

00005860 <mutex_free>:
    5860:	b510      	push	{r4, lr}
    5862:	4604      	mov	r4, r0
    5864:	b130      	cbz	r0, 5874 <mutex_free+0x14>
    5866:	6863      	ldr	r3, [r4, #4]
    5868:	06db      	lsls	r3, r3, #27
    586a:	d502      	bpl.n	5872 <mutex_free+0x12>
    586c:	2300      	movs	r3, #0
    586e:	6023      	str	r3, [r4, #0]
    5870:	6063      	str	r3, [r4, #4]
    5872:	bd10      	pop	{r4, pc}
    5874:	4b02      	ldr	r3, [pc, #8]	; (5880 <mutex_free+0x20>)
    5876:	4803      	ldr	r0, [pc, #12]	; (5884 <mutex_free+0x24>)
    5878:	685b      	ldr	r3, [r3, #4]
    587a:	4798      	blx	r3
    587c:	e7f3      	b.n	5866 <mutex_free+0x6>
    587e:	bf00      	nop
    5880:	20000120 	.word	0x20000120
    5884:	00007348 	.word	0x00007348

00005888 <mutex_lock>:
    5888:	b1b0      	cbz	r0, 58b8 <mutex_lock+0x30>
    588a:	6843      	ldr	r3, [r0, #4]
    588c:	b193      	cbz	r3, 58b4 <mutex_lock+0x2c>
    588e:	06db      	lsls	r3, r3, #27
    5890:	d50e      	bpl.n	58b0 <mutex_lock+0x28>
    5892:	2301      	movs	r3, #1
    5894:	e850 2f00 	ldrex	r2, [r0]
    5898:	4619      	mov	r1, r3
    589a:	e840 1c00 	strex	ip, r1, [r0]
    589e:	f09c 0f00 	teq	ip, #0
    58a2:	d1f7      	bne.n	5894 <mutex_lock+0xc>
    58a4:	2a01      	cmp	r2, #1
    58a6:	d0f5      	beq.n	5894 <mutex_lock+0xc>
    58a8:	f3bf 8f5f 	dmb	sy
    58ac:	2000      	movs	r0, #0
    58ae:	4770      	bx	lr
    58b0:	4803      	ldr	r0, [pc, #12]	; (58c0 <mutex_lock+0x38>)
    58b2:	4770      	bx	lr
    58b4:	4803      	ldr	r0, [pc, #12]	; (58c4 <mutex_lock+0x3c>)
    58b6:	4770      	bx	lr
    58b8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    58bc:	4770      	bx	lr
    58be:	bf00      	nop
    58c0:	ffff8fe9 	.word	0xffff8fe9
    58c4:	ffff8fea 	.word	0xffff8fea

000058c8 <mutex_unlock>:
    58c8:	b168      	cbz	r0, 58e6 <mutex_unlock+0x1e>
    58ca:	6843      	ldr	r3, [r0, #4]
    58cc:	b13b      	cbz	r3, 58de <mutex_unlock+0x16>
    58ce:	06db      	lsls	r3, r3, #27
    58d0:	d507      	bpl.n	58e2 <mutex_unlock+0x1a>
    58d2:	f3bf 8f5f 	dmb	sy
    58d6:	2300      	movs	r3, #0
    58d8:	6003      	str	r3, [r0, #0]
    58da:	4618      	mov	r0, r3
    58dc:	4770      	bx	lr
    58de:	4803      	ldr	r0, [pc, #12]	; (58ec <mutex_unlock+0x24>)
    58e0:	4770      	bx	lr
    58e2:	4803      	ldr	r0, [pc, #12]	; (58f0 <mutex_unlock+0x28>)
    58e4:	4770      	bx	lr
    58e6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    58ea:	4770      	bx	lr
    58ec:	ffff8fea 	.word	0xffff8fea
    58f0:	ffff8fe9 	.word	0xffff8fe9

000058f4 <mutex_init>:
    58f4:	b510      	push	{r4, lr}
    58f6:	4604      	mov	r4, r0
    58f8:	b120      	cbz	r0, 5904 <mutex_init+0x10>
    58fa:	2200      	movs	r2, #0
    58fc:	2311      	movs	r3, #17
    58fe:	6022      	str	r2, [r4, #0]
    5900:	6063      	str	r3, [r4, #4]
    5902:	bd10      	pop	{r4, pc}
    5904:	4801      	ldr	r0, [pc, #4]	; (590c <mutex_init+0x18>)
    5906:	f7ff ff89 	bl	581c <CC_PalAbort>
    590a:	e7f6      	b.n	58fa <mutex_init+0x6>
    590c:	00007370 	.word	0x00007370

00005910 <nrf_cc3xx_platform_set_mutexes>:
    5910:	b570      	push	{r4, r5, r6, lr}
    5912:	e9d0 2300 	ldrd	r2, r3, [r0]
    5916:	4c13      	ldr	r4, [pc, #76]	; (5964 <nrf_cc3xx_platform_set_mutexes+0x54>)
    5918:	4d13      	ldr	r5, [pc, #76]	; (5968 <nrf_cc3xx_platform_set_mutexes+0x58>)
    591a:	6063      	str	r3, [r4, #4]
    591c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    5920:	e9c4 3002 	strd	r3, r0, [r4, #8]
    5924:	6022      	str	r2, [r4, #0]
    5926:	4b11      	ldr	r3, [pc, #68]	; (596c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    5928:	6808      	ldr	r0, [r1, #0]
    592a:	6018      	str	r0, [r3, #0]
    592c:	6848      	ldr	r0, [r1, #4]
    592e:	6058      	str	r0, [r3, #4]
    5930:	6888      	ldr	r0, [r1, #8]
    5932:	6098      	str	r0, [r3, #8]
    5934:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    5938:	60d8      	str	r0, [r3, #12]
    593a:	6119      	str	r1, [r3, #16]
    593c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    5940:	06db      	lsls	r3, r3, #27
    5942:	d50d      	bpl.n	5960 <nrf_cc3xx_platform_set_mutexes+0x50>
    5944:	2300      	movs	r3, #0
    5946:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    594a:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    594e:	f505 708a 	add.w	r0, r5, #276	; 0x114
    5952:	4790      	blx	r2
    5954:	6823      	ldr	r3, [r4, #0]
    5956:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    595a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    595e:	4718      	bx	r3
    5960:	bd70      	pop	{r4, r5, r6, pc}
    5962:	bf00      	nop
    5964:	20000130 	.word	0x20000130
    5968:	20000e44 	.word	0x20000e44
    596c:	20000140 	.word	0x20000140

00005970 <CC_LibInitNoRng>:
    5970:	b538      	push	{r3, r4, r5, lr}
    5972:	f000 f82f 	bl	59d4 <CC_HalInit>
    5976:	b120      	cbz	r0, 5982 <CC_LibInitNoRng+0x12>
    5978:	2403      	movs	r4, #3
    597a:	f000 f863 	bl	5a44 <CC_PalTerminate>
    597e:	4620      	mov	r0, r4
    5980:	bd38      	pop	{r3, r4, r5, pc}
    5982:	f000 f831 	bl	59e8 <CC_PalInit>
    5986:	b998      	cbnz	r0, 59b0 <CC_LibInitNoRng+0x40>
    5988:	f000 f8ac 	bl	5ae4 <CC_PalPowerSaveModeSelect>
    598c:	b998      	cbnz	r0, 59b6 <CC_LibInitNoRng+0x46>
    598e:	4d0f      	ldr	r5, [pc, #60]	; (59cc <CC_LibInitNoRng+0x5c>)
    5990:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    5994:	0e1b      	lsrs	r3, r3, #24
    5996:	2bf0      	cmp	r3, #240	; 0xf0
    5998:	d108      	bne.n	59ac <CC_LibInitNoRng+0x3c>
    599a:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    599e:	4b0c      	ldr	r3, [pc, #48]	; (59d0 <CC_LibInitNoRng+0x60>)
    59a0:	429a      	cmp	r2, r3
    59a2:	d00a      	beq.n	59ba <CC_LibInitNoRng+0x4a>
    59a4:	2407      	movs	r4, #7
    59a6:	f000 f817 	bl	59d8 <CC_HalTerminate>
    59aa:	e7e6      	b.n	597a <CC_LibInitNoRng+0xa>
    59ac:	2406      	movs	r4, #6
    59ae:	e7fa      	b.n	59a6 <CC_LibInitNoRng+0x36>
    59b0:	2404      	movs	r4, #4
    59b2:	4620      	mov	r0, r4
    59b4:	bd38      	pop	{r3, r4, r5, pc}
    59b6:	2400      	movs	r4, #0
    59b8:	e7f5      	b.n	59a6 <CC_LibInitNoRng+0x36>
    59ba:	2001      	movs	r0, #1
    59bc:	f000 f892 	bl	5ae4 <CC_PalPowerSaveModeSelect>
    59c0:	4604      	mov	r4, r0
    59c2:	2800      	cmp	r0, #0
    59c4:	d1f7      	bne.n	59b6 <CC_LibInitNoRng+0x46>
    59c6:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    59ca:	e7d8      	b.n	597e <CC_LibInitNoRng+0xe>
    59cc:	5002b000 	.word	0x5002b000
    59d0:	20e00000 	.word	0x20e00000

000059d4 <CC_HalInit>:
    59d4:	2000      	movs	r0, #0
    59d6:	4770      	bx	lr

000059d8 <CC_HalTerminate>:
    59d8:	2000      	movs	r0, #0
    59da:	4770      	bx	lr

000059dc <CC_HalMaskInterrupt>:
    59dc:	4b01      	ldr	r3, [pc, #4]	; (59e4 <CC_HalMaskInterrupt+0x8>)
    59de:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    59e2:	4770      	bx	lr
    59e4:	5002b000 	.word	0x5002b000

000059e8 <CC_PalInit>:
    59e8:	b510      	push	{r4, lr}
    59ea:	4811      	ldr	r0, [pc, #68]	; (5a30 <CC_PalInit+0x48>)
    59ec:	f000 f848 	bl	5a80 <CC_PalMutexCreate>
    59f0:	b100      	cbz	r0, 59f4 <CC_PalInit+0xc>
    59f2:	bd10      	pop	{r4, pc}
    59f4:	480f      	ldr	r0, [pc, #60]	; (5a34 <CC_PalInit+0x4c>)
    59f6:	f000 f843 	bl	5a80 <CC_PalMutexCreate>
    59fa:	2800      	cmp	r0, #0
    59fc:	d1f9      	bne.n	59f2 <CC_PalInit+0xa>
    59fe:	4c0e      	ldr	r4, [pc, #56]	; (5a38 <CC_PalInit+0x50>)
    5a00:	4620      	mov	r0, r4
    5a02:	f000 f83d 	bl	5a80 <CC_PalMutexCreate>
    5a06:	2800      	cmp	r0, #0
    5a08:	d1f3      	bne.n	59f2 <CC_PalInit+0xa>
    5a0a:	4b0c      	ldr	r3, [pc, #48]	; (5a3c <CC_PalInit+0x54>)
    5a0c:	480c      	ldr	r0, [pc, #48]	; (5a40 <CC_PalInit+0x58>)
    5a0e:	601c      	str	r4, [r3, #0]
    5a10:	f000 f836 	bl	5a80 <CC_PalMutexCreate>
    5a14:	4601      	mov	r1, r0
    5a16:	2800      	cmp	r0, #0
    5a18:	d1eb      	bne.n	59f2 <CC_PalInit+0xa>
    5a1a:	f000 f82d 	bl	5a78 <CC_PalDmaInit>
    5a1e:	4604      	mov	r4, r0
    5a20:	b108      	cbz	r0, 5a26 <CC_PalInit+0x3e>
    5a22:	4620      	mov	r0, r4
    5a24:	bd10      	pop	{r4, pc}
    5a26:	f000 f83f 	bl	5aa8 <CC_PalPowerSaveModeInit>
    5a2a:	4620      	mov	r0, r4
    5a2c:	e7fa      	b.n	5a24 <CC_PalInit+0x3c>
    5a2e:	bf00      	nop
    5a30:	20000178 	.word	0x20000178
    5a34:	2000016c 	.word	0x2000016c
    5a38:	20000174 	.word	0x20000174
    5a3c:	2000017c 	.word	0x2000017c
    5a40:	20000170 	.word	0x20000170

00005a44 <CC_PalTerminate>:
    5a44:	b508      	push	{r3, lr}
    5a46:	4808      	ldr	r0, [pc, #32]	; (5a68 <CC_PalTerminate+0x24>)
    5a48:	f000 f824 	bl	5a94 <CC_PalMutexDestroy>
    5a4c:	4807      	ldr	r0, [pc, #28]	; (5a6c <CC_PalTerminate+0x28>)
    5a4e:	f000 f821 	bl	5a94 <CC_PalMutexDestroy>
    5a52:	4807      	ldr	r0, [pc, #28]	; (5a70 <CC_PalTerminate+0x2c>)
    5a54:	f000 f81e 	bl	5a94 <CC_PalMutexDestroy>
    5a58:	4806      	ldr	r0, [pc, #24]	; (5a74 <CC_PalTerminate+0x30>)
    5a5a:	f000 f81b 	bl	5a94 <CC_PalMutexDestroy>
    5a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5a62:	f000 b80b 	b.w	5a7c <CC_PalDmaTerminate>
    5a66:	bf00      	nop
    5a68:	20000178 	.word	0x20000178
    5a6c:	2000016c 	.word	0x2000016c
    5a70:	20000174 	.word	0x20000174
    5a74:	20000170 	.word	0x20000170

00005a78 <CC_PalDmaInit>:
    5a78:	2000      	movs	r0, #0
    5a7a:	4770      	bx	lr

00005a7c <CC_PalDmaTerminate>:
    5a7c:	4770      	bx	lr
    5a7e:	bf00      	nop

00005a80 <CC_PalMutexCreate>:
    5a80:	b508      	push	{r3, lr}
    5a82:	4b03      	ldr	r3, [pc, #12]	; (5a90 <CC_PalMutexCreate+0x10>)
    5a84:	6802      	ldr	r2, [r0, #0]
    5a86:	681b      	ldr	r3, [r3, #0]
    5a88:	6810      	ldr	r0, [r2, #0]
    5a8a:	4798      	blx	r3
    5a8c:	2000      	movs	r0, #0
    5a8e:	bd08      	pop	{r3, pc}
    5a90:	20000130 	.word	0x20000130

00005a94 <CC_PalMutexDestroy>:
    5a94:	b508      	push	{r3, lr}
    5a96:	4b03      	ldr	r3, [pc, #12]	; (5aa4 <CC_PalMutexDestroy+0x10>)
    5a98:	6802      	ldr	r2, [r0, #0]
    5a9a:	685b      	ldr	r3, [r3, #4]
    5a9c:	6810      	ldr	r0, [r2, #0]
    5a9e:	4798      	blx	r3
    5aa0:	2000      	movs	r0, #0
    5aa2:	bd08      	pop	{r3, pc}
    5aa4:	20000130 	.word	0x20000130

00005aa8 <CC_PalPowerSaveModeInit>:
    5aa8:	b570      	push	{r4, r5, r6, lr}
    5aaa:	4c09      	ldr	r4, [pc, #36]	; (5ad0 <CC_PalPowerSaveModeInit+0x28>)
    5aac:	4d09      	ldr	r5, [pc, #36]	; (5ad4 <CC_PalPowerSaveModeInit+0x2c>)
    5aae:	6920      	ldr	r0, [r4, #16]
    5ab0:	68ab      	ldr	r3, [r5, #8]
    5ab2:	4798      	blx	r3
    5ab4:	b118      	cbz	r0, 5abe <CC_PalPowerSaveModeInit+0x16>
    5ab6:	4b08      	ldr	r3, [pc, #32]	; (5ad8 <CC_PalPowerSaveModeInit+0x30>)
    5ab8:	4808      	ldr	r0, [pc, #32]	; (5adc <CC_PalPowerSaveModeInit+0x34>)
    5aba:	685b      	ldr	r3, [r3, #4]
    5abc:	4798      	blx	r3
    5abe:	4a08      	ldr	r2, [pc, #32]	; (5ae0 <CC_PalPowerSaveModeInit+0x38>)
    5ac0:	68eb      	ldr	r3, [r5, #12]
    5ac2:	6920      	ldr	r0, [r4, #16]
    5ac4:	2100      	movs	r1, #0
    5ac6:	6011      	str	r1, [r2, #0]
    5ac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5acc:	4718      	bx	r3
    5ace:	bf00      	nop
    5ad0:	20000140 	.word	0x20000140
    5ad4:	20000130 	.word	0x20000130
    5ad8:	20000120 	.word	0x20000120
    5adc:	00007394 	.word	0x00007394
    5ae0:	20000e40 	.word	0x20000e40

00005ae4 <CC_PalPowerSaveModeSelect>:
    5ae4:	b570      	push	{r4, r5, r6, lr}
    5ae6:	4d1b      	ldr	r5, [pc, #108]	; (5b54 <CC_PalPowerSaveModeSelect+0x70>)
    5ae8:	4e1b      	ldr	r6, [pc, #108]	; (5b58 <CC_PalPowerSaveModeSelect+0x74>)
    5aea:	4604      	mov	r4, r0
    5aec:	68b2      	ldr	r2, [r6, #8]
    5aee:	6928      	ldr	r0, [r5, #16]
    5af0:	4790      	blx	r2
    5af2:	b9f8      	cbnz	r0, 5b34 <CC_PalPowerSaveModeSelect+0x50>
    5af4:	b15c      	cbz	r4, 5b0e <CC_PalPowerSaveModeSelect+0x2a>
    5af6:	4c19      	ldr	r4, [pc, #100]	; (5b5c <CC_PalPowerSaveModeSelect+0x78>)
    5af8:	6823      	ldr	r3, [r4, #0]
    5afa:	b1b3      	cbz	r3, 5b2a <CC_PalPowerSaveModeSelect+0x46>
    5afc:	2b01      	cmp	r3, #1
    5afe:	d01b      	beq.n	5b38 <CC_PalPowerSaveModeSelect+0x54>
    5b00:	3b01      	subs	r3, #1
    5b02:	6023      	str	r3, [r4, #0]
    5b04:	6928      	ldr	r0, [r5, #16]
    5b06:	68f3      	ldr	r3, [r6, #12]
    5b08:	4798      	blx	r3
    5b0a:	2000      	movs	r0, #0
    5b0c:	bd70      	pop	{r4, r5, r6, pc}
    5b0e:	4c13      	ldr	r4, [pc, #76]	; (5b5c <CC_PalPowerSaveModeSelect+0x78>)
    5b10:	6821      	ldr	r1, [r4, #0]
    5b12:	b941      	cbnz	r1, 5b26 <CC_PalPowerSaveModeSelect+0x42>
    5b14:	4b12      	ldr	r3, [pc, #72]	; (5b60 <CC_PalPowerSaveModeSelect+0x7c>)
    5b16:	2201      	movs	r2, #1
    5b18:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    5b1c:	4a11      	ldr	r2, [pc, #68]	; (5b64 <CC_PalPowerSaveModeSelect+0x80>)
    5b1e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    5b22:	2b00      	cmp	r3, #0
    5b24:	d1fb      	bne.n	5b1e <CC_PalPowerSaveModeSelect+0x3a>
    5b26:	3101      	adds	r1, #1
    5b28:	6021      	str	r1, [r4, #0]
    5b2a:	68f3      	ldr	r3, [r6, #12]
    5b2c:	6928      	ldr	r0, [r5, #16]
    5b2e:	4798      	blx	r3
    5b30:	2000      	movs	r0, #0
    5b32:	bd70      	pop	{r4, r5, r6, pc}
    5b34:	480c      	ldr	r0, [pc, #48]	; (5b68 <CC_PalPowerSaveModeSelect+0x84>)
    5b36:	bd70      	pop	{r4, r5, r6, pc}
    5b38:	4a0a      	ldr	r2, [pc, #40]	; (5b64 <CC_PalPowerSaveModeSelect+0x80>)
    5b3a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    5b3e:	2b00      	cmp	r3, #0
    5b40:	d1fb      	bne.n	5b3a <CC_PalPowerSaveModeSelect+0x56>
    5b42:	4a07      	ldr	r2, [pc, #28]	; (5b60 <CC_PalPowerSaveModeSelect+0x7c>)
    5b44:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5b48:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    5b4c:	f7ff ff46 	bl	59dc <CC_HalMaskInterrupt>
    5b50:	6823      	ldr	r3, [r4, #0]
    5b52:	e7d5      	b.n	5b00 <CC_PalPowerSaveModeSelect+0x1c>
    5b54:	20000140 	.word	0x20000140
    5b58:	20000130 	.word	0x20000130
    5b5c:	20000e40 	.word	0x20000e40
    5b60:	5002a000 	.word	0x5002a000
    5b64:	5002b000 	.word	0x5002b000
    5b68:	ffff8fe9 	.word	0xffff8fe9

00005b6c <gpio_pin_configure_dt>:
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
    5b6c:	b4f0      	push	{r4, r5, r6, r7}
    5b6e:	4603      	mov	r3, r0
    5b70:	460a      	mov	r2, r1
	return gpio_pin_configure(spec->port,
				  spec->pin,
    5b72:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    5b74:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
    5b76:	6800      	ldr	r0, [r0, #0]
    5b78:	4313      	orrs	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    5b7a:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
    5b7c:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
    5b7e:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    5b80:	d506      	bpl.n	5b90 <gpio_pin_configure_dt+0x24>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    5b82:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    5b86:	d003      	beq.n	5b90 <gpio_pin_configure_dt+0x24>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    5b88:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    5b8a:	bf48      	it	mi
    5b8c:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5b90:	6834      	ldr	r4, [r6, #0]
    5b92:	2501      	movs	r5, #1
    5b94:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5b96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5b9a:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5b9c:	bf4c      	ite	mi
    5b9e:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5ba0:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
    5ba2:	683b      	ldr	r3, [r7, #0]
    5ba4:	6034      	str	r4, [r6, #0]
}
    5ba6:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    5ba8:	4718      	bx	r3

00005baa <gpio_pin_get_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
    5baa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5bac:	4603      	mov	r3, r0
	return gpio_pin_get(spec->port, spec->pin);
    5bae:	6800      	ldr	r0, [r0, #0]
    5bb0:	791c      	ldrb	r4, [r3, #4]
	const struct gpio_driver_data *const data =
    5bb2:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    5bb4:	6883      	ldr	r3, [r0, #8]
    5bb6:	a901      	add	r1, sp, #4
    5bb8:	685b      	ldr	r3, [r3, #4]
    5bba:	4798      	blx	r3
	if (ret == 0) {
    5bbc:	b940      	cbnz	r0, 5bd0 <gpio_pin_get_dt+0x26>
		*value ^= data->invert;
    5bbe:	9b01      	ldr	r3, [sp, #4]
    5bc0:	682a      	ldr	r2, [r5, #0]
    5bc2:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    5bc4:	2301      	movs	r3, #1
    5bc6:	40a3      	lsls	r3, r4
    5bc8:	421a      	tst	r2, r3
    5bca:	bf14      	ite	ne
    5bcc:	2001      	movne	r0, #1
    5bce:	2000      	moveq	r0, #0
}
    5bd0:	b003      	add	sp, #12
    5bd2:	bd30      	pop	{r4, r5, pc}

00005bd4 <device_is_ready>:
    5bd4:	f000 bf84 	b.w	6ae0 <z_device_is_ready>

00005bd8 <k_uptime_get>:
{
    5bd8:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    5bda:	f001 f915 	bl	6e08 <z_impl_k_uptime_ticks>
    5bde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5be2:	fba0 0302 	umull	r0, r3, r0, r2
    5be6:	fb02 3101 	mla	r1, r2, r1, r3
    5bea:	0bc0      	lsrs	r0, r0, #15
}
    5bec:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    5bf0:	0bc9      	lsrs	r1, r1, #15
    5bf2:	bd08      	pop	{r3, pc}

00005bf4 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    5bf4:	4603      	mov	r3, r0
    5bf6:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    5bf8:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    5bfa:	7919      	ldrb	r1, [r3, #4]
    5bfc:	2301      	movs	r3, #1
    5bfe:	fa03 f101 	lsl.w	r1, r3, r1
    5c02:	6903      	ldr	r3, [r0, #16]
    5c04:	681b      	ldr	r3, [r3, #0]
    5c06:	4219      	tst	r1, r3
    5c08:	d003      	beq.n	5c12 <gpio_pin_set_dt.isra.0+0x1e>
	if (value != 0)	{
    5c0a:	b122      	cbz	r2, 5c16 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_clear_bits_raw(port, pins);
    5c0c:	6883      	ldr	r3, [r0, #8]
    5c0e:	691b      	ldr	r3, [r3, #16]
    5c10:	e003      	b.n	5c1a <gpio_pin_set_dt.isra.0+0x26>
	if (value != 0)	{
    5c12:	2a00      	cmp	r2, #0
    5c14:	d0fa      	beq.n	5c0c <gpio_pin_set_dt.isra.0+0x18>
	return api->port_set_bits_raw(port, pins);
    5c16:	6883      	ldr	r3, [r0, #8]
    5c18:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    5c1a:	4718      	bx	r3

00005c1c <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
    5c1c:	b538      	push	{r3, r4, r5, lr}
    5c1e:	2100      	movs	r1, #0
	return k_sleep(Z_TIMEOUT_MS(ms));
    5c20:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    5c24:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    5c28:	f240 30e7 	movw	r0, #999	; 0x3e7
    5c2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5c30:	2300      	movs	r3, #0
    5c32:	fbc4 0105 	smlal	r0, r1, r4, r5
    5c36:	f7fa fa63 	bl	100 <__aeabi_uldivmod>
}
    5c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    5c3e:	f7ff bb57 	b.w	52f0 <z_impl_k_sleep>

00005c42 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5c42:	4603      	mov	r3, r0
    5c44:	b158      	cbz	r0, 5c5e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5c46:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5c48:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5c4c:	2a01      	cmp	r2, #1
    5c4e:	d003      	beq.n	5c58 <sys_notify_validate+0x16>
    5c50:	2a03      	cmp	r2, #3
    5c52:	d104      	bne.n	5c5e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5c54:	6802      	ldr	r2, [r0, #0]
    5c56:	b112      	cbz	r2, 5c5e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5c58:	2000      	movs	r0, #0
    5c5a:	6098      	str	r0, [r3, #8]
    5c5c:	4770      	bx	lr
    5c5e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5c62:	4770      	bx	lr

00005c64 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5c64:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5c66:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    5c68:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    5c6c:	2a03      	cmp	r2, #3
    5c6e:	f04f 0200 	mov.w	r2, #0
{
    5c72:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5c74:	bf0c      	ite	eq
    5c76:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    5c78:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5c7a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5c7c:	4770      	bx	lr

00005c7e <arch_printk_char_out>:
}
    5c7e:	2000      	movs	r0, #0
    5c80:	4770      	bx	lr

00005c82 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    5c82:	b40f      	push	{r0, r1, r2, r3}
    5c84:	b507      	push	{r0, r1, r2, lr}
    5c86:	a904      	add	r1, sp, #16
    5c88:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5c8c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    5c8e:	f7fa ffcf 	bl	c30 <vprintk>

	va_end(ap);
}
    5c92:	b003      	add	sp, #12
    5c94:	f85d eb04 	ldr.w	lr, [sp], #4
    5c98:	b004      	add	sp, #16
    5c9a:	4770      	bx	lr

00005c9c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5c9c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5c9e:	f013 0307 	ands.w	r3, r3, #7
    5ca2:	d105      	bne.n	5cb0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5ca4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    5ca6:	2b00      	cmp	r3, #0
    5ca8:	bf0c      	ite	eq
    5caa:	2000      	moveq	r0, #0
    5cac:	2003      	movne	r0, #3
    5cae:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5cb0:	2b02      	cmp	r3, #2
    5cb2:	d105      	bne.n	5cc0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5cb4:	8b40      	ldrh	r0, [r0, #26]
    5cb6:	fab0 f080 	clz	r0, r0
    5cba:	0940      	lsrs	r0, r0, #5
    5cbc:	0080      	lsls	r0, r0, #2
    5cbe:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5cc0:	2b01      	cmp	r3, #1
    5cc2:	d105      	bne.n	5cd0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5cc4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    5cc6:	2b00      	cmp	r3, #0
    5cc8:	bf0c      	ite	eq
    5cca:	2000      	moveq	r0, #0
    5ccc:	2005      	movne	r0, #5
    5cce:	4770      	bx	lr
	int evt = EVT_NOP;
    5cd0:	2000      	movs	r0, #0
}
    5cd2:	4770      	bx	lr

00005cd4 <validate_args>:
{
    5cd4:	b510      	push	{r4, lr}
    5cd6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5cd8:	b100      	cbz	r0, 5cdc <validate_args+0x8>
    5cda:	b911      	cbnz	r1, 5ce2 <validate_args+0xe>
		return -EINVAL;
    5cdc:	f06f 0015 	mvn.w	r0, #21
}
    5ce0:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    5ce2:	1d08      	adds	r0, r1, #4
    5ce4:	f7ff ffad 	bl	5c42 <sys_notify_validate>
	if ((rv == 0)
    5ce8:	2800      	cmp	r0, #0
    5cea:	d1f9      	bne.n	5ce0 <validate_args+0xc>
	    && ((cli->notify.flags
    5cec:	68a3      	ldr	r3, [r4, #8]
    5cee:	2b03      	cmp	r3, #3
    5cf0:	d9f6      	bls.n	5ce0 <validate_args+0xc>
    5cf2:	e7f3      	b.n	5cdc <validate_args+0x8>

00005cf4 <notify_one>:
{
    5cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cf8:	460d      	mov	r5, r1
    5cfa:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5cfc:	4619      	mov	r1, r3
    5cfe:	1d28      	adds	r0, r5, #4
{
    5d00:	4690      	mov	r8, r2
    5d02:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5d04:	f7ff ffae 	bl	5c64 <sys_notify_finalize>
	if (cb) {
    5d08:	4604      	mov	r4, r0
    5d0a:	b138      	cbz	r0, 5d1c <notify_one+0x28>
		cb(mgr, cli, state, res);
    5d0c:	4633      	mov	r3, r6
    5d0e:	4642      	mov	r2, r8
    5d10:	4629      	mov	r1, r5
    5d12:	4638      	mov	r0, r7
    5d14:	46a4      	mov	ip, r4
}
    5d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5d1a:	4760      	bx	ip
}
    5d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005d20 <transition_complete>:
{
    5d20:	b410      	push	{r4}
	__asm__ volatile(
    5d22:	f04f 0420 	mov.w	r4, #32
    5d26:	f3ef 8211 	mrs	r2, BASEPRI
    5d2a:	f384 8812 	msr	BASEPRI_MAX, r4
    5d2e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5d32:	6141      	str	r1, [r0, #20]
}
    5d34:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5d36:	2101      	movs	r1, #1
    5d38:	f7fa bf88 	b.w	c4c <process_event>

00005d3c <onoff_manager_init>:
{
    5d3c:	b538      	push	{r3, r4, r5, lr}
    5d3e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5d40:	4605      	mov	r5, r0
    5d42:	b158      	cbz	r0, 5d5c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5d44:	b151      	cbz	r1, 5d5c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5d46:	680b      	ldr	r3, [r1, #0]
    5d48:	b143      	cbz	r3, 5d5c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5d4a:	684b      	ldr	r3, [r1, #4]
    5d4c:	b133      	cbz	r3, 5d5c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5d4e:	221c      	movs	r2, #28
    5d50:	2100      	movs	r1, #0
    5d52:	f000 f900 	bl	5f56 <memset>
    5d56:	612c      	str	r4, [r5, #16]
	return 0;
    5d58:	2000      	movs	r0, #0
}
    5d5a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5d5c:	f06f 0015 	mvn.w	r0, #21
    5d60:	e7fb      	b.n	5d5a <onoff_manager_init+0x1e>

00005d62 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5d62:	b570      	push	{r4, r5, r6, lr}
    5d64:	4605      	mov	r5, r0
    5d66:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5d68:	f7ff ffb4 	bl	5cd4 <validate_args>

	if (rv < 0) {
    5d6c:	1e04      	subs	r4, r0, #0
    5d6e:	db15      	blt.n	5d9c <onoff_request+0x3a>
    5d70:	f04f 0320 	mov.w	r3, #32
    5d74:	f3ef 8211 	mrs	r2, BASEPRI
    5d78:	f383 8812 	msr	BASEPRI_MAX, r3
    5d7c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5d80:	8b6b      	ldrh	r3, [r5, #26]
    5d82:	8b2c      	ldrh	r4, [r5, #24]
    5d84:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5d88:	428b      	cmp	r3, r1
    5d8a:	f004 0407 	and.w	r4, r4, #7
    5d8e:	d107      	bne.n	5da0 <onoff_request+0x3e>
	__asm__ volatile(
    5d90:	f382 8811 	msr	BASEPRI, r2
    5d94:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    5d98:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    5d9c:	4620      	mov	r0, r4
    5d9e:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    5da0:	2c02      	cmp	r4, #2
    5da2:	d10c      	bne.n	5dbe <onoff_request+0x5c>
		mgr->refs += 1U;
    5da4:	3301      	adds	r3, #1
    5da6:	836b      	strh	r3, [r5, #26]
    5da8:	f382 8811 	msr	BASEPRI, r2
    5dac:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    5db0:	2300      	movs	r3, #0
    5db2:	4622      	mov	r2, r4
    5db4:	4631      	mov	r1, r6
    5db6:	4628      	mov	r0, r5
    5db8:	f7ff ff9c 	bl	5cf4 <notify_one>
    5dbc:	e7ee      	b.n	5d9c <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    5dbe:	2c06      	cmp	r4, #6
    5dc0:	d814      	bhi.n	5dec <onoff_request+0x8a>
    5dc2:	e8df f004 	tbb	[pc, r4]
    5dc6:	1304      	.short	0x1304
    5dc8:	1a041313 	.word	0x1a041313
    5dcc:	04          	.byte	0x04
    5dcd:	00          	.byte	0x00
	parent->next = child;
    5dce:	2300      	movs	r3, #0
    5dd0:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    5dd2:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5dd4:	b93b      	cbnz	r3, 5de6 <onoff_request+0x84>
	list->head = node;
    5dd6:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    5dda:	b9ac      	cbnz	r4, 5e08 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    5ddc:	2102      	movs	r1, #2
    5dde:	4628      	mov	r0, r5
    5de0:	f7fa ff34 	bl	c4c <process_event>
    5de4:	e7da      	b.n	5d9c <onoff_request+0x3a>
	parent->next = child;
    5de6:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5de8:	606e      	str	r6, [r5, #4]
}
    5dea:	e7f6      	b.n	5dda <onoff_request+0x78>
    5dec:	f382 8811 	msr	BASEPRI, r2
    5df0:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    5df4:	f06f 0404 	mvn.w	r4, #4
    5df8:	e7d0      	b.n	5d9c <onoff_request+0x3a>
    5dfa:	f382 8811 	msr	BASEPRI, r2
    5dfe:	f3bf 8f6f 	isb	sy
    5e02:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5e06:	e7c9      	b.n	5d9c <onoff_request+0x3a>
    5e08:	f382 8811 	msr	BASEPRI, r2
    5e0c:	f3bf 8f6f 	isb	sy
		if (notify) {
    5e10:	e7c4      	b.n	5d9c <onoff_request+0x3a>

00005e12 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    5e12:	4604      	mov	r4, r0
    5e14:	b508      	push	{r3, lr}
    5e16:	4608      	mov	r0, r1
    5e18:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    5e1a:	461a      	mov	r2, r3
    5e1c:	47a0      	blx	r4
	return z_impl_z_current_get();
    5e1e:	f7ff fa81 	bl	5324 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    5e22:	f7fc f8b1 	bl	1f88 <z_impl_k_thread_abort>

00005e26 <encode_uint>:
{
    5e26:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e2a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    5e2c:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    5e2e:	2b6f      	cmp	r3, #111	; 0x6f
{
    5e30:	4680      	mov	r8, r0
    5e32:	460f      	mov	r7, r1
    5e34:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5e36:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    5e3a:	d029      	beq.n	5e90 <encode_uint+0x6a>
    5e3c:	d824      	bhi.n	5e88 <encode_uint+0x62>
		return 10;
    5e3e:	2b58      	cmp	r3, #88	; 0x58
    5e40:	bf0c      	ite	eq
    5e42:	2610      	moveq	r6, #16
    5e44:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    5e46:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    5e4a:	4632      	mov	r2, r6
    5e4c:	2300      	movs	r3, #0
    5e4e:	4640      	mov	r0, r8
    5e50:	4639      	mov	r1, r7
    5e52:	f7fa f955 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5e56:	2a09      	cmp	r2, #9
    5e58:	b2d4      	uxtb	r4, r2
    5e5a:	d81e      	bhi.n	5e9a <encode_uint+0x74>
    5e5c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    5e5e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5e60:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    5e62:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5e66:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    5e6a:	d301      	bcc.n	5e70 <encode_uint+0x4a>
    5e6c:	45d1      	cmp	r9, sl
    5e6e:	d811      	bhi.n	5e94 <encode_uint+0x6e>
	if (conv->flag_hash) {
    5e70:	782b      	ldrb	r3, [r5, #0]
    5e72:	069b      	lsls	r3, r3, #26
    5e74:	d505      	bpl.n	5e82 <encode_uint+0x5c>
		if (radix == 8) {
    5e76:	2e08      	cmp	r6, #8
    5e78:	d115      	bne.n	5ea6 <encode_uint+0x80>
			conv->altform_0 = true;
    5e7a:	78ab      	ldrb	r3, [r5, #2]
    5e7c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    5e80:	70ab      	strb	r3, [r5, #2]
}
    5e82:	4648      	mov	r0, r9
    5e84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    5e88:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    5e8c:	2b70      	cmp	r3, #112	; 0x70
    5e8e:	e7d7      	b.n	5e40 <encode_uint+0x1a>
	switch (specifier) {
    5e90:	2608      	movs	r6, #8
    5e92:	e7d8      	b.n	5e46 <encode_uint+0x20>
		value /= radix;
    5e94:	4680      	mov	r8, r0
    5e96:	460f      	mov	r7, r1
    5e98:	e7d7      	b.n	5e4a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5e9a:	f1bb 0f19 	cmp.w	fp, #25
    5e9e:	bf94      	ite	ls
    5ea0:	3437      	addls	r4, #55	; 0x37
    5ea2:	3457      	addhi	r4, #87	; 0x57
    5ea4:	e7db      	b.n	5e5e <encode_uint+0x38>
		} else if (radix == 16) {
    5ea6:	2e10      	cmp	r6, #16
    5ea8:	d1eb      	bne.n	5e82 <encode_uint+0x5c>
			conv->altform_0c = true;
    5eaa:	78ab      	ldrb	r3, [r5, #2]
    5eac:	f043 0310 	orr.w	r3, r3, #16
    5eb0:	e7e6      	b.n	5e80 <encode_uint+0x5a>

00005eb2 <outs>:
{
    5eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5eb6:	4607      	mov	r7, r0
    5eb8:	4688      	mov	r8, r1
    5eba:	4615      	mov	r5, r2
    5ebc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5ebe:	4614      	mov	r4, r2
    5ec0:	42b4      	cmp	r4, r6
    5ec2:	d305      	bcc.n	5ed0 <outs+0x1e>
    5ec4:	b10e      	cbz	r6, 5eca <outs+0x18>
	return (int)count;
    5ec6:	1b60      	subs	r0, r4, r5
    5ec8:	e008      	b.n	5edc <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5eca:	7823      	ldrb	r3, [r4, #0]
    5ecc:	2b00      	cmp	r3, #0
    5ece:	d0fa      	beq.n	5ec6 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    5ed0:	f814 0b01 	ldrb.w	r0, [r4], #1
    5ed4:	4641      	mov	r1, r8
    5ed6:	47b8      	blx	r7
		if (rc < 0) {
    5ed8:	2800      	cmp	r0, #0
    5eda:	daf1      	bge.n	5ec0 <outs+0xe>
}
    5edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005ee0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    5ee0:	4770      	bx	lr

00005ee2 <abort_function>:
{
    5ee2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5ee4:	2000      	movs	r0, #0
    5ee6:	f7fb fb71 	bl	15cc <sys_reboot>

00005eea <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5eea:	f000 be03 	b.w	6af4 <z_fatal_error>

00005eee <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5eee:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    5ef0:	6800      	ldr	r0, [r0, #0]
    5ef2:	f000 bdff 	b.w	6af4 <z_fatal_error>

00005ef6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5ef6:	2100      	movs	r1, #0
    5ef8:	2001      	movs	r0, #1
    5efa:	f7ff bff6 	b.w	5eea <z_arm_fatal_error>

00005efe <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    5efe:	b508      	push	{r3, lr}
	handler();
    5f00:	f7fb fdea 	bl	1ad8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5f04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5f08:	f7fb bec2 	b.w	1c90 <z_arm_exc_exit>

00005f0c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    5f0c:	3901      	subs	r1, #1
    5f0e:	4603      	mov	r3, r0
    5f10:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5f14:	b90a      	cbnz	r2, 5f1a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    5f16:	701a      	strb	r2, [r3, #0]

	return dest;
}
    5f18:	4770      	bx	lr
		*d = *s;
    5f1a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    5f1e:	e7f7      	b.n	5f10 <strcpy+0x4>

00005f20 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5f20:	4603      	mov	r3, r0
	size_t n = 0;
    5f22:	2000      	movs	r0, #0

	while (*s != '\0') {
    5f24:	5c1a      	ldrb	r2, [r3, r0]
    5f26:	b902      	cbnz	r2, 5f2a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    5f28:	4770      	bx	lr
		n++;
    5f2a:	3001      	adds	r0, #1
    5f2c:	e7fa      	b.n	5f24 <strlen+0x4>

00005f2e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5f2e:	4603      	mov	r3, r0
	size_t n = 0;
    5f30:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5f32:	5c1a      	ldrb	r2, [r3, r0]
    5f34:	b10a      	cbz	r2, 5f3a <strnlen+0xc>
    5f36:	4288      	cmp	r0, r1
    5f38:	d100      	bne.n	5f3c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    5f3a:	4770      	bx	lr
		n++;
    5f3c:	3001      	adds	r0, #1
    5f3e:	e7f8      	b.n	5f32 <strnlen+0x4>

00005f40 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    5f40:	b510      	push	{r4, lr}
    5f42:	1e43      	subs	r3, r0, #1
    5f44:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    5f46:	4291      	cmp	r1, r2
    5f48:	d100      	bne.n	5f4c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5f4a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    5f4c:	f811 4b01 	ldrb.w	r4, [r1], #1
    5f50:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5f54:	e7f7      	b.n	5f46 <memcpy+0x6>

00005f56 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5f56:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    5f58:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    5f5a:	4603      	mov	r3, r0
	while (n > 0) {
    5f5c:	4293      	cmp	r3, r2
    5f5e:	d100      	bne.n	5f62 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5f60:	4770      	bx	lr
		*(d_byte++) = c_byte;
    5f62:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5f66:	e7f9      	b.n	5f5c <memset+0x6>

00005f68 <_stdout_hook_default>:
}
    5f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5f6c:	4770      	bx	lr

00005f6e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    5f6e:	2806      	cmp	r0, #6
    5f70:	d108      	bne.n	5f84 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    5f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f76:	2201      	movs	r2, #1
    5f78:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    5f7c:	f3bf 8f4f 	dsb	sy
        __WFE();
    5f80:	bf20      	wfe
    while (true)
    5f82:	e7fd      	b.n	5f80 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    5f84:	4770      	bx	lr

00005f86 <pm_state_exit_post_ops>:
    5f86:	2300      	movs	r3, #0
    5f88:	f383 8811 	msr	BASEPRI, r3
    5f8c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    5f90:	4770      	bx	lr

00005f92 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5f92:	6903      	ldr	r3, [r0, #16]
    5f94:	b2c9      	uxtb	r1, r1
    5f96:	220c      	movs	r2, #12
    5f98:	fb01 3302 	mla	r3, r1, r2, r3
    5f9c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    5f9e:	f000 0007 	and.w	r0, r0, #7
    5fa2:	4770      	bx	lr

00005fa4 <set_on_state>:
	__asm__ volatile(
    5fa4:	f04f 0320 	mov.w	r3, #32
    5fa8:	f3ef 8211 	mrs	r2, BASEPRI
    5fac:	f383 8812 	msr	BASEPRI_MAX, r3
    5fb0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5fb4:	6803      	ldr	r3, [r0, #0]
    5fb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5fba:	f043 0302 	orr.w	r3, r3, #2
    5fbe:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5fc0:	f382 8811 	msr	BASEPRI, r2
    5fc4:	f3bf 8f6f 	isb	sy
}
    5fc8:	4770      	bx	lr

00005fca <stop>:
{
    5fca:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    5fcc:	6903      	ldr	r3, [r0, #16]
	return &data->subsys[type];
    5fce:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    5fd0:	f04f 0420 	mov.w	r4, #32
    5fd4:	f3ef 8511 	mrs	r5, BASEPRI
    5fd8:	f384 8812 	msr	BASEPRI_MAX, r4
    5fdc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5fe0:	260c      	movs	r6, #12
    5fe2:	fb06 3401 	mla	r4, r6, r1, r3
    5fe6:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5fe8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    5fec:	d008      	beq.n	6000 <stop+0x36>
    5fee:	42a2      	cmp	r2, r4
    5ff0:	d006      	beq.n	6000 <stop+0x36>
	__asm__ volatile(
    5ff2:	f385 8811 	msr	BASEPRI, r5
    5ff6:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    5ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5ffe:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6000:	fb06 3301 	mla	r3, r6, r1, r3
    6004:	2201      	movs	r2, #1
    6006:	641a      	str	r2, [r3, #64]	; 0x40
    6008:	f385 8811 	msr	BASEPRI, r5
    600c:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    6010:	6843      	ldr	r3, [r0, #4]
    6012:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    6016:	685b      	ldr	r3, [r3, #4]
    6018:	4798      	blx	r3
	return 0;
    601a:	2000      	movs	r0, #0
    601c:	e7ef      	b.n	5ffe <stop+0x34>

0000601e <api_stop>:
	return stop(dev, subsys, CTX_API);
    601e:	2280      	movs	r2, #128	; 0x80
    6020:	f7ff bfd3 	b.w	5fca <stop>

00006024 <async_start>:
{
    6024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6026:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    6028:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    602a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    602c:	f04f 0520 	mov.w	r5, #32
    6030:	f3ef 8611 	mrs	r6, BASEPRI
    6034:	f385 8812 	msr	BASEPRI_MAX, r5
    6038:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    603c:	250c      	movs	r5, #12
    603e:	fb05 4401 	mla	r4, r5, r1, r4
    6042:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6044:	f005 0c07 	and.w	ip, r5, #7
    6048:	f1bc 0f01 	cmp.w	ip, #1
    604c:	d10c      	bne.n	6068 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    604e:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    6050:	f386 8811 	msr	BASEPRI, r6
    6054:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    6058:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    605c:	6843      	ldr	r3, [r0, #4]
    605e:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    6062:	4798      	blx	r3
	return 0;
    6064:	2000      	movs	r0, #0
}
    6066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6068:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    606c:	42af      	cmp	r7, r5
    606e:	f386 8811 	msr	BASEPRI, r6
    6072:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    6076:	bf0c      	ite	eq
    6078:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    607c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6080:	e7f1      	b.n	6066 <async_start+0x42>

00006082 <api_start>:
{
    6082:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6084:	2480      	movs	r4, #128	; 0x80
    6086:	9400      	str	r4, [sp, #0]
    6088:	f7ff ffcc 	bl	6024 <async_start>
}
    608c:	b002      	add	sp, #8
    608e:	bd10      	pop	{r4, pc}

00006090 <onoff_started_callback>:
	return &data->mgr[type];
    6090:	6900      	ldr	r0, [r0, #16]
{
    6092:	b410      	push	{r4}
	return &data->mgr[type];
    6094:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6096:	241c      	movs	r4, #28
    6098:	fb03 0004 	mla	r0, r3, r4, r0
    609c:	2100      	movs	r1, #0
}
    609e:	bc10      	pop	{r4}
	notify(mgr, 0);
    60a0:	4710      	bx	r2

000060a2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    60a2:	2000      	movs	r0, #0
    60a4:	f000 bbd9 	b.w	685a <nrfx_clock_start>

000060a8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    60a8:	2000      	movs	r0, #0
    60aa:	f000 bc12 	b.w	68d2 <nrfx_clock_stop>

000060ae <blocking_start_callback>:
{
    60ae:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    60b0:	f7fe be0a 	b.w	4cc8 <z_impl_k_sem_give>

000060b4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    60b4:	6843      	ldr	r3, [r0, #4]
    60b6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    60b8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    60bc:	600b      	str	r3, [r1, #0]
}
    60be:	2000      	movs	r0, #0
    60c0:	4770      	bx	lr

000060c2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    60c2:	6843      	ldr	r3, [r0, #4]
    60c4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    60c6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    60ca:	4042      	eors	r2, r0
    60cc:	400a      	ands	r2, r1
    60ce:	4042      	eors	r2, r0
    p_reg->OUT = value;
    60d0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    60d4:	2000      	movs	r0, #0
    60d6:	4770      	bx	lr

000060d8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    60d8:	6843      	ldr	r3, [r0, #4]
    60da:	685b      	ldr	r3, [r3, #4]
}
    60dc:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    60de:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    60e2:	4770      	bx	lr

000060e4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    60e4:	6843      	ldr	r3, [r0, #4]
    60e6:	685b      	ldr	r3, [r3, #4]
}
    60e8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    60ea:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    60ee:	4770      	bx	lr

000060f0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    60f0:	6843      	ldr	r3, [r0, #4]
    60f2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    60f4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    60f8:	404b      	eors	r3, r1
    p_reg->OUT = value;
    60fa:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    60fe:	2000      	movs	r0, #0
    6100:	4770      	bx	lr

00006102 <gpio_nrfx_manage_callback>:
	return port->data;
    6102:	6903      	ldr	r3, [r0, #16]
	return list->head;
    6104:	6858      	ldr	r0, [r3, #4]
{
    6106:	b510      	push	{r4, lr}
	if (!sys_slist_is_empty(callbacks)) {
    6108:	b148      	cbz	r0, 611e <gpio_nrfx_manage_callback+0x1c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    610a:	4288      	cmp	r0, r1
    610c:	d113      	bne.n	6136 <gpio_nrfx_manage_callback+0x34>
Z_GENLIST_REMOVE(slist, snode)
    610e:	689c      	ldr	r4, [r3, #8]
	return node->next;
    6110:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    6112:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6114:	42a1      	cmp	r1, r4
    6116:	d100      	bne.n	611a <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    6118:	6098      	str	r0, [r3, #8]
	parent->next = child;
    611a:	2000      	movs	r0, #0
    611c:	6008      	str	r0, [r1, #0]
	if (set) {
    611e:	b97a      	cbnz	r2, 6140 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    6120:	2000      	movs	r0, #0
}
    6122:	bd10      	pop	{r4, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6124:	4281      	cmp	r1, r0
    6126:	d106      	bne.n	6136 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    6128:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    612a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    612c:	6898      	ldr	r0, [r3, #8]
    612e:	4281      	cmp	r1, r0
    6130:	d1f3      	bne.n	611a <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    6132:	609c      	str	r4, [r3, #8]
}
    6134:	e7f1      	b.n	611a <gpio_nrfx_manage_callback+0x18>
	return node->next;
    6136:	4604      	mov	r4, r0
    6138:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    613a:	2800      	cmp	r0, #0
    613c:	d1f2      	bne.n	6124 <gpio_nrfx_manage_callback+0x22>
			if (!set) {
    613e:	b13a      	cbz	r2, 6150 <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
    6140:	685a      	ldr	r2, [r3, #4]
    6142:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    6144:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    6146:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6148:	2a00      	cmp	r2, #0
    614a:	d1e9      	bne.n	6120 <gpio_nrfx_manage_callback+0x1e>
	list->tail = node;
    614c:	6099      	str	r1, [r3, #8]
}
    614e:	e7e7      	b.n	6120 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    6150:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6154:	e7e5      	b.n	6122 <gpio_nrfx_manage_callback+0x20>

00006156 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    6156:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twi_config *config = dev->config;
    6158:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    615a:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
    615c:	d405      	bmi.n	616a <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    615e:	f3c1 0242 	ubfx	r2, r1, #1, #3
    6162:	2a01      	cmp	r2, #1
    6164:	d004      	beq.n	6170 <i2c_nrfx_twi_configure+0x1a>
    6166:	2a02      	cmp	r2, #2
    6168:	d00a      	beq.n	6180 <i2c_nrfx_twi_configure+0x2a>
    616a:	f06f 0015 	mvn.w	r0, #21
}
    616e:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    6170:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    6172:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    6176:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
    617a:	6241      	str	r1, [r0, #36]	; 0x24
	return 0;
    617c:	2000      	movs	r0, #0
    617e:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    6180:	681b      	ldr	r3, [r3, #0]
    6182:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    6186:	e7f6      	b.n	6176 <i2c_nrfx_twi_configure+0x20>

00006188 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    6188:	6902      	ldr	r2, [r0, #16]
{
    618a:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    618c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6190:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6194:	2000      	movs	r0, #0
    6196:	4770      	bx	lr

00006198 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6198:	6843      	ldr	r3, [r0, #4]
    619a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    619c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    61a0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    61a4:	4770      	bx	lr

000061a6 <tx_start>:
{
    61a6:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    61a8:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    61aa:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    61ac:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    61b0:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61b4:	2200      	movs	r2, #0
    61b6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    61ba:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    61be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    61c2:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    61c6:	6862      	ldr	r2, [r4, #4]
    61c8:	06d2      	lsls	r2, r2, #27
    61ca:	d50f      	bpl.n	61ec <tx_start+0x46>
	if (data->async) {
    61cc:	6902      	ldr	r2, [r0, #16]
    61ce:	68d2      	ldr	r2, [r2, #12]
    61d0:	b12a      	cbz	r2, 61de <tx_start+0x38>
		data->async->low_power_mask |= mask;
    61d2:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
    61d6:	f041 0101 	orr.w	r1, r1, #1
    61da:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    61de:	2208      	movs	r2, #8
    61e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    61e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    61e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    61ec:	2201      	movs	r2, #1
    61ee:	609a      	str	r2, [r3, #8]
}
    61f0:	bd10      	pop	{r4, pc}

000061f2 <user_callback>:
	if (data->async->user_callback) {
    61f2:	6903      	ldr	r3, [r0, #16]
    61f4:	68da      	ldr	r2, [r3, #12]
    61f6:	6813      	ldr	r3, [r2, #0]
    61f8:	b10b      	cbz	r3, 61fe <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
    61fa:	6852      	ldr	r2, [r2, #4]
    61fc:	4718      	bx	r3
}
    61fe:	4770      	bx	lr

00006200 <notify_uart_rx_rdy>:
{
    6200:	b570      	push	{r4, r5, r6, lr}
    6202:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
    6204:	6906      	ldr	r6, [r0, #16]
{
    6206:	4604      	mov	r4, r0
    6208:	460d      	mov	r5, r1
	struct uart_event evt = {
    620a:	2214      	movs	r2, #20
    620c:	2100      	movs	r1, #0
    620e:	a801      	add	r0, sp, #4
    6210:	f7ff fea1 	bl	5f56 <memset>
    6214:	2302      	movs	r3, #2
    6216:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    621a:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    621c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    621e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    6220:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
    6222:	a901      	add	r1, sp, #4
    6224:	4620      	mov	r0, r4
	struct uart_event evt = {
    6226:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
    622a:	f7ff ffe2 	bl	61f2 <user_callback>
}
    622e:	b006      	add	sp, #24
    6230:	bd70      	pop	{r4, r5, r6, pc}

00006232 <rx_buf_release>:
{
    6232:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
    6234:	680e      	ldr	r6, [r1, #0]
{
    6236:	b086      	sub	sp, #24
    6238:	4605      	mov	r5, r0
    623a:	460c      	mov	r4, r1
	if (*buf) {
    623c:	b17e      	cbz	r6, 625e <rx_buf_release+0x2c>
		struct uart_event evt = {
    623e:	2214      	movs	r2, #20
    6240:	2100      	movs	r1, #0
    6242:	a801      	add	r0, sp, #4
    6244:	f7ff fe87 	bl	5f56 <memset>
    6248:	2304      	movs	r3, #4
		user_callback(dev, &evt);
    624a:	eb0d 0103 	add.w	r1, sp, r3
    624e:	4628      	mov	r0, r5
		struct uart_event evt = {
    6250:	f88d 3004 	strb.w	r3, [sp, #4]
    6254:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
    6256:	f7ff ffcc 	bl	61f2 <user_callback>
		*buf = NULL;
    625a:	2300      	movs	r3, #0
    625c:	6023      	str	r3, [r4, #0]
}
    625e:	b006      	add	sp, #24
    6260:	bd70      	pop	{r4, r5, r6, pc}

00006262 <notify_rx_disable>:
{
    6262:	b510      	push	{r4, lr}
    6264:	b086      	sub	sp, #24
    6266:	4604      	mov	r4, r0
	struct uart_event evt = {
    6268:	2214      	movs	r2, #20
    626a:	2100      	movs	r1, #0
    626c:	a801      	add	r0, sp, #4
    626e:	f7ff fe72 	bl	5f56 <memset>
    6272:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
    6274:	a901      	add	r1, sp, #4
    6276:	4620      	mov	r0, r4
	struct uart_event evt = {
    6278:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    627c:	f7ff ffb9 	bl	61f2 <user_callback>
}
    6280:	b006      	add	sp, #24
    6282:	bd10      	pop	{r4, pc}

00006284 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
    6284:	6843      	ldr	r3, [r0, #4]
{
    6286:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
    6288:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    628a:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    628c:	f04f 0020 	mov.w	r0, #32
    6290:	f3ef 8511 	mrs	r5, BASEPRI
    6294:	f380 8812 	msr	BASEPRI_MAX, r0
    6298:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    629c:	68e4      	ldr	r4, [r4, #12]
    629e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    62a0:	b190      	cbz	r0, 62c8 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
    62a2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    62a4:	b998      	cbnz	r0, 62ce <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
    62a6:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    62aa:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    62ae:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    62b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    62b6:	f042 0220 	orr.w	r2, r2, #32
    62ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
    62be:	f385 8811 	msr	BASEPRI, r5
    62c2:	f3bf 8f6f 	isb	sy
}
    62c6:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
    62c8:	f06f 000c 	mvn.w	r0, #12
    62cc:	e7f7      	b.n	62be <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
    62ce:	f06f 000f 	mvn.w	r0, #15
    62d2:	e7f4      	b.n	62be <uarte_nrfx_rx_buf_rsp+0x3a>

000062d4 <uarte_nrfx_callback_set>:
	if (!data->async) {
    62d4:	6903      	ldr	r3, [r0, #16]
    62d6:	68db      	ldr	r3, [r3, #12]
    62d8:	b11b      	cbz	r3, 62e2 <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
    62da:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
    62de:	2000      	movs	r0, #0
    62e0:	4770      	bx	lr
		return -ENOTSUP;
    62e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    62e6:	4770      	bx	lr

000062e8 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    62e8:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    62ea:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
    62ec:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
    62ee:	681b      	ldr	r3, [r3, #0]
{
    62f0:	b510      	push	{r4, lr}
	if (data->async) {
    62f2:	b958      	cbnz	r0, 630c <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    62f4:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    62f8:	b15c      	cbz	r4, 6312 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    62fa:	7d52      	ldrb	r2, [r2, #21]
    62fc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62fe:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6302:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6306:	2201      	movs	r2, #1
    6308:	601a      	str	r2, [r3, #0]
}
    630a:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    630c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6310:	e7fb      	b.n	630a <uarte_nrfx_poll_in+0x22>
		return -1;
    6312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6316:	e7f8      	b.n	630a <uarte_nrfx_poll_in+0x22>

00006318 <uarte_nrfx_rx_disable>:
{
    6318:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    631a:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    631c:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
    631e:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
    6320:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    6322:	6e03      	ldr	r3, [r0, #96]	; 0x60
    6324:	b1b3      	cbz	r3, 6354 <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
    6326:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6328:	b153      	cbz	r3, 6340 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    632a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    632e:	f023 0320 	bic.w	r3, r3, #32
    6332:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6336:	2300      	movs	r3, #0
    6338:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    633c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	z_impl_k_timer_stop(timer);
    6340:	3088      	adds	r0, #136	; 0x88
    6342:	f000 fd73 	bl	6e2c <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    6346:	68eb      	ldr	r3, [r5, #12]
    6348:	2000      	movs	r0, #0
    634a:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    634e:	2301      	movs	r3, #1
    6350:	6063      	str	r3, [r4, #4]
}
    6352:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    6354:	f06f 000d 	mvn.w	r0, #13
    6358:	e7fb      	b.n	6352 <uarte_nrfx_rx_disable+0x3a>

0000635a <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    635a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
    635c:	6807      	ldr	r7, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    635e:	4615      	mov	r5, r2
    return p_reg->RXD.AMOUNT;
    6360:	f8d7 653c 	ldr.w	r6, [r7, #1340]	; 0x53c
	uint8_t *flush_buf = buf ? buf : tmp_buf;
    6364:	460c      	mov	r4, r1
    6366:	b1e9      	cbz	r1, 63a4 <rx_flush.isra.0+0x4a>
		memset(buf, dirty, len);
    6368:	2100      	movs	r1, #0
    636a:	4620      	mov	r0, r4
    636c:	f7ff fdf3 	bl	5f56 <memset>
		flush_len = len;
    6370:	4623      	mov	r3, r4
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6372:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6376:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
    6378:	f8c7 5538 	str.w	r5, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    637c:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    637e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    6382:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6386:	62f9      	str	r1, [r7, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6388:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    638c:	2900      	cmp	r1, #0
    638e:	d0fb      	beq.n	6388 <rx_flush.isra.0+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6390:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    6394:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
    6398:	f8d7 053c 	ldr.w	r0, [r7, #1340]	; 0x53c
	if (!buf) {
    639c:	b92c      	cbnz	r4, 63aa <rx_flush.isra.0+0x50>
			return rx_amount;
    639e:	b2c0      	uxtb	r0, r0
}
    63a0:	b003      	add	sp, #12
    63a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flush_len = sizeof(tmp_buf);
    63a4:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
    63a6:	466b      	mov	r3, sp
    63a8:	e7e3      	b.n	6372 <rx_flush.isra.0+0x18>
	if (rx_amount != prev_rx_amount) {
    63aa:	4286      	cmp	r6, r0
    63ac:	d1f7      	bne.n	639e <rx_flush.isra.0+0x44>
    63ae:	1962      	adds	r2, r4, r5
	for (int i = 0; i < flush_len; i++) {
    63b0:	42a2      	cmp	r2, r4
    63b2:	d101      	bne.n	63b8 <rx_flush.isra.0+0x5e>
	return 0;
    63b4:	2000      	movs	r0, #0
    63b6:	e7f3      	b.n	63a0 <rx_flush.isra.0+0x46>
		if (buf[i] != dirty) {
    63b8:	f814 3b01 	ldrb.w	r3, [r4], #1
    63bc:	2b00      	cmp	r3, #0
    63be:	d0f7      	beq.n	63b0 <rx_flush.isra.0+0x56>
    63c0:	e7ed      	b.n	639e <rx_flush.isra.0+0x44>

000063c2 <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    63c2:	68c2      	ldr	r2, [r0, #12]
    63c4:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
    63c6:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
    63c8:	b508      	push	{r3, lr}
    63ca:	4603      	mov	r3, r0
	if (!remaining) {
    63cc:	d00b      	beq.n	63e6 <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    63ce:	2a08      	cmp	r2, #8
    63d0:	bf28      	it	cs
    63d2:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    63d4:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
    63d6:	3018      	adds	r0, #24
    63d8:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    63da:	689b      	ldr	r3, [r3, #8]
    63dc:	4419      	add	r1, r3
    63de:	f7ff fdaf 	bl	5f40 <memcpy>
	return true;
    63e2:	2001      	movs	r0, #1
}
    63e4:	bd08      	pop	{r3, pc}
		return false;
    63e6:	4610      	mov	r0, r2
    63e8:	e7fc      	b.n	63e4 <setup_tx_cache.isra.0+0x22>

000063ea <async_uart_release>:
{
    63ea:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    63ec:	6903      	ldr	r3, [r0, #16]
{
    63ee:	4604      	mov	r4, r0
	__asm__ volatile(
    63f0:	f04f 0220 	mov.w	r2, #32
    63f4:	f3ef 8611 	mrs	r6, BASEPRI
    63f8:	f382 8812 	msr	BASEPRI_MAX, r2
    63fc:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    6400:	68dd      	ldr	r5, [r3, #12]
    6402:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    6406:	ea23 0301 	bic.w	r3, r3, r1
    640a:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    640e:	b973      	cbnz	r3, 642e <async_uart_release+0x44>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    6410:	2902      	cmp	r1, #2
    6412:	d107      	bne.n	6424 <async_uart_release+0x3a>
				rx_flush(dev, data->async->rx_flush_buffer,
    6414:	6840      	ldr	r0, [r0, #4]
    6416:	2205      	movs	r2, #5
    6418:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    641c:	f7ff ff9d 	bl	635a <rx_flush.isra.0>
			data->async->rx_flush_cnt =
    6420:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	return config->uarte_regs;
    6424:	6863      	ldr	r3, [r4, #4]
    6426:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6428:	2200      	movs	r2, #0
    642a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    642e:	f386 8811 	msr	BASEPRI, r6
    6432:	f3bf 8f6f 	isb	sy
}
    6436:	bd70      	pop	{r4, r5, r6, pc}

00006438 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    6438:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    643a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    643c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6440:	b940      	cbnz	r0, 6454 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6442:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6444:	079b      	lsls	r3, r3, #30
    6446:	d406      	bmi.n	6456 <is_tx_ready.isra.0+0x1e>
    6448:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    644c:	3800      	subs	r0, #0
    644e:	bf18      	it	ne
    6450:	2001      	movne	r0, #1
    6452:	4770      	bx	lr
    6454:	2001      	movs	r0, #1
}
    6456:	4770      	bx	lr

00006458 <start_tx_locked>:
{
    6458:	b510      	push	{r4, lr}
    645a:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
    645c:	6840      	ldr	r0, [r0, #4]
    645e:	f7ff ffeb 	bl	6438 <is_tx_ready.isra.0>
		data->async->pending_tx = true;
    6462:	68cb      	ldr	r3, [r1, #12]
	if (!is_tx_ready(dev)) {
    6464:	b918      	cbnz	r0, 646e <start_tx_locked+0x16>
		data->async->pending_tx = true;
    6466:	2201      	movs	r2, #1
    6468:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    646c:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
    646e:	2200      	movs	r2, #0
    6470:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    6474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6478:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    647c:	4620      	mov	r0, r4
    647e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
    6482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    6486:	f7ff be8e 	b.w	61a6 <tx_start>

0000648a <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    648a:	b510      	push	{r4, lr}
    648c:	2200      	movs	r2, #0
    648e:	4604      	mov	r4, r0
    6490:	2101      	movs	r1, #1
    6492:	2028      	movs	r0, #40	; 0x28
    6494:	f7fb fb08 	bl	1aa8 <z_arm_irq_priority_set>
    6498:	2028      	movs	r0, #40	; 0x28
    649a:	f7fb fae9 	bl	1a70 <arch_irq_enable>
    649e:	4620      	mov	r0, r4
    64a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    64a4:	f7fc bba8 	b.w	2bf8 <uarte_instance_init.constprop.0>

000064a8 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    64a8:	b510      	push	{r4, lr}
    64aa:	2200      	movs	r2, #0
    64ac:	4604      	mov	r4, r0
    64ae:	2101      	movs	r1, #1
    64b0:	2002      	movs	r0, #2
    64b2:	f7fb faf9 	bl	1aa8 <z_arm_irq_priority_set>
    64b6:	2002      	movs	r0, #2
    64b8:	f7fb fada 	bl	1a70 <arch_irq_enable>
    64bc:	4620      	mov	r0, r4
    64be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    64c2:	f7fc bb99 	b.w	2bf8 <uarte_instance_init.constprop.0>

000064c6 <uarte_nrfx_rx_enable>:
{
    64c6:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
    64ca:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    64ce:	f8d0 b010 	ldr.w	fp, [r0, #16]
	return config->uarte_regs;
    64d2:	f8da 8000 	ldr.w	r8, [sl]
{
    64d6:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
    64d8:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
    64dc:	4605      	mov	r5, r0
    64de:	4689      	mov	r9, r1
	if (cfg->disable_rx) {
    64e0:	2a00      	cmp	r2, #0
    64e2:	d172      	bne.n	65ca <uarte_nrfx_rx_enable+0x104>
	if (data->async->rx_enabled) {
    64e4:	f8db 100c 	ldr.w	r1, [fp, #12]
    64e8:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
    64ec:	2a00      	cmp	r2, #0
    64ee:	d16f      	bne.n	65d0 <uarte_nrfx_rx_enable+0x10a>
		MAX(timeout / RX_TIMEOUT_DIV,
    64f0:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
    64f4:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    64f6:	bfd2      	itee	le
    64f8:	235c      	movle	r3, #92	; 0x5c
    64fa:	2205      	movgt	r2, #5
    64fc:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
    6500:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
    6504:	2300      	movs	r3, #0
	data->async->rx_next_buf = NULL;
    6506:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
    650a:	670b      	str	r3, [r1, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    650c:	f8da 3004 	ldr.w	r3, [sl, #4]
    6510:	06da      	lsls	r2, r3, #27
	data->async->rx_buf_len = len;
    6512:	e9c1 9718 	strd	r9, r7, [r1, #96]	; 0x60
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6516:	d524      	bpl.n	6562 <uarte_nrfx_rx_enable+0x9c>
		if (data->async->rx_flush_cnt) {
    6518:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
    651c:	b30e      	cbz	r6, 6562 <uarte_nrfx_rx_enable+0x9c>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    651e:	42be      	cmp	r6, r7
    6520:	bf28      	it	cs
    6522:	463e      	movcs	r6, r7
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
    6524:	4648      	mov	r0, r9
    6526:	4632      	mov	r2, r6
    6528:	31cc      	adds	r1, #204	; 0xcc
    652a:	f7ff fd09 	bl	5f40 <memcpy>
			if (!len) {
    652e:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
    6530:	44b1      	add	r9, r6
			if (!len) {
    6532:	d116      	bne.n	6562 <uarte_nrfx_rx_enable+0x9c>
				data->async->rx_flush_cnt -= cpy_len;
    6534:	f8db 200c 	ldr.w	r2, [fp, #12]
    6538:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    653c:	1b9b      	subs	r3, r3, r6
    653e:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    6542:	4631      	mov	r1, r6
    6544:	4628      	mov	r0, r5
    6546:	f7ff fe5b 	bl	6200 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    654a:	f8db 100c 	ldr.w	r1, [fp, #12]
    654e:	4628      	mov	r0, r5
    6550:	3160      	adds	r1, #96	; 0x60
    6552:	f7ff fe6e 	bl	6232 <rx_buf_release>
				notify_rx_disable(dev);
    6556:	4628      	mov	r0, r5
    6558:	f7ff fe83 	bl	6262 <notify_rx_disable>
				return 0;
    655c:	2000      	movs	r0, #0
}
    655e:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6562:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6564:	f8c8 9534 	str.w	r9, [r8, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6568:	f8c8 7538 	str.w	r7, [r8, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    656c:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
    6570:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
    6574:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
    6578:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
	data->async->rx_enabled = true;
    657c:	f8db 300c 	ldr.w	r3, [fp, #12]
    6580:	2201      	movs	r2, #1
    6582:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6586:	f8da 3004 	ldr.w	r3, [sl, #4]
    658a:	06db      	lsls	r3, r3, #27
    658c:	d519      	bpl.n	65c2 <uarte_nrfx_rx_enable+0xfc>
	__asm__ volatile(
    658e:	f04f 0320 	mov.w	r3, #32
    6592:	f3ef 8111 	mrs	r1, BASEPRI
    6596:	f383 8812 	msr	BASEPRI_MAX, r3
    659a:	f3bf 8f6f 	isb	sy
	if (data->async) {
    659e:	692b      	ldr	r3, [r5, #16]
	const struct uarte_nrfx_config *config = dev->config;
    65a0:	6868      	ldr	r0, [r5, #4]
	if (data->async) {
    65a2:	68db      	ldr	r3, [r3, #12]
    65a4:	b12b      	cbz	r3, 65b2 <uarte_nrfx_rx_enable+0xec>
		data->async->low_power_mask |= mask;
    65a6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
    65aa:	f042 0202 	orr.w	r2, r2, #2
    65ae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
    65b2:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    65b4:	2208      	movs	r2, #8
    65b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    65ba:	f381 8811 	msr	BASEPRI, r1
    65be:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    65c2:	2301      	movs	r3, #1
    65c4:	f8c8 3000 	str.w	r3, [r8]
	return 0;
    65c8:	e7c8      	b.n	655c <uarte_nrfx_rx_enable+0x96>
		return -ENOTSUP;
    65ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
    65ce:	e7c6      	b.n	655e <uarte_nrfx_rx_enable+0x98>
		return -EBUSY;
    65d0:	f06f 000f 	mvn.w	r0, #15
    65d4:	e7c3      	b.n	655e <uarte_nrfx_rx_enable+0x98>

000065d6 <rx_timeout>:
{
    65d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
    65d8:	6b47      	ldr	r7, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
    65da:	68fb      	ldr	r3, [r7, #12]
    65dc:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
    65e0:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    65e4:	bb1a      	cbnz	r2, 662e <rx_timeout+0x58>
	const struct device *dev = data->dev;
    65e6:	683d      	ldr	r5, [r7, #0]
	return config->uarte_regs;
    65e8:	686a      	ldr	r2, [r5, #4]
    65ea:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
    65ec:	2110      	movs	r1, #16
    65ee:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    65f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    65f6:	6f59      	ldr	r1, [r3, #116]	; 0x74
    65f8:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
    65fa:	bf1e      	ittt	ne
    65fc:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    65fe:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
    6600:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
    6604:	e9d3 2c1d 	ldrd	r2, ip, [r3, #116]	; 0x74
    6608:	eba2 020c 	sub.w	r2, r2, ip
	if (!HW_RX_COUNTING_ENABLED(data) &&
    660c:	2a00      	cmp	r2, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    660e:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
	int32_t len = data->async->rx_total_byte_cnt
    6612:	4614      	mov	r4, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
    6614:	da0c      	bge.n	6630 <rx_timeout+0x5a>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    6616:	4288      	cmp	r0, r1
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    6618:	f8c3 c0c0 	str.w	ip, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    661c:	d902      	bls.n	6624 <rx_timeout+0x4e>
		len = data->async->rx_buf_len - data->async->rx_offset;
    661e:	1a0c      	subs	r4, r1, r0
	if (len > 0) {
    6620:	2c00      	cmp	r4, #0
    6622:	dc20      	bgt.n	6666 <rx_timeout+0x90>
	return config->uarte_regs;
    6624:	686b      	ldr	r3, [r5, #4]
    6626:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6628:	2210      	movs	r2, #16
    662a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    662e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    6630:	eb02 0c00 	add.w	ip, r2, r0
    6634:	458c      	cmp	ip, r1
    6636:	d8f2      	bhi.n	661e <rx_timeout+0x48>
	if (len > 0) {
    6638:	2a00      	cmp	r2, #0
    663a:	d0f3      	beq.n	6624 <rx_timeout+0x4e>
				< data->async->rx_timeout_slab)) {
    663c:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
    6640:	428a      	cmp	r2, r1
    6642:	da12      	bge.n	666a <rx_timeout+0x94>
			notify_uart_rx_rdy(dev, len);
    6644:	4628      	mov	r0, r5
    6646:	4621      	mov	r1, r4
    6648:	f7ff fdda 	bl	6200 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    664c:	68f8      	ldr	r0, [r7, #12]
    664e:	6e83      	ldr	r3, [r0, #104]	; 0x68
    6650:	4423      	add	r3, r4
    6652:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    6654:	6f83      	ldr	r3, [r0, #120]	; 0x78
    6656:	4423      	add	r3, r4
    6658:	6783      	str	r3, [r0, #120]	; 0x78
		if (clipped) {
    665a:	2e00      	cmp	r6, #0
    665c:	d0e2      	beq.n	6624 <rx_timeout+0x4e>
    665e:	3088      	adds	r0, #136	; 0x88
    6660:	f000 fbe4 	bl	6e2c <z_impl_k_timer_stop>
}
    6664:	e7de      	b.n	6624 <rx_timeout+0x4e>
		clipped = true;
    6666:	2601      	movs	r6, #1
    6668:	e7ec      	b.n	6644 <rx_timeout+0x6e>
			data->async->rx_timeout_left -=
    666a:	1a52      	subs	r2, r2, r1
    666c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		if (clipped) {
    6670:	e7d8      	b.n	6624 <rx_timeout+0x4e>

00006672 <uarte_nrfx_tx_abort>:
{
    6672:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    6674:	6843      	ldr	r3, [r0, #4]
    6676:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
    6678:	6903      	ldr	r3, [r0, #16]
    667a:	68d8      	ldr	r0, [r3, #12]
    667c:	6883      	ldr	r3, [r0, #8]
    667e:	b14b      	cbz	r3, 6694 <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
    6680:	2400      	movs	r4, #0
    6682:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
    6686:	3028      	adds	r0, #40	; 0x28
    6688:	f000 fbd0 	bl	6e2c <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    668c:	2301      	movs	r3, #1
    668e:	60eb      	str	r3, [r5, #12]
	return 0;
    6690:	4620      	mov	r0, r4
}
    6692:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    6694:	f06f 000d 	mvn.w	r0, #13
    6698:	e7fb      	b.n	6692 <uarte_nrfx_tx_abort+0x20>

0000669a <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
    669a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    669c:	6818      	ldr	r0, [r3, #0]
    669e:	f7ff bfe8 	b.w	6672 <uarte_nrfx_tx_abort>

000066a2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    66a2:	4770      	bx	lr

000066a4 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    66a4:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    66a6:	6843      	ldr	r3, [r0, #4]
    66a8:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    66aa:	7a03      	ldrb	r3, [r0, #8]
    66ac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    66b0:	3b01      	subs	r3, #1
    66b2:	00db      	lsls	r3, r3, #3
    66b4:	6845      	ldr	r5, [r0, #4]
    66b6:	6814      	ldr	r4, [r2, #0]
    66b8:	441d      	add	r5, r3
    66ba:	42ac      	cmp	r4, r5
    66bc:	d902      	bls.n	66c4 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    66be:	f06f 0001 	mvn.w	r0, #1
}
    66c2:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    66c4:	7965      	ldrb	r5, [r4, #5]
    66c6:	428d      	cmp	r5, r1
    66c8:	d002      	beq.n	66d0 <pinctrl_lookup_state+0x2c>
		(*state)++;
    66ca:	3408      	adds	r4, #8
    66cc:	6014      	str	r4, [r2, #0]
    66ce:	e7f1      	b.n	66b4 <pinctrl_lookup_state+0x10>
			return 0;
    66d0:	2000      	movs	r0, #0
    66d2:	e7f6      	b.n	66c2 <pinctrl_lookup_state+0x1e>

000066d4 <nrf_gpio_pin_write>:
    if (value == 0)
    66d4:	b909      	cbnz	r1, 66da <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    66d6:	f7fc bf9b 	b.w	3610 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    66da:	f7fc bfcb 	b.w	3674 <nrf_gpio_pin_set>

000066de <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    66de:	b570      	push	{r4, r5, r6, lr}
    66e0:	4615      	mov	r5, r2
    66e2:	4604      	mov	r4, r0
    66e4:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    66e8:	42a6      	cmp	r6, r4
    66ea:	d101      	bne.n	66f0 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    66ec:	2000      	movs	r0, #0
}
    66ee:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    66f0:	6823      	ldr	r3, [r4, #0]
    66f2:	0c1a      	lsrs	r2, r3, #16
    66f4:	2a22      	cmp	r2, #34	; 0x22
    66f6:	f200 808e 	bhi.w	6816 <pinctrl_configure_pins+0x138>
    66fa:	e8df f002 	tbb	[pc, r2]
    66fe:	1d12      	.short	0x1d12
    6700:	39294324 	.word	0x39294324
    6704:	8c8c8c43 	.word	0x8c8c8c43
    6708:	8c4d488c 	.word	0x8c4d488c
    670c:	8c8c8c8c 	.word	0x8c8c8c8c
    6710:	8c8c8c8c 	.word	0x8c8c8c8c
    6714:	68635e52 	.word	0x68635e52
    6718:	6d8c8c8c 	.word	0x6d8c8c8c
    671c:	827d7873 	.word	0x827d7873
    6720:	87          	.byte	0x87
    6721:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    6722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6726:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    672a:	6820      	ldr	r0, [r4, #0]
    672c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6730:	f7fc ffa0 	bl	3674 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6734:	2201      	movs	r2, #1
    6736:	e015      	b.n	6764 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    6738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    673c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6740:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6742:	2100      	movs	r1, #0
    6744:	e00f      	b.n	6766 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    6746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    674a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    674e:	e7ec      	b.n	672a <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    6750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6754:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6758:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    675a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    675e:	f7fc ff57 	bl	3610 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6762:	2200      	movs	r2, #0
    6764:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6766:	6820      	ldr	r0, [r4, #0]
    6768:	f7fc ff62 	bl	3630 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    676c:	3404      	adds	r4, #4
    676e:	e7bb      	b.n	66e8 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    6770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6774:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    6778:	6820      	ldr	r0, [r4, #0]
    677a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    677e:	f7fc ff47 	bl	3610 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    6782:	e7d7      	b.n	6734 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    6784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6788:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    678c:	e7d8      	b.n	6740 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    678e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6792:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6796:	e7d3      	b.n	6740 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    6798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    679c:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    67a0:	e7ce      	b.n	6740 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    67a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    67a6:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    67aa:	6820      	ldr	r0, [r4, #0]
    67ac:	f3c0 3140 	ubfx	r1, r0, #13, #1
    67b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    67b4:	f7ff ff8e 	bl	66d4 <nrf_gpio_pin_write>
    67b8:	e7bc      	b.n	6734 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    67ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    67be:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    67c2:	e7f2      	b.n	67aa <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    67c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    67c8:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    67cc:	e7ed      	b.n	67aa <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    67ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    67d2:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    67d6:	e7e8      	b.n	67aa <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    67d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    67dc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    67e0:	2201      	movs	r2, #1
    67e2:	e7ae      	b.n	6742 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    67e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    67e8:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    67ec:	e7f8      	b.n	67e0 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    67ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    67f2:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    67f6:	e7f3      	b.n	67e0 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    67f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    67fc:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6800:	e7ee      	b.n	67e0 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    6802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6806:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    680a:	e7e9      	b.n	67e0 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    680c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6810:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    6814:	e7e4      	b.n	67e0 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    6816:	f06f 0085 	mvn.w	r0, #133	; 0x85
    681a:	e768      	b.n	66ee <pinctrl_configure_pins+0x10>

0000681c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    681c:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    681e:	2000      	movs	r0, #0
    6820:	f7fb fce4 	bl	21ec <sys_arch_reboot>

00006824 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6824:	f7fe bfcc 	b.w	57c0 <nrf_cc3xx_platform_init_no_rng>

00006828 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6828:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    682a:	f7fb f839 	bl	18a0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    682e:	f7fb f8eb 	bl	1a08 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6836:	f7fe bfc3 	b.w	57c0 <nrf_cc3xx_platform_init_no_rng>

0000683a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    683a:	4700      	bx	r0

0000683c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    683c:	f000 bae6 	b.w	6e0c <z_impl_k_busy_wait>

00006840 <nrfx_clock_enable>:
{
    6840:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6842:	2000      	movs	r0, #0
    6844:	f7fb f922 	bl	1a8c <arch_irq_is_enabled>
    6848:	b908      	cbnz	r0, 684e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    684a:	f7fb f911 	bl	1a70 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    684e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6852:	2200      	movs	r2, #0
    6854:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    6858:	bd08      	pop	{r3, pc}

0000685a <nrfx_clock_start>:
{
    685a:	b508      	push	{r3, lr}
    switch (domain)
    685c:	b110      	cbz	r0, 6864 <nrfx_clock_start+0xa>
    685e:	2801      	cmp	r0, #1
    6860:	d02c      	beq.n	68bc <nrfx_clock_start+0x62>
}
    6862:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6868:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    686c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    6870:	03c8      	lsls	r0, r1, #15
    6872:	d40b      	bmi.n	688c <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6874:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6878:	07d9      	lsls	r1, r3, #31
    687a:	d50f      	bpl.n	689c <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    687c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6880:	079b      	lsls	r3, r3, #30
    6882:	d408      	bmi.n	6896 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    6884:	2302      	movs	r3, #2
    6886:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    688a:	e7ea      	b.n	6862 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    688c:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6890:	2b01      	cmp	r3, #1
    6892:	d004      	beq.n	689e <nrfx_clock_start+0x44>
    6894:	b113      	cbz	r3, 689c <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6896:	2000      	movs	r0, #0
    6898:	f7fd f83a 	bl	3910 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    689c:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    689e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    68a2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    68a6:	2300      	movs	r3, #0
    68a8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    68ac:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    68b0:	2302      	movs	r3, #2
    68b2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68b6:	2301      	movs	r3, #1
    68b8:	6093      	str	r3, [r2, #8]
}
    68ba:	e7d2      	b.n	6862 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    68bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    68c0:	2200      	movs	r2, #0
    68c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    68c6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    68ca:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68ce:	6018      	str	r0, [r3, #0]
}
    68d0:	e7c7      	b.n	6862 <nrfx_clock_start+0x8>

000068d2 <nrfx_clock_stop>:
    clock_stop(domain);
    68d2:	f7fd b81d 	b.w	3910 <clock_stop>

000068d6 <nrf_gpio_reconfigure>:
{
    68d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    68d8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    68da:	a801      	add	r0, sp, #4
{
    68dc:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    68e0:	4616      	mov	r6, r2
    68e2:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    68e4:	f7fd f8bc 	bl	3a60 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    68e8:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    68ea:	f1b6 0c00 	subs.w	ip, r6, #0
    68ee:	bf18      	it	ne
    68f0:	f04f 0c01 	movne.w	ip, #1
    68f4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    68f8:	1e0b      	subs	r3, r1, #0
    68fa:	bf18      	it	ne
    68fc:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    68fe:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6900:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6904:	bf14      	ite	ne
    6906:	f04f 0c0c 	movne.w	ip, #12
    690a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    690e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6910:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6914:	bf14      	ite	ne
    6916:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    691a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    691e:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6920:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6924:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6928:	bf14      	ite	ne
    692a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    692e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6932:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    6936:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    693a:	b101      	cbz	r1, 693e <nrf_gpio_reconfigure+0x68>
    693c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    693e:	b10e      	cbz	r6, 6944 <nrf_gpio_reconfigure+0x6e>
    6940:	7836      	ldrb	r6, [r6, #0]
    6942:	0076      	lsls	r6, r6, #1
    6944:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6946:	b10d      	cbz	r5, 694c <nrf_gpio_reconfigure+0x76>
    6948:	782d      	ldrb	r5, [r5, #0]
    694a:	00ad      	lsls	r5, r5, #2
    694c:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    694e:	b10c      	cbz	r4, 6954 <nrf_gpio_reconfigure+0x7e>
    6950:	7824      	ldrb	r4, [r4, #0]
    6952:	0224      	lsls	r4, r4, #8
    6954:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    6956:	b10f      	cbz	r7, 695c <nrf_gpio_reconfigure+0x86>
    6958:	783f      	ldrb	r7, [r7, #0]
    695a:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    695c:	430c      	orrs	r4, r1
    695e:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    6960:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    6964:	b003      	add	sp, #12
    6966:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006968 <nrf_gpio_cfg_sense_set>:
{
    6968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    696a:	f10d 030f 	add.w	r3, sp, #15
    696e:	9301      	str	r3, [sp, #4]
    6970:	2300      	movs	r3, #0
{
    6972:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6976:	9300      	str	r3, [sp, #0]
    6978:	461a      	mov	r2, r3
    697a:	4619      	mov	r1, r3
    697c:	f7ff ffab 	bl	68d6 <nrf_gpio_reconfigure>
}
    6980:	b005      	add	sp, #20
    6982:	f85d fb04 	ldr.w	pc, [sp], #4

00006986 <twi_transfer>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6986:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
{
    698a:	b530      	push	{r4, r5, lr}
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    698c:	b12b      	cbz	r3, 699a <twi_transfer+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    698e:	2300      	movs	r3, #0
    6990:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    6994:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    6998:	2301      	movs	r3, #1
    if (p_cb->error)
    699a:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    699e:	b322      	cbz	r2, 69ea <twi_transfer+0x64>
    69a0:	2200      	movs	r2, #0
    69a2:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    69a6:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    69aa:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    69ae:	f8d0 411c 	ldr.w	r4, [r0, #284]	; 0x11c
    69b2:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    69b6:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    if (stopped)
    69ba:	2b00      	cmp	r3, #0
    69bc:	d079      	beq.n	6ab2 <twi_transfer+0x12c>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    69be:	2200      	movs	r2, #0
    69c0:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
        if (!p_cb->error)
    69c4:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    69c8:	2a00      	cmp	r2, #0
    69ca:	d137      	bne.n	6a3c <twi_transfer+0xb6>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    69cc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    69ce:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    69d0:	42a5      	cmp	r5, r4
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    69d2:	bf1f      	itttt	ne
    69d4:	2305      	movne	r3, #5
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    69d6:	f8c0 2500 	strne.w	r2, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    69da:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
        return false;
    69de:	4613      	movne	r3, r2
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    69e0:	f083 0301 	eor.w	r3, r3, #1
    69e4:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    69e8:	e028      	b.n	6a3c <twi_transfer+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69ea:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    69ee:	b114      	cbz	r4, 69f6 <twi_transfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    69f0:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    69f4:	e00e      	b.n	6a14 <twi_transfer+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69f6:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    69fa:	b36a      	cbz	r2, 6a58 <twi_transfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    69fc:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
    6a00:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    6a04:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    6a06:	3201      	adds	r2, #1
    6a08:	634a      	str	r2, [r1, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a0a:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    6a0e:	b145      	cbz	r5, 6a22 <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a10:	f8c0 4124 	str.w	r4, [r0, #292]	; 0x124
    6a14:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a18:	2201      	movs	r2, #1
    6a1a:	6142      	str	r2, [r0, #20]
                p_cb->error = true;
    6a1c:	f881 202f 	strb.w	r2, [r1, #47]	; 0x2f
    6a20:	e7cb      	b.n	69ba <twi_transfer+0x34>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    6a22:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    6a24:	42a2      	cmp	r2, r4
    6a26:	d204      	bcs.n	6a32 <twi_transfer+0xac>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    6a28:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    p_reg->TXD = data;
    6a2a:	5ca2      	ldrb	r2, [r4, r2]
    6a2c:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
    6a30:	e7c3      	b.n	69ba <twi_transfer+0x34>
        if (p_cb->curr_tx_no_stop)
    6a32:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    6a36:	b11a      	cbz	r2, 6a40 <twi_transfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a38:	2301      	movs	r3, #1
    6a3a:	61c3      	str	r3, [r0, #28]
                    return false;
    6a3c:	2000      	movs	r0, #0
}
    6a3e:	bd30      	pop	{r4, r5, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    6a40:	6a0a      	ldr	r2, [r1, #32]
    6a42:	f012 0f40 	tst.w	r2, #64	; 0x40
    6a46:	f04f 0201 	mov.w	r2, #1
    6a4a:	d003      	beq.n	6a54 <twi_transfer+0xce>
    6a4c:	61c2      	str	r2, [r0, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    6a4e:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
    6a52:	e7f3      	b.n	6a3c <twi_transfer+0xb6>
    6a54:	6142      	str	r2, [r0, #20]
    6a56:	e7b0      	b.n	69ba <twi_transfer+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a58:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    6a5c:	2c00      	cmp	r4, #0
    6a5e:	d0ac      	beq.n	69ba <twi_transfer+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a60:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    6a64:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a68:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    6a6c:	2c00      	cmp	r4, #0
    6a6e:	d1bf      	bne.n	69f0 <twi_transfer+0x6a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    6a70:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    6a72:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    6a74:	42a2      	cmp	r2, r4
    6a76:	d2a0      	bcs.n	69ba <twi_transfer+0x34>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    6a78:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    6a7a:	f8d0 5518 	ldr.w	r5, [r0, #1304]	; 0x518
    6a7e:	54a5      	strb	r5, [r4, r2]
        ++(p_cb->bytes_transferred);
    6a80:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6a82:	6a8c      	ldr	r4, [r1, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    6a84:	3201      	adds	r2, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6a86:	1e65      	subs	r5, r4, #1
    6a88:	42aa      	cmp	r2, r5
        ++(p_cb->bytes_transferred);
    6a8a:	634a      	str	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6a8c:	d108      	bne.n	6aa0 <twi_transfer+0x11a>
    6a8e:	6a0a      	ldr	r2, [r1, #32]
    6a90:	0654      	lsls	r4, r2, #25
    6a92:	d402      	bmi.n	6a9a <twi_transfer+0x114>
    p_reg->SHORTS = mask;
    6a94:	2202      	movs	r2, #2
    6a96:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a9a:	2201      	movs	r2, #1
    6a9c:	6202      	str	r2, [r0, #32]
    6a9e:	e78c      	b.n	69ba <twi_transfer+0x34>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6aa0:	42a2      	cmp	r2, r4
    6aa2:	d1fa      	bne.n	6a9a <twi_transfer+0x114>
    6aa4:	6a0a      	ldr	r2, [r1, #32]
    6aa6:	0652      	lsls	r2, r2, #25
    6aa8:	d587      	bpl.n	69ba <twi_transfer+0x34>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    6aaa:	2302      	movs	r3, #2
    6aac:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    6ab0:	e7c4      	b.n	6a3c <twi_transfer+0xb6>
    return true;
    6ab2:	2001      	movs	r0, #1
    6ab4:	e7c3      	b.n	6a3e <twi_transfer+0xb8>

00006ab6 <nrf_gpio_pin_set>:
{
    6ab6:	b507      	push	{r0, r1, r2, lr}
    6ab8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6aba:	a801      	add	r0, sp, #4
    6abc:	f7fd fd94 	bl	45e8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6ac0:	9a01      	ldr	r2, [sp, #4]
    6ac2:	2301      	movs	r3, #1
    6ac4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    6ac6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    6aca:	b003      	add	sp, #12
    6acc:	f85d fb04 	ldr.w	pc, [sp], #4

00006ad0 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    6ad0:	f7fd bdfc 	b.w	46cc <_DoInit>

00006ad4 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    6ad4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    6ad6:	f7ff fffb 	bl	6ad0 <SEGGER_RTT_Init>

	return 0;
}
    6ada:	2000      	movs	r0, #0
    6adc:	bd08      	pop	{r3, pc}

00006ade <z_device_state_init>:
}
    6ade:	4770      	bx	lr

00006ae0 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6ae0:	b138      	cbz	r0, 6af2 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6ae2:	68c3      	ldr	r3, [r0, #12]
    6ae4:	8818      	ldrh	r0, [r3, #0]
    6ae6:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6aea:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    6aee:	4258      	negs	r0, r3
    6af0:	4158      	adcs	r0, r3
}
    6af2:	4770      	bx	lr

00006af4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6af6:	4605      	mov	r5, r0
    6af8:	460e      	mov	r6, r1
	__asm__ volatile(
    6afa:	f04f 0320 	mov.w	r3, #32
    6afe:	f3ef 8711 	mrs	r7, BASEPRI
    6b02:	f383 8812 	msr	BASEPRI_MAX, r3
    6b06:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6b0a:	f7fe fc0b 	bl	5324 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    6b0e:	4631      	mov	r1, r6
    6b10:	4604      	mov	r4, r0
    6b12:	4628      	mov	r0, r5
    6b14:	f7ff fe82 	bl	681c <k_sys_fatal_error_handler>
	__asm__ volatile(
    6b18:	f387 8811 	msr	BASEPRI, r7
    6b1c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6b20:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6b22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6b26:	f7fb ba2f 	b.w	1f88 <z_impl_k_thread_abort>

00006b2a <z_early_memset>:
	(void) memset(dst, c, n);
    6b2a:	f7ff ba14 	b.w	5f56 <memset>

00006b2e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    6b2e:	f7ff ba07 	b.w	5f40 <memcpy>

00006b32 <k_mem_slab_init>:
{
    6b32:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    6b34:	2400      	movs	r4, #0
    6b36:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6b38:	ea41 0402 	orr.w	r4, r1, r2
    6b3c:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    6b40:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    6b44:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6b46:	d10c      	bne.n	6b62 <k_mem_slab_init+0x30>
    6b48:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
    6b4a:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
    6b4c:	6145      	str	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    6b4e:	d103      	bne.n	6b58 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    6b50:	e9c0 0000 	strd	r0, r0, [r0]
}
    6b54:	2000      	movs	r0, #0
}
    6b56:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    6b58:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    6b5a:	3401      	adds	r4, #1
    6b5c:	460d      	mov	r5, r1
		p += slab->block_size;
    6b5e:	4411      	add	r1, r2
    6b60:	e7f3      	b.n	6b4a <k_mem_slab_init+0x18>
		return -EINVAL;
    6b62:	f06f 0015 	mvn.w	r0, #21
	return rc;
    6b66:	e7f6      	b.n	6b56 <k_mem_slab_init+0x24>

00006b68 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b6a:	4604      	mov	r4, r0
    6b6c:	460d      	mov	r5, r1
	__asm__ volatile(
    6b6e:	f04f 0320 	mov.w	r3, #32
    6b72:	f3ef 8611 	mrs	r6, BASEPRI
    6b76:	f383 8812 	msr	BASEPRI_MAX, r3
    6b7a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6b7e:	6947      	ldr	r7, [r0, #20]
    6b80:	b977      	cbnz	r7, 6ba0 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6b82:	f000 f8c9 	bl	6d18 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    6b86:	b158      	cbz	r0, 6ba0 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6b88:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6b8a:	6142      	str	r2, [r0, #20]
    6b8c:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    6b8e:	f000 f88c 	bl	6caa <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6b92:	4631      	mov	r1, r6
    6b94:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6b98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    6b9c:	f7fe ba88 	b.w	50b0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    6ba0:	682b      	ldr	r3, [r5, #0]
    6ba2:	6962      	ldr	r2, [r4, #20]
    6ba4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6ba6:	682b      	ldr	r3, [r5, #0]
    6ba8:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    6baa:	69a3      	ldr	r3, [r4, #24]
    6bac:	3b01      	subs	r3, #1
    6bae:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6bb0:	f386 8811 	msr	BASEPRI, r6
    6bb4:	f3bf 8f6f 	isb	sy
}
    6bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006bba <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6bba:	f3ef 8005 	mrs	r0, IPSR
}
    6bbe:	3800      	subs	r0, #0
    6bc0:	bf18      	it	ne
    6bc2:	2001      	movne	r0, #1
    6bc4:	4770      	bx	lr

00006bc6 <z_pm_save_idle_exit>:
{
    6bc6:	b508      	push	{r3, lr}
	pm_system_resume();
    6bc8:	f7fa fd5a 	bl	1680 <pm_system_resume>
}
    6bcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    6bd0:	f7ff bd67 	b.w	66a2 <sys_clock_idle_exit>

00006bd4 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    6bd4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6bd8:	428b      	cmp	r3, r1
    6bda:	d001      	beq.n	6be0 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    6bdc:	f7fe ba22 	b.w	5024 <z_set_prio>
}
    6be0:	2000      	movs	r0, #0
    6be2:	4770      	bx	lr

00006be4 <z_impl_k_mutex_init>:
{
    6be4:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6be6:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    6be8:	e9c3 0002 	strd	r0, r0, [r3, #8]
    6bec:	e9c3 3300 	strd	r3, r3, [r3]
}
    6bf0:	4770      	bx	lr

00006bf2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    6bf2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6bf6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6bf8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6bfa:	2300      	movs	r3, #0
	node->prev = NULL;
    6bfc:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    6c00:	4770      	bx	lr

00006c02 <unpend_thread_no_timeout>:
{
    6c02:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    6c04:	f7ff fff5 	bl	6bf2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6c08:	7b43      	ldrb	r3, [r0, #13]
    6c0a:	f023 0302 	bic.w	r3, r3, #2
    6c0e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    6c10:	2300      	movs	r3, #0
    6c12:	6083      	str	r3, [r0, #8]
}
    6c14:	bd08      	pop	{r3, pc}

00006c16 <z_thread_timeout>:
{
    6c16:	b510      	push	{r4, lr}
    6c18:	4601      	mov	r1, r0
	__asm__ volatile(
    6c1a:	f04f 0320 	mov.w	r3, #32
    6c1e:	f3ef 8411 	mrs	r4, BASEPRI
    6c22:	f383 8812 	msr	BASEPRI_MAX, r3
    6c26:	f3bf 8f6f 	isb	sy
		if (!killed) {
    6c2a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    6c2e:	f013 0f28 	tst.w	r3, #40	; 0x28
    6c32:	d10d      	bne.n	6c50 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    6c34:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    6c38:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    6c3a:	b10b      	cbz	r3, 6c40 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    6c3c:	f7ff ffe1 	bl	6c02 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6c40:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    6c44:	f023 0314 	bic.w	r3, r3, #20
    6c48:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    6c4c:	f7fe f8f0 	bl	4e30 <ready_thread>
	__asm__ volatile(
    6c50:	f384 8811 	msr	BASEPRI, r4
    6c54:	f3bf 8f6f 	isb	sy
}
    6c58:	bd10      	pop	{r4, pc}

00006c5a <add_to_waitq_locked>:
{
    6c5a:	b538      	push	{r3, r4, r5, lr}
    6c5c:	4604      	mov	r4, r0
    6c5e:	460d      	mov	r5, r1
	unready_thread(thread);
    6c60:	f7fe f91a 	bl	4e98 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6c64:	7b63      	ldrb	r3, [r4, #13]
    6c66:	f043 0302 	orr.w	r3, r3, #2
    6c6a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6c6c:	b1e5      	cbz	r5, 6ca8 <add_to_waitq_locked+0x4e>
	return list->head == list;
    6c6e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    6c70:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6c72:	429d      	cmp	r5, r3
    6c74:	d109      	bne.n	6c8a <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    6c76:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    6c78:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    6c7c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6c7e:	606c      	str	r4, [r5, #4]
}
    6c80:	e012      	b.n	6ca8 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    6c82:	686a      	ldr	r2, [r5, #4]
    6c84:	4293      	cmp	r3, r2
    6c86:	d0f6      	beq.n	6c76 <add_to_waitq_locked+0x1c>
    6c88:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c8a:	2b00      	cmp	r3, #0
    6c8c:	d0f3      	beq.n	6c76 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    6c8e:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6c92:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    6c96:	428a      	cmp	r2, r1
    6c98:	d0f3      	beq.n	6c82 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6c9a:	4291      	cmp	r1, r2
    6c9c:	ddf1      	ble.n	6c82 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    6c9e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6ca0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6ca4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6ca6:	605c      	str	r4, [r3, #4]
}
    6ca8:	bd38      	pop	{r3, r4, r5, pc}

00006caa <z_ready_thread>:
{
    6caa:	b510      	push	{r4, lr}
	__asm__ volatile(
    6cac:	f04f 0320 	mov.w	r3, #32
    6cb0:	f3ef 8411 	mrs	r4, BASEPRI
    6cb4:	f383 8812 	msr	BASEPRI_MAX, r3
    6cb8:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    6cbc:	f7fe f8b8 	bl	4e30 <ready_thread>
	__asm__ volatile(
    6cc0:	f384 8811 	msr	BASEPRI, r4
    6cc4:	f3bf 8f6f 	isb	sy
}
    6cc8:	bd10      	pop	{r4, pc}

00006cca <z_unpend_thread_no_timeout>:
{
    6cca:	b508      	push	{r3, lr}
	__asm__ volatile(
    6ccc:	f04f 0320 	mov.w	r3, #32
    6cd0:	f3ef 8111 	mrs	r1, BASEPRI
    6cd4:	f383 8812 	msr	BASEPRI_MAX, r3
    6cd8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    6cdc:	f7ff ff91 	bl	6c02 <unpend_thread_no_timeout>
	__asm__ volatile(
    6ce0:	f381 8811 	msr	BASEPRI, r1
    6ce4:	f3bf 8f6f 	isb	sy
}
    6ce8:	bd08      	pop	{r3, pc}

00006cea <z_unpend1_no_timeout>:
{
    6cea:	b508      	push	{r3, lr}
    6cec:	4603      	mov	r3, r0
	__asm__ volatile(
    6cee:	f04f 0220 	mov.w	r2, #32
    6cf2:	f3ef 8111 	mrs	r1, BASEPRI
    6cf6:	f382 8812 	msr	BASEPRI_MAX, r2
    6cfa:	f3bf 8f6f 	isb	sy
	return list->head == list;
    6cfe:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6d00:	4283      	cmp	r3, r0
    6d02:	d007      	beq.n	6d14 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    6d04:	b108      	cbz	r0, 6d0a <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    6d06:	f7ff ff7c 	bl	6c02 <unpend_thread_no_timeout>
	__asm__ volatile(
    6d0a:	f381 8811 	msr	BASEPRI, r1
    6d0e:	f3bf 8f6f 	isb	sy
}
    6d12:	bd08      	pop	{r3, pc}
    6d14:	2000      	movs	r0, #0
    6d16:	e7f8      	b.n	6d0a <z_unpend1_no_timeout+0x20>

00006d18 <z_unpend_first_thread>:
{
    6d18:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6d1a:	f04f 0320 	mov.w	r3, #32
    6d1e:	f3ef 8511 	mrs	r5, BASEPRI
    6d22:	f383 8812 	msr	BASEPRI_MAX, r3
    6d26:	f3bf 8f6f 	isb	sy
	return list->head == list;
    6d2a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6d2c:	42a0      	cmp	r0, r4
    6d2e:	d00d      	beq.n	6d4c <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    6d30:	b134      	cbz	r4, 6d40 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    6d32:	4620      	mov	r0, r4
    6d34:	f7ff ff65 	bl	6c02 <unpend_thread_no_timeout>
    6d38:	f104 0018 	add.w	r0, r4, #24
    6d3c:	f000 f81e 	bl	6d7c <z_abort_timeout>
	__asm__ volatile(
    6d40:	f385 8811 	msr	BASEPRI, r5
    6d44:	f3bf 8f6f 	isb	sy
}
    6d48:	4620      	mov	r0, r4
    6d4a:	bd38      	pop	{r3, r4, r5, pc}
    6d4c:	2400      	movs	r4, #0
    6d4e:	e7f7      	b.n	6d40 <z_unpend_first_thread+0x28>

00006d50 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6d50:	4603      	mov	r3, r0
    6d52:	b920      	cbnz	r0, 6d5e <z_reschedule_irqlock+0xe>
    6d54:	f3ef 8205 	mrs	r2, IPSR
    6d58:	b90a      	cbnz	r2, 6d5e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    6d5a:	f7fa bedd 	b.w	1b18 <arch_swap>
    6d5e:	f383 8811 	msr	BASEPRI, r3
    6d62:	f3bf 8f6f 	isb	sy
}
    6d66:	4770      	bx	lr

00006d68 <z_reschedule_unlocked>:
	__asm__ volatile(
    6d68:	f04f 0320 	mov.w	r3, #32
    6d6c:	f3ef 8011 	mrs	r0, BASEPRI
    6d70:	f383 8812 	msr	BASEPRI_MAX, r3
    6d74:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6d78:	f7ff bfea 	b.w	6d50 <z_reschedule_irqlock>

00006d7c <z_abort_timeout>:
{
    6d7c:	b510      	push	{r4, lr}
    6d7e:	f04f 0220 	mov.w	r2, #32
    6d82:	f3ef 8411 	mrs	r4, BASEPRI
    6d86:	f382 8812 	msr	BASEPRI_MAX, r2
    6d8a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    6d8e:	6803      	ldr	r3, [r0, #0]
    6d90:	b13b      	cbz	r3, 6da2 <z_abort_timeout+0x26>
			remove_timeout(to);
    6d92:	f7fe fb6b 	bl	546c <remove_timeout>
			ret = 0;
    6d96:	2000      	movs	r0, #0
	__asm__ volatile(
    6d98:	f384 8811 	msr	BASEPRI, r4
    6d9c:	f3bf 8f6f 	isb	sy
}
    6da0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6da2:	f06f 0015 	mvn.w	r0, #21
    6da6:	e7f7      	b.n	6d98 <z_abort_timeout+0x1c>

00006da8 <z_get_next_timeout_expiry>:
{
    6da8:	b510      	push	{r4, lr}
	__asm__ volatile(
    6daa:	f04f 0320 	mov.w	r3, #32
    6dae:	f3ef 8411 	mrs	r4, BASEPRI
    6db2:	f383 8812 	msr	BASEPRI_MAX, r3
    6db6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    6dba:	f7fe fb2f 	bl	541c <next_timeout>
	__asm__ volatile(
    6dbe:	f384 8811 	msr	BASEPRI, r4
    6dc2:	f3bf 8f6f 	isb	sy
}
    6dc6:	bd10      	pop	{r4, pc}

00006dc8 <z_set_timeout_expiry>:
{
    6dc8:	b570      	push	{r4, r5, r6, lr}
    6dca:	4604      	mov	r4, r0
    6dcc:	460d      	mov	r5, r1
	__asm__ volatile(
    6dce:	f04f 0320 	mov.w	r3, #32
    6dd2:	f3ef 8611 	mrs	r6, BASEPRI
    6dd6:	f383 8812 	msr	BASEPRI_MAX, r3
    6dda:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    6dde:	f7fe fb1d 	bl	541c <next_timeout>
			      || (ticks <= next_to);
    6de2:	2801      	cmp	r0, #1
    6de4:	dd07      	ble.n	6df6 <z_set_timeout_expiry+0x2e>
    6de6:	42a0      	cmp	r0, r4
    6de8:	db05      	blt.n	6df6 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6dea:	42a0      	cmp	r0, r4
    6dec:	4629      	mov	r1, r5
    6dee:	bfa8      	it	ge
    6df0:	4620      	movge	r0, r4
    6df2:	f7fc fbd1 	bl	3598 <sys_clock_set_timeout>
	__asm__ volatile(
    6df6:	f386 8811 	msr	BASEPRI, r6
    6dfa:	f3bf 8f6f 	isb	sy
}
    6dfe:	bd70      	pop	{r4, r5, r6, pc}

00006e00 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    6e00:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    6e02:	f7fe fc27 	bl	5654 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6e06:	bd08      	pop	{r3, pc}

00006e08 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    6e08:	f7fe bc24 	b.w	5654 <sys_clock_tick_get>

00006e0c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6e0c:	b108      	cbz	r0, 6e12 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6e0e:	f7fb ba03 	b.w	2218 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6e12:	4770      	bx	lr

00006e14 <k_timer_init>:
	timer->status = 0U;
    6e14:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    6e16:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    6e1a:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    6e1e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    6e22:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    6e26:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    6e28:	6343      	str	r3, [r0, #52]	; 0x34
}
    6e2a:	4770      	bx	lr

00006e2c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    6e2c:	b510      	push	{r4, lr}
    6e2e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    6e30:	f7ff ffa4 	bl	6d7c <z_abort_timeout>

	if (inactive) {
    6e34:	b9b0      	cbnz	r0, 6e64 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    6e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6e38:	b10b      	cbz	r3, 6e3e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    6e3a:	4620      	mov	r0, r4
    6e3c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    6e3e:	f104 0018 	add.w	r0, r4, #24
    6e42:	f7ff ff52 	bl	6cea <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    6e46:	b168      	cbz	r0, 6e64 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    6e48:	f7ff ff2f 	bl	6caa <z_ready_thread>
	__asm__ volatile(
    6e4c:	f04f 0320 	mov.w	r3, #32
    6e50:	f3ef 8011 	mrs	r0, BASEPRI
    6e54:	f383 8812 	msr	BASEPRI_MAX, r3
    6e58:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    6e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e60:	f7ff bf76 	b.w	6d50 <z_reschedule_irqlock>
    6e64:	bd10      	pop	{r4, pc}

00006e66 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6e66:	4770      	bx	lr

00006e68 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    6e68:	f7fc bc2e 	b.w	36c8 <SystemInit>
